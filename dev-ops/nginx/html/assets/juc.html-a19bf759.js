import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as u,c,f as o,e as p,w as l,b as a,d as s}from"./app-9393c1ef.js";const r={},d={id:"线程池核心参数",tabindex:"-1"},k={start:"2"},v={id:"为什么要加锁",tabindex:"-1"},m={id:"为什么加锁-分类",tabindex:"-1"},b={id:"乐观锁-悲观锁",tabindex:"-1"},f={id:"悲观锁",tabindex:"-1"},g={id:"synchronized",tabindex:"-1"},y={id:"特点",tabindex:"-1"},w={id:"原理",tabindex:"-1"},x={id:"对象头",tabindex:"-1"},S={id:"重量级锁",tabindex:"-1"},T={id:"轻量级锁",tabindex:"-1"},C={id:"偏向锁",tabindex:"-1"},j={id:"锁膨胀流程",tabindex:"-1"},E={id:"优化",tabindex:"-1"},q={id:"自旋锁",tabindex:"-1"},D={id:"自适应自旋锁",tabindex:"-1"},A={id:"锁消除",tabindex:"-1"},P={id:"锁粗化",tabindex:"-1"},N={id:"reentrantlock",tabindex:"-1"},I={id:"乐观锁",tabindex:"-1"},F={id:"cas",tabindex:"-1"},L={id:"定义",tabindex:"-1"},R={id:"怎么用",tabindex:"-1"},U={id:"问题",tabindex:"-1"},z={id:"锁优化",tabindex:"-1"},O={id:"aqs",tabindex:"-1"},B={id:"定义-1",tabindex:"-1"},M={id:"原理-1",tabindex:"-1"},J={id:"实现同步器",tabindex:"-1"},V={id:"·jmm",tabindex:"-1"},W={id:"计算机内存模型",tabindex:"-1"},H={id:"缓存一致性问题",tabindex:"-1"},K={id:"指令重排",tabindex:"-1"},G={id:"并发编程的问题",tabindex:"-1"},Q={id:"什么是内存模型",tabindex:"-1"},Y={id:"什么是java内存模型",tabindex:"-1"},X={id:"java内存模型的实现",tabindex:"-1"},Z={id:"原子性",tabindex:"-1"},$={id:"可见性",tabindex:"-1"},h={id:"有序性",tabindex:"-1"},_={id:"可见性-1",tabindex:"-1"},nn={id:"有序性-1",tabindex:"-1"},sn={id:"实践-双检锁单例",tabindex:"-1"},an={id:"比较",tabindex:"-1"},tn={id:"final",tabindex:"-1"},pn={id:"定义-2",tabindex:"-1"},ln={id:"不可变类",tabindex:"-1"};function on(en,n){const t=i("font");return u(),c("div",null,[n[399]||(n[399]=o('<h1 id="·线程" tabindex="-1"><a class="header-anchor" href="#·线程" aria-hidden="true">#</a> ·线程</h1><h2 id="_1线程" tabindex="-1"><a class="header-anchor" href="#_1线程" aria-hidden="true">#</a> 1线程</h2><h3 id="线程生命周期" tabindex="-1"><a class="header-anchor" href="#线程生命周期" aria-hidden="true">#</a> 线程生命周期</h3><p>锁池和等待池</p><p>Java中的对象有两个池，对对象加synchronized锁时必须获得对象锁，没有获得锁的线程进入锁池。获取到锁的线程如果调用了wait()方法就会进入等待池，进入等待池的线程不会竞争对象锁。</p><p>状态：</p><ol><li>新建New：new新建一个线程，处于新建状态。为线程分配内存并初始化成员变量的值。</li><li>就绪Runnable：可运行态。start启动一个线程，处于就绪状态。</li><li>运行Running：获取CPU资源后，执行run方法进入运行状态。</li><li>阻塞Blocked <ol><li>同步阻塞：运行线程尝试获取同步锁没有获取到，JVM会把线程放入锁池。</li><li>其他阻塞：运行线程执行sleep、I/O阻塞（等待用户输入），JVM会把线程转入阻塞状态。</li></ol></li><li>waiting状态： <ol><li>调用wait方法，进入waiting状态，会释放对象锁。被notify唤醒会变为runnable状态，被唤醒是从等待池进入锁池重新竞争锁，状态其实是blocked。获取到锁以后才是runnable。</li><li>调用join方法，也会让调用join的线程从runnable变成waiting。</li></ol></li><li>死亡Dead：处于运行状态的线程调用run方法或call方法执行完成后、调用stop方法停止线程、程序执行错误/异常退出，进入死亡状态。</li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1662652578758-529e74a9-7825-480a-8dec-b998298dc51a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="线程基本方法" tabindex="-1"><a class="header-anchor" href="#线程基本方法" aria-hidden="true">#</a> 线程基本方法</h3><p>定义：</p><ol><li>wait</li><li>notify</li><li>notifyAll</li><li>sleep</li><li>join</li><li>yield</li></ol>',11)),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[0]||(n[0]=[s("wait：线程等待")])),_:1}),n[400]||(n[400]=a("p",null,"定义：",-1)),n[401]||(n[401]=a("ol",null,[a("li",null,"调用wait进入WAITING状态。"),a("li",null,"等到其他线程通知或者被中断才会返回。"),a("li",null,"会释放对象锁。"),a("li",null,"一般用于同步方法或同步代码块中。")],-1)),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[1]||(n[1]=[s("sleep：线程睡眠")])),_:1}),n[402]||(n[402]=a("p",null,"定义：",-1)),n[403]||(n[403]=a("ol",null,[a("li",null,"调用sleep会导致当前线程休眠。"),a("li",null,"sleep方法不会释放当前锁。"),a("li",null,"线程进入TIMED-WAITING状态。")],-1)),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[2]||(n[2]=[s("yield：线程让步")])),_:1}),n[404]||(n[404]=a("p",null,"定义：",-1)),n[405]||(n[405]=a("ol",null,[a("li",null,"调用yeild会让当前线程释放CPU时间片。"),a("li",null,"与其他线程一起重新竞争CPU时间片。")],-1)),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[3]||(n[3]=[s("interrupt：线程中断")])),_:1}),n[406]||(n[406]=o(`<p>定义：</p><ol><li>调用interrupt会改变线程内部的中断标志位。</li><li>线程本身不会改变状态。</li><li>如果处于sleep阶段，比如调用sleep使线程处于TIMED-WAITING状态，</li><li>调用interrupt会抛出InterruptedException。抛异常前会清除中断标志位。</li><li>再调用isInterrupted会返回false。</li></ol><p>应用：可以安全退出的线程</p><ol><li>写一个线程类继承Thread。</li><li>重写run方法。</li><li>如果isInterrupted是false，那么①正常执行我们的业务逻辑，②之后sleep一会。</li><li>在这期间如果sleep过程中，线程被interrupt了，那么会抛异常。</li><li>我们把异常捕获。</li><li>因为抛异常前会把标志位置为false。</li><li>所以我们异常处理中手动把标志位置为true。也就是我们手动interrupt一下。</li><li>然后如果标志位是true，我们进行处理资源释放等工作。</li></ol><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeInterruptThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 处理正常的线程业务逻辑</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理线程结束前的一些资源释放和清理工作。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">SafeInterruptThread</span> thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SafeInterruptThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[4]||(n[4]=[s("join：线程加入")])),_:1}),n[407]||(n[407]=o("<p>定义：</p><ol><li>join用于等待其他线程终止。</li><li>如果当前线程调用一个线程join方法。</li><li>则当前线程会阻塞，等到另一个线程结束。</li><li>状态由阻塞变为就绪。</li></ol><p>举例：</p><ol><li>主线程启动子线程。</li><li>需要等待子线程返回结果并收集处理再退出。</li><li>就需要用到join方法。</li></ol>",4)),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[5]||(n[5]=[s("notify：线程唤醒")])),_:1}),n[408]||(n[408]=a("p",null,"定义：",-1)),n[409]||(n[409]=a("ol",null,[a("li",null,"Object类的notify方法。"),a("li",null,"用于唤醒在monitor对象上等待的一个线程。"),a("li",null,"我们调用一个对象的wait方法在monitor的等待池中等待。"),a("li",null,"notifyAll类似，唤醒在monitor对象上等待的所有线程。")],-1)),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[6]||(n[6]=[s("setDaemon：后台守护线程")])),_:1}),n[410]||(n[410]=o(`<p>定义：</p><ol><li>是后台线程。</li><li>通过线程对象setDaemon(true)来设置。</li></ol><p>例子：</p><ol><li>垃圾回收线程。</li></ol><h4 id="sleep与wait方法的区别" tabindex="-1"><a class="header-anchor" href="#sleep与wait方法的区别" aria-hidden="true">#</a> sleep与wait方法的区别？</h4><ol><li>sleep属于Thread类，wait属于Object类。</li><li>sleep暂停执行，让出CPU给其他线程。指定时间过后恢复运行状态。</li><li>sleep执行过程中线程不会释放对象锁。</li><li>wait方法线程会释放对象锁。进入对象的等待锁池。</li><li>只有针对此对象调用notify方法，该线程才能进入锁池准备获取对象锁。</li></ol><h4 id="start方法与run方法区别" tabindex="-1"><a class="header-anchor" href="#start方法与run方法区别" aria-hidden="true">#</a> start方法与run方法区别？</h4><ol><li>start用于启动线程。不需要等待run执行完，可以继续向下执行。</li><li>调用start启动一个线程，线程处于就绪状态。</li><li>调用run方法后，线程才处于运行状态。</li></ol><h2 id="_2线程的创建方式" tabindex="-1"><a class="header-anchor" href="#_2线程的创建方式" aria-hidden="true">#</a> 2线程的创建方式</h2><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>通过ExecutorService和Callable&lt;Class&gt;实现有返回值的线程。</li><li>基于线程池创建线程</li></ol><h3 id="继承thread类" tabindex="-1"><a class="header-anchor" href="#继承thread类" aria-hidden="true">#</a> 继承Thread类</h3><p>步骤：</p><ol><li>写一个类，继承Thread类。</li><li>重写里面的run方法</li><li>实例化这个类。</li><li>对象调用start()方法启动线程。</li></ol><h3 id="实现runnable接口" tabindex="-1"><a class="header-anchor" href="#实现runnable接口" aria-hidden="true">#</a> 实现Runnable接口</h3><p>步骤：</p><ol><li>一个类实现Runnable接口。</li><li>实现里面的run方法。</li><li>实例化这个类。</li><li>创建一个线程，把这个对象传入线程实例。</li><li>调用线程的start方法启动线程。</li></ol><h3 id="通过executorservice和callable-class-实现有返回值的线程" tabindex="-1"><a class="header-anchor" href="#通过executorservice和callable-class-实现有返回值的线程" aria-hidden="true">#</a> 通过ExecutorService和Callable&lt;Class&gt;实现有返回值的线程</h3><p>步骤：</p><ol><li>一个类实现Callable接口。</li><li>实现call方法，并给出返回值。</li><li>创建一个线程池。</li><li>创建一个list，用于存储任务列表future。</li><li>循环创建Callable对象，并提交到线程池执行，获取future并放入list。</li><li>关闭线程池，等待线程执行结束。</li><li>遍历future list，获取任务的返回值。</li></ol><p>作用：</p><ol><li>多个子线程并发执行一个任务。</li><li>每个线程会有返回的结果。</li><li>将返回结果进行汇总。</li><li>遍历future list，通过get方法获取返回值。</li></ol><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Callable</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span> future <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Future</span> future<span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;get the result:&quot;</span><span class="token operator">+</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h3><p>步骤：</p><ol><li>创建线程池。</li><li>往线程池里提交多个任务并执行。</li></ol><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> threadPool<span class="token operator">=</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3线程池" tabindex="-1"><a class="header-anchor" href="#_3线程池" aria-hidden="true">#</a> 3线程池</h2><h3 id="好处" tabindex="-1"><a class="header-anchor" href="#好处" aria-hidden="true">#</a> 好处</h3>`,30)),a("ol",null,[a("li",null,[a("p",null,[n[8]||(n[8]=s("可以")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[7]||(n[7]=[s("重复利用")])),_:1}),n[9]||(n[9]=s("已创建的线程资源，降低线程创建和销毁造成的消耗，减少资源浪费。"))])]),n[13]||(n[13]=a("li",null,[a("p",null,"任务到达可以不需要等到线程创建就立即执行，提高响应速度。")],-1)),a("li",null,[a("p",null,[n[11]||(n[11]=s("由线程池实现对线程统一的")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[10]||(n[10]=[s("分配，创建，调优和监控")])),_:1}),n[12]||(n[12]=s("。如果线程无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性。"))])])]),n[411]||(n[411]=a("h3",{id:"状态",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#状态","aria-hidden":"true"},"#"),s(" 状态")],-1)),n[412]||(n[412]=a("p",null,"RUNNING：能够接收任务的状态。线程池被创建的初始状态就是RUNNING状态。",-1)),n[413]||(n[413]=a("p",null,"SHUTDOWN：不接受新任务，但是已添加的任务可以继续执行。调用线程池的shutdown()接口，可以RUNNING->SHUTDOWN",-1)),n[414]||(n[414]=a("p",null,"STOP：停止，不接收新的，不处理已有的，正在处理的会中断。调用shutdownNow()接口。",-1)),n[415]||(n[415]=a("p",null,"TIDYING：如果是SHUTDOWN，阻塞队列为空并且执行的任务也为空，变为TIDYING。如果是STOP，执行的任务为空时，变为TIDYING。",-1)),n[416]||(n[416]=a("p",null,"TERMINATED：线程池彻底终止。有TIDYING状态调用terminated()会变为TERMINATED状态。",-1)),n[417]||(n[417]=a("h3",{id:"jdk",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jdk","aria-hidden":"true"},"#"),s(" JDK")],-1)),a("p",null,[n[16]||(n[16]=s("java5之后引入，用executor启动线程易于")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[14]||(n[14]=[s("管理")])),_:1}),n[17]||(n[17]=s("，")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[15]||(n[15]=[s("效率")])),_:1}),n[18]||(n[18]=s("更高（线程池实现）。避免this逃逸问题（this逃逸是指在构造函数返回之前其他线程就持有该对象的引用，调用尚未构造完全的对象的方法可能引发令人疑惑的错误）。"))]),n[418]||(n[418]=a("p",null,"Executor使用线程池流程：",-1)),a("ol",null,[a("li",null,[a("p",null,[n[20]||(n[20]=s("主线程创建实现Runnable或者Callable接口的")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[19]||(n[19]=[s("任务")])),_:1}),n[21]||(n[21]=s("对象。"))])]),n[27]||(n[27]=a("li",null,[a("p",null,"创建线程池（Executors.newFixedThreadPool(5)或者new ThreadPoolExecutor()构造创建）")],-1)),n[28]||(n[28]=a("li",null,[a("p",null,"把Runnable对象或Callable对象提交给executorService执行。executorService.submit(Runnable task)或者executor.execute(Runnable command)，")],-1)),n[29]||(n[29]=a("li",null,[a("p",null,"如果执行executorService.submit(),将返回一个实现Future接口的对象，")],-1)),a("li",null,[a("p",null,[n[24]||(n[24]=s("最后，主线程可以执行FutureTask.get()方法来")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[22]||(n[22]=[s("等待")])),_:1}),n[25]||(n[25]=s("任务执行完成。主线程也可以执行FutureTask.cancel来")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[23]||(n[23]=[s("取消")])),_:1}),n[26]||(n[26]=s("次任务的执行。"))])])]),n[419]||(n[419]=a("h4",{id:"_1-threadpoolexecutor",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-threadpoolexecutor","aria-hidden":"true"},"#"),s(" 1. ThreadPoolExecutor")],-1)),a("h5",d,[n[31]||(n[31]=a("a",{class:"header-anchor",href:"#线程池核心参数","aria-hidden":"true"},"#",-1)),n[32]||(n[32]=s()),p(t,{style:{color:"#000000"}},{default:l(()=>n[30]||(n[30]=[s("线程池核心参数")])),_:1})]),n[420]||(n[420]=o('<ol><li>int corePoolSize：线程池核心线程数。</li><li>int maximumPoolSize：线程池的最大线程数。</li><li>long keepAliveTime：当线程数大于核心线程数时，多余的空闲线程存活时间。</li><li>TimeUnit unit：keepAliveTime时间单位。</li><li>BlockingQueue&lt;Runnable&gt; workQueue：任务队列，用来存储等待执行任务的队列。</li><li>ThreadFactory threadFactory：线程工厂，用来创建线程，可以自定义一般默认。</li><li>RejectedExecutionHandler handler：拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务。</li></ol><h5 id="线程池拒绝策略" tabindex="-1"><a class="header-anchor" href="#线程池拒绝策略" aria-hidden="true">#</a> 线程池拒绝策略</h5><p>AbortPolicy：抛异常拒绝新任务</p><p>CallerRunsPolicy：用调用者的线程运行任务</p><p>DiscardPolicy：不处理，直接丢弃掉</p><p>DiscardOldestPolicy：丢弃最早的未处理的任务请求。</p><h5 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h5>',7)),a("ol",null,[n[42]||(n[42]=a("li",null,"当提交一个任务给线程池，executorService.submit(task)。",-1)),n[43]||(n[43]=a("li",null,"如果运行线程数小于核心线程数，线程池会创建线程。",-1)),a("li",null,[n[34]||(n[34]=s("如果线程数量>=corePoolSize，满了，看")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[33]||(n[33]=[s("等待队列")])),_:1}),n[35]||(n[35]=s("是否已满，如果没满，把任务加入任务队列。"))]),a("li",null,[n[37]||(n[37]=s("如果任务队列满了，看当前线程池")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[36]||(n[36]=[s("线程数")])),_:1}),n[38]||(n[38]=s("是否到达maximumPoolSize，最大线程数，如果没有满，创建线程。"))]),a("li",null,[n[40]||(n[40]=s("如果到最大线程数，按照")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[39]||(n[39]=[s("拒绝策略")])),_:1}),n[41]||(n[41]=s("处理。"))]),n[44]||(n[44]=a("li",null,"如果线程数超过corePoolSize，空闲时间超过keepAliveTime，会被认定空闲线程并停止。最后会到corePoolSize大小。",-1))]),n[421]||(n[421]=a("h5",{id:"线程池大小设计",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#线程池大小设计","aria-hidden":"true"},"#"),s(" 线程池大小设计")],-1)),a("p",null,[n[48]||(n[48]=s("如果线程池数量")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[45]||(n[45]=[s("太小")])),_:1}),n[49]||(n[49]=s("，如果同一时间")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[46]||(n[46]=[s("大量任务")])),_:1}),n[50]||(n[50]=s("需要处理，可能会导致大量请求/任务在排队")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[47]||(n[47]=[s("等待")])),_:1}),n[51]||(n[51]=s("，甚至出现任务队列满了之后任务无法处理的情况，或者大量任务堆积在任务队列导致OOM。CPU没有得到充分利用？"))]),a("p",null,[n[54]||(n[54]=s("如果设置线程数量")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[52]||(n[52]=[s("太大")])),_:1}),n[55]||(n[55]=s("，大量线程争夺CPU资源，导致大量上下文")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[53]||(n[53]=[s("切换")])),_:1}),n[56]||(n[56]=s("，增加线程执行时间，影响效率。"))]),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[57]||(n[57]=[s("CPU密集型任务（N+1）：")])),_:1}),n[422]||(n[422]=s("这种任务消耗的主要是CPU资源，可以将线程数设置为N（cpu核心数）+1，比CPU核心多出来一个线程是为了防止线程偶发的缺页中断，或者其他原因导致的")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[58]||(n[58]=[s("任务暂停")])),_:1}),n[423]||(n[423]=s("而带来的影响。一旦任务暂停，CPU就会处于空闲状态，这种情况下多一个线程可以")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[59]||(n[59]=[s("充分利用")])),_:1}),n[424]||(n[424]=s("CPU的空闲时间。")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[60]||(n[60]=[s("IO密集型任务（2N）：")])),_:1}),n[425]||(n[425]=s("这种任务应用起来，系统会用大部分时间来处理")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[61]||(n[61]=[s("IO交互")])),_:1}),n[426]||(n[426]=s("，而线程在处理IO的时间段内不会占用CPU，这时可以把")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[62]||(n[62]=[s("CPU交出")])),_:1}),n[427]||(n[427]=o(`给其他线程使用。所以可以多配置一些线程，2N。<h4 id="_2-newcachedthreadpool" tabindex="-1"><a class="header-anchor" href="#_2-newcachedthreadpool" aria-hidden="true">#</a> 2. newCachedThreadPool</h4><p>定义：</p><ol><li>创建一个缓存线程池。</li></ol><p>特点：</p><ol><li>创建新线程时，如果有可重用线程(任务已经完成但还没有关闭)，则重用。</li><li>否则重新创建一个新的线程并添加线程池。</li><li>重用线程提高性能。</li><li>没有线程池数量限制，而且会回收不执行任务的线程。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> executorService1<span class="token operator">=</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-newfixedthreadpool" tabindex="-1"><a class="header-anchor" href="#_3-newfixedthreadpool" aria-hidden="true">#</a> 3. newFixedThreadPool</h4><p>定义：</p><ol><li>用于创建固定线程数量的线程池。和ThreadPoolExecutor类似。</li></ol><p>特点：</p><ol><li>使用无界阻塞队列（容量Integer.MAX_VALUE）。</li><li>当线程池中的线程数达到corePoolSize后，新任务在无界队列中等待。</li><li>因此线程数不会超过corePoolSize。</li><li>最大线程数maximumPoolSize将是一个无效参数，因为不可能存在任务队列满的情况，源码=corePoolSize。</li><li>不会拒绝任务，当任务较多时会OOM。</li><li>因此keepAliveTime将是无效参数。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> executorService<span class="token operator">=</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-newscheduledthreadpool" tabindex="-1"><a class="header-anchor" href="#_4-newscheduledthreadpool" aria-hidden="true">#</a> 4. newScheduledThreadPool</h4><p>定义：</p><ol><li>创建了一个可定时调度的线程池。</li><li>可以设置给定延迟时间执行。</li><li>可以设置定期执行某个任务。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ScheduledExecutorService</span> scheduledThreadPool<span class="token operator">=</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//1.创建一个延迟3秒执行的线程</span>
scheduledThreadPool<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;delay 3 seconds execu.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.创建一个延迟1秒执行且每3秒执行一次的线程</span>
scheduledThreadPool<span class="token punctuation">.</span><span class="token function">scheduledAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>&quot;delay <span class="token number">1</span> seconds<span class="token punctuation">,</span>repeat execute
                           every <span class="token number">3</span> seconds&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-newsinglethreadexecutor" tabindex="-1"><a class="header-anchor" href="#_5-newsinglethreadexecutor" aria-hidden="true">#</a> 5. newSingleThreadExecutor</h4><p>定义：</p><ol><li>保证永远有且只有1个可用线程。</li><li>如果线程出现了异常停止了，线程池会启动一个新的线程代替继续执行。</li></ol><h3 id="spring线程池" tabindex="-1"><a class="header-anchor" href="#spring线程池" aria-hidden="true">#</a> Spring线程池</h3><h4 id="_1-spring普通线程池" tabindex="-1"><a class="header-anchor" href="#_1-spring普通线程池" aria-hidden="true">#</a> 1. spring普通线程池</h4><p>ThreadPoolTaskExecutor</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskExecutor</span> threadPoolTaskExecutor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-spring可执行定时任务线程池" tabindex="-1"><a class="header-anchor" href="#_2-spring可执行定时任务线程池" aria-hidden="true">#</a> 2. spring可执行定时任务线程池：</h4><p>ThreadPoolTaskScheduler</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskScheduler</span> threadPoolTaskScheduler<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4实践" tabindex="-1"><a class="header-anchor" href="#_4实践" aria-hidden="true">#</a> 4实践</h2><h3 id="线程池实践之jdk线程池" tabindex="-1"><a class="header-anchor" href="#线程池实践之jdk线程池" aria-hidden="true">#</a> 线程池实践之jdk线程池</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.JDK普通线程池</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Runnable</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Hello ExecutorService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. JDK执行定时任务线程池</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testScheduledExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Runnable</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Hello ScheduledExecutorService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 延迟10000毫秒，时间间隔是1000毫秒，时间单位</span>
    scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池实践之异步刷新阅读数" tabindex="-1"><a class="header-anchor" href="#线程池实践之异步刷新阅读数" aria-hidden="true">#</a> 线程池实践之异步刷新阅读数</h3><p>用户点开博文详情的时候，阅读数会对应的加一，这个阅读数加一是需要修改mysql数据库的数据的，是需要访问磁盘的，所以希望在不影响用户看文章的情况下进行数据库操作，所以采用了多线程异步刷新阅读数的操作，实现就通过spring的线程池实现的。</p><ol><li>线程池注入，使用spring的线程池，ThreadPoolTaskExecutor</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">asyncServiceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置核心线程数</span>
        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置最大线程数</span>
        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//配置队列大小</span>
        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置线程活跃时间（秒）</span>
        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置默认线程名称</span>
        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;码神之路博客项目&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 等待所有任务结束后再关闭线程池</span>
        executor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//执行初始化</span>
        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34)),a("ol",k,[a("li",null,[n[64]||(n[64]=s("执行刷新阅读数操作，也就是线程池需要执行的任务，这个任务要做的事，首先获取阅读数，这里记录一下一会有用。这里使用了一个乐观锁，")),p(t,{style:{"background-color":"#D3F5F0"}},{default:l(()=>n[63]||(n[63]=[s("阅读数")])),_:1}),n[65]||(n[65]=s("相当于一个版本号，在更新也就是阅读数+1的同时看一下当前数据库中的阅读数是不是和我刚才记录下来的阅读数一样，避免并发修改出现问题。"))])]),n[428]||(n[428]=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 期望此操作在线程池执行，不会影响原有的主线程</span>
    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateArticleViewCount</span><span class="token punctuation">(</span><span class="token class-name">ArticleMapper</span> articleMapper<span class="token punctuation">,</span> <span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> viewCounts <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">getViewCounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1个bug，创建对象，这个对象中值对应是基本类型，默认是0，mybatisplus把0值更新到数据库中.只要不为null，就更新</span>
        <span class="token comment">// 我们要更新viewCount,但是把comment_counts,weight更新成0了。</span>
        <span class="token class-name">Article</span> articleUpdate<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        articleUpdate<span class="token punctuation">.</span><span class="token function">setViewCounts</span><span class="token punctuation">(</span>viewCounts<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> updateWrapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        updateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span>article<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置一个，为了在多线程的环境下线程安全</span>
        updateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">getViewCounts</span><span class="token punctuation">,</span>viewCounts<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// update article set view_count=100 where view_count =99 and id=***</span>
        articleMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>articleUpdate<span class="token punctuation">,</span>updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// Thread.sleep(5000);</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;更新完成了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在访问查看文章详情接口时，执行异步刷新阅读数操作</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ThreadService</span> threadService<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">findArticleById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> articleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 1. 根据文章显示文章详情(文章-&gt;body，tag，分类categorid)
     * 2. 根据bodyId和categoryid去做关联查询
     */</span>
    <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>articleMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>articleId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArticleVo</span> articleVo <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>article<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查看完文章了，新增阅读数，有没有问题呢？</span>
    <span class="token comment">// 查看完文章之后，本应该直接返回数据了，这时候做了一个更新操作，更新时加写锁，阻塞其他读操作,性能会比较低</span>
    <span class="token comment">// 更新 增加了此次接口的耗时，如果一旦更新出问题，不能影响查看文章的操作</span>
    <span class="token comment">// 线程池，可以把更新操作扔到线程池中执行，和主线程就不相关了</span>
    threadService<span class="token punctuation">.</span><span class="token function">updateArticleViewCount</span><span class="token punctuation">(</span>articleMapper<span class="token punctuation">,</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>articleVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存击穿问题" tabindex="-1"><a class="header-anchor" href="#缓存击穿问题" aria-hidden="true">#</a> 缓存击穿问题</h3><p>kyx逻辑过期：不设置ttl。不保证一致性。</p><p>过期了，锁[开一个新线程去做更新，我就返回一个旧的。]释放。</p><p>如果一个线程查询到数据发现过期了，那么尝试获取锁，如果获取到锁了，那么新开一个线程去做缓存重建的工作，然后把逻辑过期的旧数据返回。这样另外一个线程在缓存重建未成功时进去了，也发现过期了，那么他也尝试获取锁，不过没获取到，那么它就知道有其他线程在做缓存重建的工作，那么它也是直接把旧数据返回。它不能保证数据的一致性，但是能保证可用性。</p><p>这里使用的线程池就是JDK普通线程池，ThreadPoolExecutor。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> <span class="token constant">CACHE_REBUILD_EXECUTOR</span> <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span>  <span class="token generics"><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span> <span class="token function">huancunjichuanluojiguoqi</span><span class="token punctuation">(</span>
        <span class="token class-name">String</span> keypreix<span class="token punctuation">,</span> <span class="token class-name">ID</span> id<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> function<span class="token punctuation">,</span> <span class="token class-name">Long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从redis获取商铺信息</span>
    <span class="token class-name">String</span> rstring <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keypreix <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果为空返回空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>rstring<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 因为热点数据默认缓存里都有，如果没有说明数据库里应该也没有</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果不为空，判断expiretime是否过期</span>
    <span class="token class-name">RedisData</span> redisData <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>rstring<span class="token punctuation">,</span> <span class="token class-name">RedisData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JSONObject</span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> redisData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">R</span> r1 <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LocalDateTime</span> expireTime <span class="token operator">=</span> redisData<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>expireTime<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果没过期直接返回</span>
        <span class="token keyword">return</span> r1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果过期了,看是否能获取锁</span>
    <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_SHOP_KEY</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果获取不到锁,把旧的返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果能获取锁,开一个线程去重建redis</span>
        <span class="token constant">CACHE_REBUILD_EXECUTOR</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">R</span> r2 <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">cunWithLjtime</span><span class="token punctuation">(</span>keypreix<span class="token punctuation">,</span> id<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> time<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_SHOP_KEY</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重建还是没获取到锁都返回旧的值</span>
    <span class="token keyword">return</span> r1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token constant">LOCK_SHOP_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">BooleanUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 存redis逻辑过期时间</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">cunWithLjtime</span><span class="token punctuation">(</span><span class="token class-name">String</span> keypreix<span class="token punctuation">,</span> <span class="token class-name">ID</span> id<span class="token punctuation">,</span> <span class="token class-name">R</span> r<span class="token punctuation">,</span> <span class="token class-name">Long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> keypreix <span class="token operator">+</span> id<span class="token punctuation">;</span>
    <span class="token class-name">RedisData</span> redisData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisData<span class="token punctuation">.</span><span class="token function">setExpireTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span>unit<span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>redisData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池实践之异步上传七牛云" tabindex="-1"><a class="header-anchor" href="#线程池实践之异步上传七牛云" aria-hidden="true">#</a> 线程池实践之异步上传七牛云</h3>`,10)),a("p",null,[n[67]||(n[67]=s("消费者消费分享长图事件。用一个wk，toimage大概就是这么个工具，给他传递一个url，生成长图，存到服务端，某一个位置。然后用spring可执行定时任务的线程池，去执行定时查看是否生成成功，然后")),p(t,{style:{"background-color":"#FADB14"}},{default:l(()=>n[66]||(n[66]=[s("上传")])),_:1}),n[68]||(n[68]=s("到七牛云的操作。"))]),n[429]||(n[429]=o(`<ol><li>创建任务，实现Runnable接口</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">UploadTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文件名称</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fileName<span class="token punctuation">;</span>
    <span class="token comment">// 文件后缀</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>
    <span class="token comment">// 启动任务的返回值</span>
    <span class="token keyword">private</span> <span class="token class-name">Future</span> future<span class="token punctuation">;</span>
    <span class="token comment">// 开始时间</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>
    <span class="token comment">// 上传次数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> uploadTimes<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">UploadTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFuture</span><span class="token punctuation">(</span><span class="token class-name">Future</span> future<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>future <span class="token operator">=</span> future<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成失败</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime <span class="token operator">&gt;</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;执行时间过长，终止任务：&quot;</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 上传失败</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadTimes <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;上传次数过多，终止任务：&quot;</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> path <span class="token operator">=</span> wkImageStorage <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> suffix<span class="token punctuation">;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;开始第%d次上传[%s].&quot;</span><span class="token punctuation">,</span> <span class="token operator">++</span>uploadTimes<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置响应信息</span>
            <span class="token class-name">StringMap</span> policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            policy<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;returnBody&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CommunityUtil</span><span class="token punctuation">.</span><span class="token function">getJSONString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 生成上传凭证</span>
            <span class="token class-name">Auth</span> auth <span class="token operator">=</span> <span class="token class-name">Auth</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> uploadToken <span class="token operator">=</span> auth<span class="token punctuation">.</span><span class="token function">uploadToken</span><span class="token punctuation">(</span>shareBucketName<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">,</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 指定上传机房</span>
            <span class="token class-name">UploadManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token class-name">Zone</span><span class="token punctuation">.</span><span class="token function">zone1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 开始上传图片</span>
                <span class="token class-name">Response</span> response <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>
                    path<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> uploadToken<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;image/&quot;</span> <span class="token operator">+</span> suffix<span class="token punctuation">,</span> <span class="token boolean">false</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 处理响应结果</span>
                <span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">bodyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> json<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token operator">!</span>json<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;第%d次上传失败[%s].&quot;</span><span class="token punctuation">,</span>uploadTimes<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;第%d次上传成功[%s].&quot;</span><span class="token punctuation">,</span> uploadTimes<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">QiniuException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;第%d次上传失败[%d].&quot;</span><span class="token punctuation">,</span> uploadTimes<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;等待图片生成[&quot;</span><span class="token operator">+</span>fileName<span class="token operator">+</span><span class="token string">&quot;].&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>kafka消费者生成长图，线程池上传七牛云。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskScheduler</span> taskScheduler<span class="token punctuation">;</span>

<span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token constant">TOPIC_SHARE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShareMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>record <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息的内容为空！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Event</span> event <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Event</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息格式错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> htmlUrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;htmlUrl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;fileName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> suffix <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;suffix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> cmd <span class="token operator">=</span> wkImageCommand <span class="token operator">+</span> <span class="token string">&quot; --quality 75 &quot;</span>
        <span class="token operator">+</span> htmlUrl <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> wkImageStorage <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> suffix<span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;生成长图成功：&quot;</span><span class="token operator">+</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;生成长图失败：&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 启用定时器，监视该图片，一旦生成了，则上传至七牛云</span>
    <span class="token class-name">UploadTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadTask</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Future</span> future <span class="token operator">=</span> taskScheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    task<span class="token punctuation">.</span><span class="token function">setFuture</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="·锁" tabindex="-1"><a class="header-anchor" href="#·锁" aria-hidden="true">#</a> ·锁</h1>`,5)),a("h2",v,[n[70]||(n[70]=a("a",{class:"header-anchor",href:"#为什么要加锁","aria-hidden":"true"},"#",-1)),n[71]||(n[71]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[69]||(n[69]=[s("为什么要加锁？")])),_:1})]),a("h3",m,[n[73]||(n[73]=a("a",{class:"header-anchor",href:"#为什么加锁-分类","aria-hidden":"true"},"#",-1)),n[74]||(n[74]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[72]||(n[72]=[s("为什么加锁/分类")])),_:1})]),n[430]||(n[430]=a("ol",null,[a("li",null,"保障多线程并发情况下数据一致性。"),a("li",null,"同一时刻只有一个线程访问共享变量。")],-1)),n[431]||(n[431]=a("p",null,"分类：",-1)),n[432]||(n[432]=a("ol",null,[a("li",null,"乐观悲观：乐观锁和悲观锁。"),a("li",null,"公平性角度：公平锁和非公平锁。"),a("li",null,"是否共享资源：共享锁和独占锁。"),a("li",null,"锁的状态：偏向锁、轻量级锁和重量级锁。")],-1)),a("h3",b,[n[76]||(n[76]=a("a",{class:"header-anchor",href:"#乐观锁-悲观锁","aria-hidden":"true"},"#",-1)),n[77]||(n[77]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[75]||(n[75]=[s("乐观锁/悲观锁")])),_:1})]),n[433]||(n[433]=o("<p>乐观锁：</p><ol><li>乐观</li><li>每次读取数据认为别人不会修改，读不加锁。</li><li>更新会判断别人有没有更新该数据。</li><li>步骤：读，比较，写。</li><li>读取版本号，比较当前版本号和上一次是否一致，如果一致写。否则重复。</li></ol><p>举例：</p><ol><li>java中乐观锁通过CAS操作实现。</li><li>比较当前值和传入值是否一样，一样更新，否则不更新。</li></ol><p>悲观锁：</p><ol><li>悲观。</li><li>读取数据认为别人会修改数据。</li><li>读写数据都加锁。</li><li>这样别人读写数据会阻塞，直到获取到锁。</li></ol>",6)),a("h2",f,[n[79]||(n[79]=a("a",{class:"header-anchor",href:"#悲观锁","aria-hidden":"true"},"#",-1)),n[80]||(n[80]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[78]||(n[78]=[s("悲观锁")])),_:1})]),a("h3",g,[n[82]||(n[82]=a("a",{class:"header-anchor",href:"#synchronized","aria-hidden":"true"},"#",-1)),n[83]||(n[83]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[81]||(n[81]=[s("synchronized")])),_:1})]),a("h4",y,[n[85]||(n[85]=a("a",{class:"header-anchor",href:"#特点","aria-hidden":"true"},"#",-1)),n[86]||(n[86]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[84]||(n[84]=[s("特点")])),_:1})]),a("ul",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[87]||(n[87]=[s("JVM关键字。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[88]||(n[88]=[s("可以加在方法、代码块上。实现线程安全。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[89]||(n[89]=[s("作用于非静态方法，锁住的是对象实例。作用于静态方法，锁住的是Class对象。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[90]||(n[90]=[s("非公平锁：获取锁的顺序不一定就是线程申请锁时的顺序。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[91]||(n[91]=[s("可重入。外层函数获取锁后，内层递归函数仍然可以获取锁。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[92]||(n[92]=[s("可以阻塞其他线程。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[93]||(n[93]=[s("锁膨胀")])),_:1}),a("ul",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[94]||(n[94]=[s("偏向锁->轻量级锁->重量级锁。")])),_:1})])])]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[95]||(n[95]=[s("锁优化")])),_:1}),a("ul",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[96]||(n[96]=[s("自旋锁、锁消除、锁粗化。")])),_:1})])])])]),a("h4",w,[n[98]||(n[98]=a("a",{class:"header-anchor",href:"#原理","aria-hidden":"true"},"#",-1)),n[99]||(n[99]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[97]||(n[97]=[s("原理")])),_:1})]),a("h5",x,[n[101]||(n[101]=a("a",{class:"header-anchor",href:"#对象头","aria-hidden":"true"},"#",-1)),n[102]||(n[102]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[100]||(n[100]=[s("对象头")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[103]||(n[103]=[s("对象的基本结构： ")])),_:1}),n[434]||(n[434]=s("![](https://cdn.nlark.com/yuque/0/2022/png/22839467/1654763479270-11f6c320-b8a0-4ba8-a6e9-4a25cc2fcb72.png)")),p(t,{style:{color:"rgb(36, 41, 46)"}}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[104]||(n[104]=[s("MarkWord：下面给出Markword的5种情况。 ")])),_:1}),n[435]||(n[435]=s("![](https://cdn.nlark.com/yuque/0/2022/png/22839467/1654763479273-6588c6c1-dff2-42a0-a40a-b45f39387431.png) ")),a("h5",S,[n[106]||(n[106]=a("a",{class:"header-anchor",href:"#重量级锁","aria-hidden":"true"},"#",-1)),n[107]||(n[107]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[105]||(n[105]=[s("重量级锁")])),_:1})]),n[436]||(n[436]=a("figure",null,[a("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1654763479285-c6593025-f861-41ec-9e8b-cd6e0bdb11c0.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1)),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[108]||(n[108]=[s("从上面MarkWord重量级锁的情况可以看出，末两位锁标志是10，同时存储Monitor对象引用。")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[109]||(n[109]=[s("Monitor：")])),_:1}),a("ul",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[110]||(n[110]=[s("owner：指向当前持有锁的线程。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[111]||(n[111]=[s("EntryList：当有其他线程竞争锁没有获取到进入该队列，状态为Blocked。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[112]||(n[112]=[s("WaitSet：当持有锁的线程调用wait方法，进入该队列，如果被唤醒会进入EntryList竞争锁。 ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[113]||(n[113]=[s("如果每次加锁都需要关联这样一个Monitor对象，正如它的名字一样，太“重”了，并且如果没有线程竞争锁，entrylist和waitSet就是空的，没有必要用这样一个monitor对象，因此出现了轻量级锁。")])),_:1})])]),a("h5",T,[n[115]||(n[115]=a("a",{class:"header-anchor",href:"#轻量级锁","aria-hidden":"true"},"#",-1)),n[116]||(n[116]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[114]||(n[114]=[s("轻量级锁")])),_:1})]),a("p",null,[n[118]||(n[118]=a("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1654763479103-18035bbf-af28-408e-bee4-b0f6f24e808a.png",alt:"",loading:"lazy"},null,-1)),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[117]||(n[117]=[s("每次加锁和释放都需要MarkWord和锁记录进行一次cas交换，如果是单线程，加锁和释放也需要交换，因此出现了偏向锁。")])),_:1})]),a("h5",C,[n[120]||(n[120]=a("a",{class:"header-anchor",href:"#偏向锁","aria-hidden":"true"},"#",-1)),n[121]||(n[121]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[119]||(n[119]=[s("偏向锁")])),_:1})]),a("p",null,[n[123]||(n[123]=a("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1654763479133-479cd7eb-8c9c-43e3-be8f-023a16db5094.png",alt:"",loading:"lazy"},null,-1)),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[122]||(n[122]=[s("如果单线程访问，只需要进行一次cas，发现对象头的线程id是我当前的线程，那么释放锁和加锁不需要向轻量级锁那样进行cas；如果多线程访问会发生锁膨胀。")])),_:1})]),a("h5",j,[n[125]||(n[125]=a("a",{class:"header-anchor",href:"#锁膨胀流程","aria-hidden":"true"},"#",-1)),n[126]||(n[126]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[124]||(n[124]=[s("锁膨胀流程")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[127]||(n[127]=[s("synchronized加锁首先加偏向锁，如果只是")])),_:1}),n[437]||(n[437]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[128]||(n[128]=[s("单线程")])),_:1}),n[438]||(n[438]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[129]||(n[129]=[s("访问，偏向锁只需要一次cas。 ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[130]||(n[130]=[s("如果有")])),_:1}),n[439]||(n[439]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[131]||(n[131]=[s("多线程")])),_:1}),n[440]||(n[440]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[132]||(n[132]=[s("尝试获取锁，会膨胀成轻量级锁，每次加锁和释放都需要进行cas。 ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[133]||(n[133]=[s("当")])),_:1}),n[441]||(n[441]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[134]||(n[134]=[s("多线程同时竞争")])),_:1}),n[442]||(n[442]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[135]||(n[135]=[s("锁，会膨胀成重量级锁，竞争的线程会被加入entrylist。")])),_:1}),a("h4",E,[n[137]||(n[137]=a("a",{class:"header-anchor",href:"#优化","aria-hidden":"true"},"#",-1)),n[138]||(n[138]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[136]||(n[136]=[s("优化")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[139]||(n[139]=[s("JDK1.6做了很多关于synchronized的优化。")])),_:1}),a("h5",q,[n[141]||(n[141]=a("a",{class:"header-anchor",href:"#自旋锁","aria-hidden":"true"},"#",-1)),n[142]||(n[142]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[140]||(n[140]=[s("自旋锁")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[143]||(n[143]=[s("如果线程竞争锁失败会被加入EntryList，但是线程进行阻塞唤醒是耗费资源的，消耗CPU上下文切换。自旋锁优化就是在")])),_:1}),n[443]||(n[443]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[144]||(n[144]=[s("竞争锁失败")])),_:1}),n[444]||(n[444]=s("**")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[145]||(n[145]=[s("时自旋重试几次，很有可能在重试过程中就获取到锁了，获取到锁就不必阻塞了。JDK1.6默认开启的，重试次数默认是10。缺点是自旋会占用CPU。")])),_:1}),a("h5",D,[n[147]||(n[147]=a("a",{class:"header-anchor",href:"#自适应自旋锁","aria-hidden":"true"},"#",-1)),n[148]||(n[148]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[146]||(n[146]=[s("自适应自旋锁")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[149]||(n[149]=[s("顾名思义，就是会按照之前自旋次数进行自适应的改变。")])),_:1}),a("h5",A,[n[151]||(n[151]=a("a",{class:"header-anchor",href:"#锁消除","aria-hidden":"true"},"#",-1)),n[152]||(n[152]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[150]||(n[150]=[s("锁消除")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[153]||(n[153]=[s("在一些没有操作共享资源的代码上加锁是没有必要的，jvm会自动进行锁消除。正常情况下我们是不会写出这样的代码的，有些特殊情况，比如StringBuffer内部是使用synchronized同步的，如果StringBuffer是局部变量，是不会被多线程访问的，当执行一些append方法，内部的synchronized锁会被jvm优化消除掉。")])),_:1}),a("h5",P,[n[155]||(n[155]=a("a",{class:"header-anchor",href:"#锁粗化","aria-hidden":"true"},"#",-1)),n[156]||(n[156]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[154]||(n[154]=[s("锁粗化")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[157]||(n[157]=[s("打个比方，循环100次，每次调用StringBuffer的append方法，会进行100次的加锁和释放操作。jvm会进行一个优化，把加锁和释放操作提到循环的外面，就不必做那么多次的加锁和释放了。")])),_:1}),a("h3",N,[n[159]||(n[159]=a("a",{class:"header-anchor",href:"#reentrantlock","aria-hidden":"true"},"#",-1)),n[160]||(n[160]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[158]||(n[158]=[s("ReentrantLock")])),_:1})]),n[445]||(n[445]=a("h4",{id:"reentrantlock-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#reentrantlock-1","aria-hidden":"true"},"#"),s(" ReentrantLock")],-1)),n[446]||(n[446]=a("p",null,"实现：",-1)),n[447]||(n[447]=a("ol",null,[a("li",null,"实现Lock接口。"),a("li",null,"是一个可重入的独占锁。"),a("li",null,"通过自定义队列同步器AQS来实现锁的获取和释放。"),a("li",null,"同一时刻只能一个线程获取锁，其他线程在同步队列中等待。")],-1)),n[448]||(n[448]=a("p",null,"特点：",-1)),a("ol",null,[n[169]||(n[169]=a("li",null,"可重入，一个线程对同一个资源执行多次加锁操作。",-1)),a("li",null,[n[162]||(n[162]=s("支持公平锁和非公平锁(默认)。非")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[161]||(n[161]=[s("获取锁的顺序不一定就是线程申请锁时的顺序。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[163]||(n[163]=[s("可响应中断锁。lock.lockInterruptibly();")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[164]||(n[164]=[s("可轮询锁请求。tryLock();返回true或false。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[165]||(n[165]=[s("定时锁等345避免线程死锁的方法。tryLock(long time, timeUnit)")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[166]||(n[166]=[s("支持条件变量。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[167]||(n[167]=[s("变量state代表重入锁的次数。如果释放多，抛IllegalMonitorStateException异常。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[168]||(n[168]=[s("只有state=0时，其他线程才允许获得锁。")])),_:1})])]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[170]||(n[170]=[s("实现：")])),_:1}),n[449]||(n[449]=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// i++</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h2",I,[n[172]||(n[172]=a("a",{class:"header-anchor",href:"#乐观锁","aria-hidden":"true"},"#",-1)),n[173]||(n[173]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[171]||(n[171]=[s("乐观锁")])),_:1})]),a("h3",F,[n[175]||(n[175]=a("a",{class:"header-anchor",href:"#cas","aria-hidden":"true"},"#",-1)),n[176]||(n[176]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[174]||(n[174]=[s("CAS")])),_:1})]),a("h4",L,[n[178]||(n[178]=a("a",{class:"header-anchor",href:"#定义","aria-hidden":"true"},"#",-1)),n[179]||(n[179]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[177]||(n[177]=[s("定义")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[180]||(n[180]=[s("CAS就是compare and swap，比较并交换，3个参数分别是V内存值,A旧值,B新值，只有当A等于V时，才把内存值更换为B。乐观锁的实现就可以采用CAS，如果CAS失败了，就循环重试，直到成功。")])),_:1}),a("h4",R,[n[182]||(n[182]=a("a",{class:"header-anchor",href:"#怎么用","aria-hidden":"true"},"#",-1)),n[183]||(n[183]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[181]||(n[181]=[s("怎么用？")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[184]||(n[184]=[s("一般使用volatile关键字修饰共享变量保证可见性，while(true)循环中用CAS更新该变量，如果更新成功跳出循环。例如atomic包中的原子类大多采用CAS方式实现数据操作的原子性。")])),_:1}),a("h4",U,[n[186]||(n[186]=a("a",{class:"header-anchor",href:"#问题","aria-hidden":"true"},"#",-1)),n[187]||(n[187]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[185]||(n[185]=[s("问题")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[188]||(n[188]=[s("ABA问题：变量从A变成B，再从B变成A，CAS会误判认为该变量没有发生过改变。可以加时间戳解决，例如atomic包下AtomicStampedReference。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[189]||(n[189]=[s("循环时间长开销大，CAS自旋消耗CPU资源。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[190]||(n[190]=[s("只能保证一个共享变量的原子操作。如果有多个需要加锁处理。")])),_:1})])]),a("h2",z,[n[192]||(n[192]=a("a",{class:"header-anchor",href:"#锁优化","aria-hidden":"true"},"#",-1)),n[193]||(n[193]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[191]||(n[191]=[s("锁优化")])),_:1})]),n[450]||(n[450]=o(`<ol><li>减少锁持有的时间。</li><li>减小锁粒度。ConcurrentHashMap的分段锁。</li><li>锁分离：读写锁。</li><li>锁粗化。</li><li>锁消除。</li></ol><h2 id="其他锁" tabindex="-1"><a class="header-anchor" href="#其他锁" aria-hidden="true">#</a> 其他锁</h2><h3 id="semaphore" tabindex="-1"><a class="header-anchor" href="#semaphore" aria-hidden="true">#</a> Semaphore</h3><p>定义：</p><ol><li>基于计数的信号量。</li><li>定义信号量对象时可以设定一个阈值。</li><li>线程竞争到许可信号后可以执行业务逻辑。</li><li>执行完以后释放许可信号。</li></ol><p>特点：</p><ol><li>和ReentrantLock类似。</li><li>设为1，可以用于互斥锁。</li></ol><p>用法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Semaphore</span> semp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    semp<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 申请许可</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 业务逻辑</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        semp<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放许可</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="atomicinteger" tabindex="-1"><a class="header-anchor" href="#atomicinteger" aria-hidden="true">#</a> AtomicInteger</h3><p>背景：</p><ol><li>多线程环境下++i，i++不具有线程安全。</li><li>可以加synchronized锁或者ReentrantLock，不过都是重量级锁。</li><li>因此一些原子操作类出现了。</li><li>比如AtomicInteger为Integer提供原子操作。</li></ol><p>使用：</p><ol><li>定义一个原子操作数。AtomicInteger safeCounter=new AtomicInteger(0);</li><li>自增：safeCounter.getAndIncrement();</li></ol><h3 id="readwritelock接口" tabindex="-1"><a class="header-anchor" href="#readwritelock接口" aria-hidden="true">#</a> ReadWriteLock接口</h3><p>定义：</p><ol><li>读锁不互斥。</li><li>读锁和写锁互斥。</li><li>读的地方使用读锁。</li><li>写的地方使用写锁。</li></ol><p>实现：</p><ol><li>ReentrantReadWriteLock</li></ol><p>使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock</span> rwLock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> readLock<span class="token operator">=</span>rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> wrietLock<span class="token operator">=</span>rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加读锁</span>
readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>readLock<span class="token punctuation">.</span><span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="countdownlatch" tabindex="-1"><a class="header-anchor" href="#countdownlatch" aria-hidden="true">#</a> CountDownLatch</h3><p>作用：</p><ol><li>主线程定义CountDownLatch。</li><li>子线程执行完毕后，latch.countDown();计数器减一。</li><li>主线程latch.await();主线程阻塞，当所有线程都执行完毕后。主线程继续执行。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountdownLatchExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> totalThread<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>totalThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService<span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>totalThread<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;run...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cyclicbarrier" tabindex="-1"><a class="header-anchor" href="#cyclicbarrier" aria-hidden="true">#</a> CyclicBarrier</h3><p>当多个线程同时到达一个条件时，一起向下执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> totalThread<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token class-name">CyclicBarrier</span> cycliBarrier<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span>totalThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService<span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>totalThread<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;before..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span><span class="token punctuation">{</span>
                    cycliBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span><span class="token operator">|</span> <span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;after...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)),a("h3",O,[n[195]||(n[195]=a("a",{class:"header-anchor",href:"#aqs","aria-hidden":"true"},"#",-1)),n[196]||(n[196]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[194]||(n[194]=[s("AQS")])),_:1})]),a("h4",B,[n[198]||(n[198]=a("a",{class:"header-anchor",href:"#定义-1","aria-hidden":"true"},"#",-1)),n[199]||(n[199]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[197]||(n[197]=[s("定义")])),_:1})]),a("ol",null,[n[202]||(n[202]=a("li",null,"多线程访问共享资源的框架。",-1)),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[200]||(n[200]=[s("用来实现锁或者同步器。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[201]||(n[201]=[s("例如ReentrantLock、CountDownLatch、CyclicBarrier、Semaphore、ReentrantReadWriteLock、FutureTask。")])),_:1})])]),a("h4",M,[n[204]||(n[204]=a("a",{class:"header-anchor",href:"#原理-1","aria-hidden":"true"},"#",-1)),n[205]||(n[205]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[203]||(n[203]=[s("原理")])),_:1})]),a("ol",null,[n[210]||(n[210]=a("li",null,"维护一个共享资源状态volatile int state。",-1)),n[211]||(n[211]=a("li",null,"和一个先进先出队列。",-1)),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[206]||(n[206]=[s("如果资源空闲，那么线程直接可以获取该资源。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[207]||(n[207]=[s("如果不是空闲，会把线程加入到CLH队列等待被唤醒。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[208]||(n[208]=[s("CLH是一个双向链表，节点代表线程。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[209]||(n[209]=[s("对state的写操作是基于CAS实现的。 ")])),_:1})])]),n[451]||(n[451]=a("p",null,"实现",-1)),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[212]||(n[212]=[s("资源共享方式又分为共享式和独占式。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[213]||(n[213]=[s("独占式的实现如：ReentrantLock。只能一个线程执行。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[214]||(n[214]=[s("共享式的实现如：Semaphore、CountDownLatch。可以多个线程同时执行。")])),_:1})])]),a("h4",J,[n[216]||(n[216]=a("a",{class:"header-anchor",href:"#实现同步器","aria-hidden":"true"},"#",-1)),n[217]||(n[217]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[215]||(n[215]=[s("实现同步器")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[218]||(n[218]=[s("模板方法模式，写一个类继承AQS，实现里面的方法。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[219]||(n[219]=[s("实现同步器传入AQS，里面调用方法，传入我们自己实现的类的对象，就可以执行我们自己重写的方法了。")])),_:1})])]),a("h1",V,[n[221]||(n[221]=a("a",{class:"header-anchor",href:"#·jmm","aria-hidden":"true"},"#",-1)),n[222]||(n[222]=s(" ·")),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[220]||(n[220]=[s("JMM")])),_:1})]),a("h2",W,[n[224]||(n[224]=a("a",{class:"header-anchor",href:"#计算机内存模型","aria-hidden":"true"},"#",-1)),n[225]||(n[225]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[223]||(n[223]=[s("计算机内存模型")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[226]||(n[226]=[s("Java内存模型相当于在计算机内存模型的基础上做了一些事情，那我先说一下计算机内存模型吧。")])),_:1}),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[227]||(n[227]=[s("计算机在执行程序的时候，每条指令都是在CPU中执行的，而执行的时候需要进行数据的读写，数据是存放在内存中的。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[228]||(n[228]=[s("CPU的执行速度是很快的。相比之下内存的读写速度就慢的多。这就会导致CPU每次操作都会因为内存而耗费很多时间。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[229]||(n[229]=[s("所以，解决办法就是在CPU和内存之间增加缓存，用缓存就是保存一份数据。缓存的特点就是速度快，内存小，并且贵。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[230]||(n[230]=[s("那么，在读数据时就可以从高速缓存中读，如果没有去主存拿，然后写入缓存。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[231]||(n[231]=[s("CPU缓存可以分为一级缓存（L1），二级缓存（L2）和三级缓存（L3）。一级缓存离CPU最近，成本也最高，容量最小，速度最快。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[232]||(n[232]=[s("单核CPU只含有一套L1，L2，L3缓存；如果CPU含有多个核心，即多核CPU，则每个核心都含有一套L1、L2、L3缓存，L3缓存是多核共享的。")])),_:1})])]),a("h3",H,[n[234]||(n[234]=a("a",{class:"header-anchor",href:"#缓存一致性问题","aria-hidden":"true"},"#",-1)),n[235]||(n[235]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[233]||(n[233]=[s("缓存一致性问题")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[236]||(n[236]=[s("单线程或者是单核多线程都不会产生缓存数据不一致问题，因为同一时刻只能有一个线程操作数据。")])),_:1})]),a("li",null,[a("strong",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[237]||(n[237]=[s("单线程")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[238]||(n[238]=[s("：cpu核心的缓存只被一个线程访问。缓存独占，不会出现访问冲突等问题。")])),_:1})]),a("li",null,[a("strong",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[239]||(n[239]=[s("单核CPU，多线程。")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[240]||(n[240]=[s("进程中的多个线程会同时访问进程中的共享数据，CPU将某块内存加载到缓存后，不同线程在访问相同的物理地址的时候，都会映射到相同的缓存位置，这样即使发生线程的切换，缓存仍然不会失效。但由于任何时刻只能有一个线程在执行，因此不会出现缓存访问冲突。")])),_:1})]),a("li",null,[a("strong",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[241]||(n[241]=[s("多核CPU，多线程。")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[242]||(n[242]=[s("每个核都会有自己对应的缓存。多个线程执行可能在不同的cpu上运行，也就会访问不同核心上的缓存，不同核心的cache可能会产生数据不一致的情况。由于多核cpu是可以并行执行的，可能会出现多个线程同时写各自的缓存的情况，而各自的cache之间的数据就有可能不同。")])),_:1})])]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[243]||(n[243]=[s("在CPU和主存之间增加缓存，在多线程场景下就可能存在")])),_:1}),n[452]||(n[452]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[244]||(n[244]=[s("缓存一致性问题")])),_:1}),n[453]||(n[453]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[245]||(n[245]=[s("，也就是说，在多核CPU中，每个核的自己的缓存中，关于同一个数据的缓存内容可能不一致。")])),_:1}),a("h3",K,[n[247]||(n[247]=a("a",{class:"header-anchor",href:"#指令重排","aria-hidden":"true"},"#",-1)),n[248]||(n[248]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[246]||(n[246]=[s("指令重排")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[249]||(n[249]=[s("还有一个问题，我们的处理器可能会进行一些优化，对输入代码进行修改执行顺序，从而提高运算效率。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[250]||(n[250]=[s("类似的比如java中，JVM的即时编译器（JIT）也会做")])),_:1}),n[253]||(n[253]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[251]||(n[251]=[s("指令重排")])),_:1}),n[254]||(n[254]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[252]||(n[252]=[s("。指令重排的话，可能会导致并发问题。")])),_:1})])]),n[454]||(n[454]=a("h2",{id:"java内存模型",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java内存模型","aria-hidden":"true"},"#"),s(" java内存模型")],-1)),a("h3",G,[n[256]||(n[256]=a("a",{class:"header-anchor",href:"#并发编程的问题","aria-hidden":"true"},"#",-1)),n[257]||(n[257]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[255]||(n[255]=[s("并发编程的问题")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[258]||(n[258]=[s("并发编程的问题：原子性问题，可见性问题和有序性问题。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[259]||(n[259]=[s("导致这些问题的底层原因就是缓存一致性问题、处理器优化问题和指令重排问题等。")])),_:1})]),a("li",null,[a("strong",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[260]||(n[260]=[s("原子性")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[261]||(n[261]=[s("是指一个操作要么不执行，要么就全部执行完成。")])),_:1})]),a("li",null,[a("strong",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[262]||(n[262]=[s("可见性")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[263]||(n[263]=[s("是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。就是缓存一致性问题。")])),_:1})]),a("li",null,[a("strong",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[264]||(n[264]=[s("有序性")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[265]||(n[265]=[s("即程序执行的顺序按照代码的先后顺序执行。就是指令重排问题。")])),_:1})])]),a("h3",Q,[n[267]||(n[267]=a("a",{class:"header-anchor",href:"#什么是内存模型","aria-hidden":"true"},"#",-1)),n[268]||(n[268]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[266]||(n[266]=[s("什么是内存模型")])),_:1})]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[269]||(n[269]=[s("前面提到的，缓存一致性问题、处理器器优化的指令重排问题是硬件的不断升级导致的。")])),_:1}),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[270]||(n[270]=[s("内存模型就是保证并发编程问题：原子性、可见性、有序性。对应处理器优化问题、缓存一致性问题和指令重排问题。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[271]||(n[271]=[s("内存模型是一种规范。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[272]||(n[272]=[s("规范对内存的读写操作，使指令正确执行，保证并发场景下的原子性一致性有序性。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[273]||(n[273]=[s("内存模型解决并发问题主要采用两种方式：")])),_:1}),n[278]||(n[278]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[274]||(n[274]=[s("限制处理器优化")])),_:1}),n[279]||(n[279]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[275]||(n[275]=[s("和")])),_:1}),n[280]||(n[280]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[276]||(n[276]=[s("使用内存屏障")])),_:1}),n[281]||(n[281]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[277]||(n[277]=[s("。")])),_:1})])]),a("h3",Y,[n[283]||(n[283]=a("a",{class:"header-anchor",href:"#什么是java内存模型","aria-hidden":"true"},"#",-1)),n[284]||(n[284]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[282]||(n[282]=[s("什么是Java内存模型")])),_:1})]),n[455]||(n[455]=a("p",null,"定义：",-1)),n[456]||(n[456]=a("ol",null,[a("li",null,"Java内存模型是属于内存模型的一个实现，不同语言实现可能不同。"),a("li",null,"内存模型就是保证并发编程问题：原子性、可见性、有序性。"),a("li",null,"Java内存模型就是一种规范。")],-1)),n[457]||(n[457]=a("p",null,"实现：",-1)),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[285]||(n[285]=[s("Java内存模型规定的内容就是所有的变量都存储在主内存中，主内存可以类比于主存。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[286]||(n[286]=[s("每个线程有自己的工作内存，存储线程运行中是用到的变量的副本，类比于cpu和内存之间的缓存。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[287]||(n[287]=[s("线程对变量的所有操作都在工作内存中进行，而不能直接操作主内存。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[288]||(n[288]=[s("线程之间不能直接访问对方工作内存中的数据。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[289]||(n[289]=[s("工作内存和主存之间可以进行数据传递，依赖主内存作为媒介，实现不同工作线程的数据传递。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[290]||(n[290]=[s("比如写数据，需要把新值同步回主内存，在读数据，先从主内存刷新变量值。")])),_:1})])]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[291]||(n[291]=[s("注意：")])),_:1}),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[292]||(n[292]=[s("主内存和工作内存与JVM内存结构中的Java堆、栈、方法区等并不是同一个层次的内存划分，无法直接类比。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[293]||(n[293]=[s("如果一定要勉强对应起来的话，从变量、主内存、工作内存的定义来看，主内存主要对应于Java堆中的对象实例数据部分。工作内存则对应于虚拟机栈中的部分区域。")])),_:1})])]),a("h2",X,[n[295]||(n[295]=a("a",{class:"header-anchor",href:"#java内存模型的实现","aria-hidden":"true"},"#",-1)),n[296]||(n[296]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[294]||(n[294]=[s("Java内存模型的实现")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[297]||(n[297]=[s("比如")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[298]||(n[298]=[s("volatile")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[299]||(n[299]=[s("、")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[300]||(n[300]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[301]||(n[301]=[s("、")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[302]||(n[302]=[s("final")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[303]||(n[303]=[s("、")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[304]||(n[304]=[s("concurren")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[305]||(n[305]=[s("包等。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[306]||(n[306]=[s("这些就是Java内存模型封装了底层的实现后提供的一些关键字。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[307]||(n[307]=[s("我们可以直接使用这些关键字来控制并发。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[308]||(n[308]=[s("需要关心底层的编译器优化、缓存一致性等问题。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[309]||(n[309]=[s("所以，")])),_:1}),n[311]||(n[311]=s("**")),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[310]||(n[310]=[s("Java内存模型，除了定义了一套规范，还提供了一系列原语，封装了底层实现后，供开发者直接使用。")])),_:1}),n[312]||(n[312]=s("**"))])]),a("h3",Z,[n[314]||(n[314]=a("a",{class:"header-anchor",href:"#原子性","aria-hidden":"true"},"#",-1)),n[315]||(n[315]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[313]||(n[313]=[s("原子性")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[316]||(n[316]=[s("在Java中可以使用")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[317]||(n[317]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[318]||(n[318]=[s("来保证方法和代码块内的操作是原子性的。")])),_:1})])]),a("h3",$,[n[320]||(n[320]=a("a",{class:"header-anchor",href:"#可见性","aria-hidden":"true"},"#",-1)),n[321]||(n[321]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[319]||(n[319]=[s("可见性")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[322]||(n[322]=[s("volatile")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[323]||(n[323]=[s("修饰的变量在被修改后可以立即同步到主内存。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[324]||(n[324]=[s("每次读取都从主内存刷新。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[325]||(n[325]=[s("因此，可以使用")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[326]||(n[326]=[s("volatile")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[327]||(n[327]=[s("来保证多线程操作时变量的可见性。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[328]||(n[328]=[s("除了")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[329]||(n[329]=[s("volatile")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[330]||(n[330]=[s("，")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[331]||(n[331]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[332]||(n[332]=[s("和")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[333]||(n[333]=[s("final")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[334]||(n[334]=[s("两个关键字也可以实现可见性。")])),_:1})])]),a("h3",h,[n[336]||(n[336]=a("a",{class:"header-anchor",href:"#有序性","aria-hidden":"true"},"#",-1)),n[337]||(n[337]=s()),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[335]||(n[335]=[s("有序性")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[338]||(n[338]=[s("在Java中，可以使用")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[339]||(n[339]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[340]||(n[340]=[s("和")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[341]||(n[341]=[s("volatile")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[342]||(n[342]=[s("来保证多线程之间操作的有序性。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[343]||(n[343]=[s("实现方式有所区别：")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[344]||(n[344]=[s("volatile")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[345]||(n[345]=[s("关键字会禁止指令重排。")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[346]||(n[346]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[347]||(n[347]=[s("关键字保证同一时刻只允许一条线程操作。")])),_:1})])]),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[348]||(n[348]=[s("注意：")])),_:1}),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[349]||(n[349]=[s("好像")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[350]||(n[350]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[351]||(n[351]=[s("关键字是万能的，他可以同时满足以上三种特性，这其实也是很多人滥用")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[352]||(n[352]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[353]||(n[353]=[s("的原因。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[354]||(n[354]=[s("但是")])),_:1}),p(t,{style:{color:"rgb(199, 37, 78)","background-color":"rgb(249, 242, 244)"}},{default:l(()=>n[355]||(n[355]=[s("synchronized")])),_:1}),p(t,{style:{color:"rgb(85, 85, 85)"}},{default:l(()=>n[356]||(n[356]=[s("是比较影响性能的，虽然编译器提供了很多锁优化技术，但是也不建议过度使用。")])),_:1})])]),n[458]||(n[458]=o('<h2 id="可见性-原子性-有序性" tabindex="-1"><a class="header-anchor" href="#可见性-原子性-有序性" aria-hidden="true">#</a> 可见性，原子性，有序性</h2><h3 id="synchronized-1" tabindex="-1"><a class="header-anchor" href="#synchronized-1" aria-hidden="true">#</a> synchronized</h3><p>synchroized是有可见性、有序性和原子性的。</p><h4 id="synchronized与可见性" tabindex="-1"><a class="header-anchor" href="#synchronized与可见性" aria-hidden="true">#</a> synchronized与可见性</h4><p>可见性：</p><ol><li>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li><li>Java内存模型规定变量都存储在主内存中，每条线程有自己的工作内存，</li><li>线程的工作内存中保存了该线程中是用到的变量的主内存副本拷贝，</li><li>线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。</li><li>不同的线程之间无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行。</li><li>所以，就可能出现线程1改了某个变量的值，但是线程2不可见的情况。</li></ol><p>synchronized的可见性：</p><ol start="7"><li>前面我们介绍过，被synchronized修饰的代码，在开始执行时会加锁，执行完成后会进行解锁。</li><li>而为了保证可见性，在对变量解锁之前，必须先把此变量同步回主存中。这样解锁后，后续线程就可以访问到被修改后的值。</li><li>所以，synchronized关键字锁住的对象，其值是具有可见性的。</li></ol><h4 id="synchronized与有序性" tabindex="-1"><a class="header-anchor" href="#synchronized与有序性" aria-hidden="true">#</a> synchronized与有序性</h4><ol><li>有序性即程序执行的顺序按照代码的先后顺序执行。</li><li>由于synchronized修饰的代码，同一时间只能被同一线程访问。那么也就是单线程执行的。所以，可以保证其有序性。</li></ol><h4 id="synchronized具有原子性" tabindex="-1"><a class="header-anchor" href="#synchronized具有原子性" aria-hidden="true">#</a> synchronized具有原子性</h4><ol><li>原子性就是要么全部执行，要么全部不执行。</li><li>被synchronized锁定的部分是在执行期间获取到锁了，也就是不会被打扰。</li></ol><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h3><p>volatile关键字可以保证可见性，有序性。但是不能保证原子性，</p>',14)),a("h4",_,[n[358]||(n[358]=a("a",{class:"header-anchor",href:"#可见性-1","aria-hidden":"true"},"#",-1)),n[359]||(n[359]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[357]||(n[357]=[s("可见性")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[360]||(n[360]=[s("volatile修饰的变量，在修改后会立即刷新到内存，其他CPU核心的缓存对应的数据状态设置为无效，这样其他线程获取数据时从内存中获取。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[361]||(n[361]=[s("如果volatile修饰数组会怎么样？ ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[362]||(n[362]=[s("如果volatile修饰数组，那么引用会受到volatile保护，也就是说如果线程A把数组的引用修改了，指向了其他数组，那么线程B会发觉到改变，但是如果修改数组内的元素，不会受到volatile的保护。")])),_:1})])]),a("h4",nn,[n[364]||(n[364]=a("a",{class:"header-anchor",href:"#有序性-1","aria-hidden":"true"},"#",-1)),n[365]||(n[365]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[363]||(n[363]=[s("有序性")])),_:1})]),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[366]||(n[366]=[s("volatile会禁止指令重排序，分为读屏障和写屏障。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[367]||(n[367]=[s("读屏障会防止读下面的程序跨过这条指令到上面去，写屏障会阻止上面的指令跨过它到下面去。 ")])),_:1}),n[368]||(n[368]=s("![](https://cdn.nlark.com/yuque/0/2022/png/22839467/1654763480170-32ebf0f4-ec0f-4dc7-84c2-7ec3070a8ca1.png) "))])]),a("h4",sn,[n[370]||(n[370]=a("a",{class:"header-anchor",href:"#实践-双检锁单例","aria-hidden":"true"},"#",-1)),n[371]||(n[371]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[369]||(n[369]=[s("实践（双检锁单例）")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[372]||(n[372]=[s("在懒汉式双检锁单例模式中，单例变量需要用volatile关键字修饰。")])),_:1}),n[459]||(n[459]=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[373]||(n[373]=[s("INSTANCE=new Singleton();这一条代码其实是3条指令，分别是：")])),_:1}),a("ol",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[374]||(n[374]=[s("分配一块内存空间。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[375]||(n[375]=[s("执行构造函数。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[376]||(n[376]=[s("给INSTANCE引用赋值。")])),_:1})])]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[377]||(n[377]=[s("如果INSTANCE没有用volatile变量修饰，那么这3条指令的执行顺序可能就变成了132，那么在3操作执行完成后，INSTANCE已经有引用了，只不过指向的对象还没有被初始化。这时另外一个线程调用该方法发现INSTANCE不等于null，就直接返回了。")])),_:1}),a("h3",an,[n[379]||(n[379]=a("a",{class:"header-anchor",href:"#比较","aria-hidden":"true"},"#",-1)),n[380]||(n[380]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[378]||(n[378]=[s("比较")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[381]||(n[381]=[s("volatile和synchronized比较？ ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[382]||(n[382]=[s("1. volatile只能修饰变量。synchronized可以修饰类、方法、代码块。 ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[383]||(n[383]=[s("2. volatile是保证可见性和有序性，但不能保证原子性。synchronized可以保证原子性。 ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[384]||(n[384]=[s("3. volatile是一种轻量级的线程同步。 ")])),_:1}),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[385]||(n[385]=[s("4. volatile不会造成线程阻塞，而synchronized可以。")])),_:1}),a("h2",tn,[n[387]||(n[387]=a("a",{class:"header-anchor",href:"#final","aria-hidden":"true"},"#",-1)),n[388]||(n[388]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[386]||(n[386]=[s("final")])),_:1})]),a("h3",pn,[n[390]||(n[390]=a("a",{class:"header-anchor",href:"#定义-2","aria-hidden":"true"},"#",-1)),n[391]||(n[391]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[389]||(n[389]=[s("定义")])),_:1})]),a("ul",null,[a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[392]||(n[392]=[s("final修饰基本类型，值不能变。修饰引用类型，引用不能变，但引用指向的对象可以边。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[393]||(n[393]=[s("final修饰方法，方法不能被重写。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[394]||(n[394]=[s("final修饰类，类不能被继承。")])),_:1})])]),a("h3",ln,[n[396]||(n[396]=a("a",{class:"header-anchor",href:"#不可变类","aria-hidden":"true"},"#",-1)),n[397]||(n[397]=s()),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[395]||(n[395]=[s("不可变类")])),_:1})]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:l(()=>n[398]||(n[398]=[s("不可变类的对象一旦创建，就不能被改变了。String就是一个不可变类，内部的数组使用final修饰，并且没有提供改变数组元素的方法，可以保证线程安全。")])),_:1})])}const rn=e(r,[["render",on],["__file","juc.html.vue"]]);export{rn as default};
