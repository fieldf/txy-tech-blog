const e=JSON.parse('{"key":"v-b4702396","path":"/notes/xxx/day09~day10.html","title":"Day09 ~ Day10","lang":"zh-CN","frontmatter":{"title":"Day09 ~ Day10","index":false,"icon":"laptop-code","category":["开发笔记","学习记录"],"description":"任务 [x] 在应用层编排抽奖过程 总结 有了前面的模板模式的基础，这一章节相对来说比较容易，自己实现的时候也没有什么大问题，大体流程就是写接口，编排流程，然后写实现类，然后写 Mapper，至于为什么花了两三天，这就不得不说上一章的分库分表了，没写过 SpringBoot Starter，没写过 MyBatis 插件，对 AOP 没有深刻的理解，纯硬啃下来的，但是记不太劳，所以晚上睡不着觉，总感觉缺点什么东西，就花了两天干了如下几件事： 新建一个空的 SpringBoot 项目，从 SpringApplication.run() 方法开始 debug，一步一步看，在这一个过程中主要学到了如下几点： 一个 SpringBoot 项目是如何初始化的，在哪里创建的容器等等 如何加载第三方 Starter 的 在哪里打印的Banner 以及如何设置 这个不是重点，哈哈哈，但是挺好玩的 还有 ApplicationRunner 和 CommandLineRunner 还有异常报告器 exceptionReporters 还有几个关于上下文环境的重要方法 prepareContext() 、refreshContext()、afterRefresh() 明白了 SpringBoot 应用初始化流程就知道所写的分录分表路由 starter 是在哪个阶段进行数据源设置以及为什么要在 AutoConfig 类下进行 Bean 的注入了 看了看 MyBatis 插件相关的文档，大致了解了一个 MyBatis 插件如何编写，看了这个以后看 MyBatis-Plus 源码的时候可能会轻松一点 复习了一下 AOP，注解的属性有哪些以及该怎么写都有点忘了 在这个 debug 的过程中其实画了一些图，但是因为没有 OSS，所以图片不太好展示，所以使用 vuepress + github pages + github actions 搭建了一个博客，后面有空了会把看源码的过程发上去","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/notes/xxx/day09~day10.html"}],["meta",{"property":"og:site_name","content":"txy"}],["meta",{"property":"og:title","content":"Day09 ~ Day10"}],["meta",{"property":"og:description","content":"任务 [x] 在应用层编排抽奖过程 总结 有了前面的模板模式的基础，这一章节相对来说比较容易，自己实现的时候也没有什么大问题，大体流程就是写接口，编排流程，然后写实现类，然后写 Mapper，至于为什么花了两三天，这就不得不说上一章的分库分表了，没写过 SpringBoot Starter，没写过 MyBatis 插件，对 AOP 没有深刻的理解，纯硬啃下来的，但是记不太劳，所以晚上睡不着觉，总感觉缺点什么东西，就花了两天干了如下几件事： 新建一个空的 SpringBoot 项目，从 SpringApplication.run() 方法开始 debug，一步一步看，在这一个过程中主要学到了如下几点： 一个 SpringBoot 项目是如何初始化的，在哪里创建的容器等等 如何加载第三方 Starter 的 在哪里打印的Banner 以及如何设置 这个不是重点，哈哈哈，但是挺好玩的 还有 ApplicationRunner 和 CommandLineRunner 还有异常报告器 exceptionReporters 还有几个关于上下文环境的重要方法 prepareContext() 、refreshContext()、afterRefresh() 明白了 SpringBoot 应用初始化流程就知道所写的分录分表路由 starter 是在哪个阶段进行数据源设置以及为什么要在 AutoConfig 类下进行 Bean 的注入了 看了看 MyBatis 插件相关的文档，大致了解了一个 MyBatis 插件如何编写，看了这个以后看 MyBatis-Plus 源码的时候可能会轻松一点 复习了一下 AOP，注解的属性有哪些以及该怎么写都有点忘了 在这个 debug 的过程中其实画了一些图，但是因为没有 OSS，所以图片不太好展示，所以使用 vuepress + github pages + github actions 搭建了一个博客，后面有空了会把看源码的过程发上去"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-04T13:04:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-04T13:04:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day09 ~ Day10\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-04T13:04:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"任务","slug":"任务","link":"#任务","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1738674271000,"updatedTime":1738674271000,"contributors":[{"name":"txy","email":"2434877135@qq.com","commits":1}]},"readingTime":{"minutes":2.48,"words":744},"filePathRelative":"notes/xxx/day09~day10.md","localizedDate":"2025年2月4日","excerpt":"<h3> 任务</h3>\\n<ul>\\n<li>[x] 在应用层编排抽奖过程</li>\\n</ul>\\n<h3> 总结</h3>\\n<p>有了前面的模板模式的基础，这一章节相对来说比较容易，自己实现的时候也没有什么大问题，大体流程就是写接口，编排流程，然后写实现类，然后写 Mapper，至于为什么花了两三天，这就不得不说上一章的分库分表了，没写过 SpringBoot Starter，没写过 MyBatis 插件，对 AOP 没有深刻的理解，纯硬啃下来的，但是记不太劳，所以晚上睡不着觉，总感觉缺点什么东西，就花了两天干了如下几件事：</p>\\n<ol>\\n<li>\\n<p>新建一个空的 SpringBoot 项目，从 <code>SpringApplication.run()</code> 方法开始 debug，一步一步看，在这一个过程中主要学到了如下几点：</p>\\n<ul>\\n<li>一个 SpringBoot 项目是如何初始化的，在哪里创建的容器等等</li>\\n<li>如何加载第三方 Starter 的</li>\\n<li><s>在哪里打印的Banner 以及如何设置</s> 这个不是重点，哈哈哈，但是挺好玩的</li>\\n<li>还有 <code>ApplicationRunner</code> 和 <code>CommandLineRunner</code></li>\\n<li>还有异常报告器 <code>exceptionReporters</code></li>\\n<li>还有几个关于上下文环境的重要方法 <code>prepareContext()</code> 、<code>refreshContext()</code>、<code>afterRefresh()</code></li>\\n</ul>\\n<p>明白了 SpringBoot 应用初始化流程就知道所写的分录分表路由 starter 是在哪个阶段进行数据源设置以及为什么要在 <code>AutoConfig</code> 类下进行 Bean 的注入了</p>\\n</li>\\n<li>\\n<p>看了看 MyBatis 插件相关的文档，大致了解了一个 MyBatis 插件如何编写，看了这个以后看 MyBatis-Plus 源码的时候可能会轻松一点</p>\\n</li>\\n<li>\\n<p>复习了一下 AOP，注解的属性有哪些以及该怎么写都有点忘了</p>\\n</li>\\n<li>\\n<p>在这个 debug 的过程中其实画了一些图，但是因为没有 OSS，所以图片不太好展示，所以使用 vuepress + github pages + github actions 搭建了一个博客，后面有空了会把看源码的过程发上去</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
