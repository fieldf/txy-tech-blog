import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as e,c as s,b as i,d as r,e as t,w as d,f as n}from"./app-9393c1ef.js";const u={},f={start:"3"},b={start:"10"},g={id:"粘包、拆包发生原因",tabindex:"-1"},y={id:"滑动窗口",tabindex:"-1"},E={id:"mss和mtu分片",tabindex:"-1"},T={id:"nagle算法",tabindex:"-1"};function P(m,l){const o=a("font");return e(),s("div",null,[l[218]||(l[218]=i("h1",{id:"·七层模型",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#·七层模型","aria-hidden":"true"},"#"),r(" ·七层模型")],-1)),i("p",null,[l[1]||(l[1]=r("是ISO国家标准化组织制定的用于计算机通信系统间互联的")),t(o,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[0]||(l[0]=[r("标准")])),_:1}),l[2]||(l[2]=r("体系。OSI七层模型包含一些抽象的概念和术语，也包括一些具体的协议。"))]),l[219]||(l[219]=i("p",null,"应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。",-1)),l[220]||(l[220]=i("h2",{id:"应用层",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#应用层","aria-hidden":"true"},"#"),r(" 应用层")],-1)),i("ol",null,[l[10]||(l[10]=i("li",null,"应用层是构建的具体应用。",-1)),l[11]||(l[11]=i("li",null,"我们应用软件都是在应用层实现的，是和用户的接口。",-1)),l[12]||(l[12]=i("li",null,"应用层把数据传递给下一层TCP层。",-1)),i("li",null,[l[9]||(l[9]=r("协议有HTTP,DNS,HTTPS,FTP文件上传下载,SMTP,POP3,TELNET,DHCP,TFTP。")),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[3]||(l[3]=[r("发送的数据")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[4]||(l[4]=[r("写入")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[5]||(l[5]=[r("socket内核中的发送缓冲区SO_SNDBUF，")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[6]||(l[6]=[r("操作系统把发送缓冲区中的数据")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[7]||(l[7]=[r("取出来")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[8]||(l[8]=[r("进行发送。")])),_:1})])]),i("p",null,[i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[13]||(l[13]=[r("浏览器输入url首先对url进行解析，看它发送的服务器，端口，请求啥从而生成请求的信息，http请求报文。接下来根据服务器域名查询对应的ip地址，需要dns协议，之后就可以通过操作系统中的协议栈发送http请求。")])),_:1})])]),i("ol",null,[i("li",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[14]||(l[14]=[r("客户端浏览器发起一个HTTP请求到ip地址，Http协议是")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[15]||(l[15]=[r("基于")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[16]||(l[16]=[r("TCP的，TCP连接会建立TCP三次握手")])),_:1})]),i("li",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[17]||(l[17]=[r("发送HTTP请求，请求由请求头，请求行和请求体组成。")])),_:1})])]),t(o,{style:{color:"#722ED1","background-color":"#FADB14"}},{default:d(()=>l[18]||(l[18]=[r("请求行")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[19]||(l[19]=[r("包含：请求方法，URL，协议版本。")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[20]||(l[20]=[r("请求方法")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[21]||(l[21]=[r("包含8种，GET，POST，PUT，DELETE，PATCH，HEAD，OPTIONS，TRACE ")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[22]||(l[22]=[r("URL")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[23]||(l[23]=[r("即请求地址，由协议://主机：端口/路径？参数组成")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[24]||(l[24]=[r("协议版本")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[25]||(l[25]=[r("即http版本号，POST /chapter17/user.html HTTP/1.1")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FADB14"}},{default:d(()=>l[26]||(l[26]=[r("请求头")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[27]||(l[27]=[r("：包含一些请求的附加信息，由键值对组成，关键字和值用：分隔。")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FADB14"}},{default:d(()=>l[28]||(l[28]=[r("请求体")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[29]||(l[29]=[r("：请求的参数")])),_:1}),i("ol",f,[i("li",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[30]||(l[30]=[r("对于应用层来说，将发送的数据")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[31]||(l[31]=[r("写入")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[32]||(l[32]=[r("socket内核中的发送缓冲区SO_SNDBUF，")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[33]||(l[33]=[r("操作系统会将SO_SNDBUF中的数据")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[34]||(l[34]=[r("取出来")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[35]||(l[35]=[r("进行发送。")])),_:1})])]),l[221]||(l[221]=i("h3",{id:"dns",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#dns","aria-hidden":"true"},"#"),r(" DNS")],-1)),i("p",null,[i("em",null,[t(o,{style:{color:"#EB2F96"}},{default:d(()=>l[36]||(l[36]=[r("域名是.分割的，越靠右层级越高，.根域DNS服务器，.com顶级域DNS服务器，下面server.com是权威DNS服务器。获取ip地址的流程首先浏览器看自身有没有这个域名的缓存，如果有，就直接返回，否则去hosts文件看，如果没有客户端会发出一个DNS请求，问域名对应的ip地址是啥，发送给本地dns服务器，也就是客户端TCP/IP设置中填写的DNS服务器，本地域名服务器收到以后，在缓存中找，如果能找到这个域名，那么返回它对应的ip，否则会问它的根域名服务器，根域名服务器会告诉他顶级域名服务器地址，然后本地dns服务器给顶级域名服务器发送请求，询问ip地址，顶级域名服务器再告诉它权威dns服务器的地址，然后本地服务器再去问权威dns服务器，一般来说，权威dns服务器就把ip地址给本地dns返回，然后本地dns再将ip地址返回给客户端，客户端和目标建立连接。")])),_:1})])]),l[222]||(l[222]=n('<h4 id="a记录-aaaa记录" tabindex="-1"><a class="header-anchor" href="#a记录-aaaa记录" aria-hidden="true">#</a> A记录/AAAA记录</h4><p>IPv4：</p><p>示例：ns1.exmaple.com. IN A 198.51.100.2</p><p>解释：【domain】 IN A 【IP地址】</p><p>IPv6：</p><p>示例：ns1.exmaple.com. IN AAAA 8fe0::8f61:ac8:30cd:a16e</p><p>解释：【domain】 IN AAAA 【IP地址】</p><p>※IN的意思是「Internet」，不是IN/OUT的「IN」。</p><p>干什么用呢？</p><p>我们在浏览器输入域名后，需要向DNS服务器请求，找到这个域名对应的服务器IP。上面示例就是这么一条记录。</p><p>虽然域名和IP都可以变更，但是相比来说域名变更更加简单和随意。所以当网站更换自己域名的时候，就需要修改这条记录。</p><h4 id="cname" tabindex="-1"><a class="header-anchor" href="#cname" aria-hidden="true">#</a> CNAME</h4><p>示例：sub.example.com. IN CNAME hoge.example.com.</p><p>解释：【別名】 IN CNAME 【原名】</p><p>干什么用呢？</p><p>给某一个domain起多个名字。</p><p>类似于，jd.com,jd360.com,jingdong.com虽然是不同名字的域名，但是可以指向同一个原名jd.com。可以让企业的对外展示更加灵活。</p><p>举例：</p><p>jd360.com IN CNAME jd.com</p><p>jingdong.com IN CNAME jd.com</p><p>jd.com IN A 123.123.123.123 （这条是A记录例子）</p><h4 id="mx记录" tabindex="-1"><a class="header-anchor" href="#mx记录" aria-hidden="true">#</a> MX记录</h4><p>MX记录（Mail Exchange）：邮件路由记录</p><p>在DNS上设定，用于将邮箱地址@符号后的域名指向邮件服务器。</p><p>示例：example.com. IN MX 10 mail.example.com.</p><p>解释：【domain】 IN MX 【优先度】 【邮件服务器】</p><p>干什么用呢？</p><p>当发信侧服务器给受信侧发邮件时，首先会要求DNS服务器解析受信侧邮箱地址中@后面部分的域名对应的MX记录（DNS的写法可以理解成example.com 的A记录下面，有一行上面示例的MX记录，当然邮箱服务器也有对应的A记录）。</p><p>这样，邮件就直接发到对应的MX记录的A记录里的IP了。</p><p>例子：给test@exmaple.com发邮件的话，</p><p>DNS会返回给发信侧198.51.100.3这个IP</p><p>exmaple.com. IN A 198.51.100.2</p><p>example.com. IN MX 10 mail.example.com.</p><p>mail.example.com. IN A 198.51.100.3</p><p>※如果是普通用户通过【exmaple.com】浏览主页，那么DNS继续返回 198.51.100.2 。这个其实也需要DNS判断请求服务器是邮件服务器还是普通的访问。</p><h4 id="ns记录" tabindex="-1"><a class="header-anchor" href="#ns记录" aria-hidden="true">#</a> #NS记录</h4><p>指定域名解析服务器。</p><p>示例：example.com. IN NS ns1.example.com.</p><p>解释：【domain】 IN NS 【DNS服务器】</p><p>干什么用呢？</p><p>指定该域名由哪个DNS服务器来进行解析。</p><h4 id="txt记录" tabindex="-1"><a class="header-anchor" href="#txt记录" aria-hidden="true">#</a> TXT记录</h4><p>示例：ns1.exmaple.com. IN TXT &quot;联系电话：XXXX&quot;</p><p>解释：【domain】 IN TXT 【任意字符串】</p><p>干什么用呢？</p><p>一般指某个主机名或域名的说明，或者联系方式，或者标注提醒等等。</p><h4 id="spf记录" tabindex="-1"><a class="header-anchor" href="#spf记录" aria-hidden="true">#</a> SPF记录</h4><p>SPF记录是TXT记录的一个运用。后面的备注需要按照指定的格式才能有效。</p><p>示例：exmaple.com. IN TXT &quot;v=spf1 ip4:198.51.100.1 ~all&quot;</p><p>解释：【domain】 IN TXT 【送信侧邮件服务器确认规则】</p><p>干什么用呢？</p><p>从发信侧服务器设定到DNS上的这条记录中，读取信息，判断发信侧是否合法。</p><p>如果不符合规则，那么按照约定的规则处理掉。</p><p>跟MX记录正好相反。</p><p>MX：我是收件服务器，你找我时，请参考我设定到DNS服务器上的MX记录。</p><p>SPF：我是发信服务器，你接受邮件时，请参考我设定到DNS服务器上SPF规则。如果不是我发的信，你可以删掉或者接收。</p><p>SPF记录规则</p><p>格式：</p><p>版本 空格 定义 空格 定义 （空格 定义的循环）</p><p>跟着例子看的话，比较好理解。</p><p>example.com. IN SPF &quot;v=spf1 ip4:192.0.2.1 -all&quot;</p><h2 id="表示层" tabindex="-1"><a class="header-anchor" href="#表示层" aria-hidden="true">#</a> 表示层</h2><ol><li>对数据进行加密、解密、压缩、解压缩。</li><li>把计算机能够识别的转换成人能够识别的内容。图片声音文字等。</li></ol><p>负责把数据转换成能兼容另一个系统能识别的格式，定义数据的表示、安全、压缩，格式有JPEG,ASCII,DECOIC,加密格式等</p><h2 id="会话层" tabindex="-1"><a class="header-anchor" href="#会话层" aria-hidden="true">#</a> 会话层</h2><p>负责建立、管理、终止会话。对应主机进程，指本地主机和远程主机进行会话。</p><ol><li>建立连接，管理会话。</li><li>登录验证、断点续传、数据粘包分包。</li></ol><h2 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层" aria-hidden="true">#</a> 传输层</h2><ol><li>定义数据传输的协议和端口号。</li><li>传输层负责端到端的通信，协议有TCP，UDP。</li><li>数据包一旦离开网卡就会进入传输层。</li><li>作用是数据的分段、传输和重组。</li></ol><h3 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h3>',70)),i("ol",null,[l[41]||(l[41]=i("li",null,"TCP传输效率低。",-1)),l[42]||(l[42]=i("li",null,"可靠性强。",-1)),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[37]||(l[37]=[r("会在")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[38]||(l[38]=[r("传输数据的前面")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[39]||(l[39]=[r("加上")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[40]||(l[40]=[r("TCP头，构成TCP报文。")])),_:1})]),l[43]||(l[43]=i("li",null,"用于传输可靠性强数据量小。比如支付宝转账。",-1)),l[44]||(l[44]=i("li",null,"大部分使用TCP，比如HTTP。",-1)),l[45]||(l[45]=i("li",null,"能进行流量控制、拥塞控制、超时重传等。",-1))]),i("p",null,[i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[46]||(l[46]=[r("传输数据之前，需要先3次握手建立tcp连接，")])),_:1}),l[48]||(l[48]=r("__")),t(o,{style:{color:"#EB2F96"}},{default:d(()=>l[47]||(l[47]=[r("开始客户端和服务端都处于closed状态，服务端主动监听某个端口，处于listen状态，然后客户端主动发起连接syn，之后处于syn-sent状态，服务端收到这个数据包以后，返回syn，并且ACK=1代表确认收到客户端的SYN报文，之后处于syn-rcvd状态。客户端收到这个报文之后，会发送确认报文，之后处于established状态。服务端收到这个确认报文以后，处于established状态。3次握手保证双方都有发送和接收的能力。可以通过netstat -napt命令查看tcp连接状态。")])),_:1})])]),i("p",null,[i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[49]||(l[49]=[r("如果http请求消息较长，超过了MSS，就会把http的请求数据拆解发送，每一块数据加上TCP头，")])),_:1})]),t(o,{style:{color:"#722ED1","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[50]||(l[50]=[r("构成TCP报文。")])),_:1}),i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[51]||(l[51]=[r("tcp头就是会加端口号，源端口就是浏览器监听的端口，")])),_:1})]),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[52]||(l[52]=[r("客户端由")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[53]||(l[53]=[r("系统随机")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[54]||(l[54]=[r("选择一个端口，")])),_:1}),i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[55]||(l[55]=[r("目的端口号就是web服务器监听的端口，")])),_:1})]),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[56]||(l[56]=[r("比如服务器使用80端口")])),_:1}),t(o,{style:{color:"#722ED1","background-color":"#FFE8E6"}},{default:d(()=>l[57]||(l[57]=[r("监听")])),_:1}),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[58]||(l[58]=[r("客户端请求。")])),_:1}),i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[59]||(l[59]=[r("之后交给ip模块，")])),_:1})]),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[60]||(l[60]=[r("传输到网络层。")])),_:1})]),l[223]||(l[223]=n('<h3 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h3><ol><li>不保证数据包可靠到达。</li><li>实时性好，传输效率高。</li><li>适合数据量大、实时性强的数据传输。</li><li>例如抖音等视频服务。</li><li>UDP也可以实现可靠传输，把TCP的特性在应用层实现就可以。</li></ol><h3 id="分段" tabindex="-1"><a class="header-anchor" href="#分段" aria-hidden="true">#</a> 分段</h3><p>应用层传输的数据可能很大，如果直接传输不好控制，因此当传输层的数据包大小超过MSS（TCP最大报文段长度），就把数据包分段，如果中途有一个分段丢失，就重新发送这一个分段，而不用重新发送整个数据包。</p><h2 id="网络层" tabindex="-1"><a class="header-anchor" href="#网络层" aria-hidden="true">#</a> 网络层</h2><ol><li>对数据包中的ip地址进行封装和解析。</li><li>负责网络包分片。</li><li>进行逻辑地址寻址，实现不同网络之间路径选择。</li><li>协议有：ICMP IGMP **IP ARP **RARP。</li><li>设备：路由器、交换机、防火墙。</li></ol><h3 id="ip协议" tabindex="-1"><a class="header-anchor" href="#ip协议" aria-hidden="true">#</a> ip协议</h3><p>最常用的就是IP协议，把传输层的报文作为数据部分，再加上IP头组成IP报文，如果IP报文大小超过MTU，就会再次分片。</p>',8)),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[61]||(l[61]=[r("数据到达网络层时，")])),_:1}),l[224]||(l[224]=r("_")),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[62]||(l[62]=[r("添加IP头，IP头包含源IP和目的IP，源IP就是客户端的ip地址，客户端的不同网卡对应不同的ip地址，目的ip就是web服务器的ip地址。")])),_:1}),l[225]||(l[225]=r("_")),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[63]||(l[63]=[r("客户端的网络层根据ip地址查找目的端。主要就是通过路由表确定如何到达服务器，期间可能经过多个路由器，由这些路由器来查找路由表决定通过哪个路径到达服务器。")])),_:1}),l[226]||(l[226]=n('<h4 id="寻址" tabindex="-1"><a class="header-anchor" href="#寻址" aria-hidden="true">#</a> 寻址</h4><p>ip地址就是给设备编号，包括网络号和主机号，网络号负责标识ip地址属于哪个子网，主机号标识同一个子网下不同的主机。ip地址需要配合子网掩码算出ip地址的网络号和主机号。按位与运算。</p><h4 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h4><p>两台设备并不是一条网线连起来的，期间可能经过多个路由器，由这些路由器来查找路由表去决定到达服务器走哪个路径。</p><h2 id="数据链路层" tabindex="-1"><a class="header-anchor" href="#数据链路层" aria-hidden="true">#</a> 数据链路层</h2><ol><li>对数据包的MAC地址进行封装和解析。</li><li>具体一点就是在数据包前面加上MAC头生成数据帧。</li><li>作用是进行硬件地址寻址。</li><li>功能具有差错校验等功能，能发现错误但不能纠正。</li><li>设备：网卡、网桥、交换机。</li></ol>',6)),i("p",null,[i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[64]||(l[64]=[r("接下来到数据链路层还需要加上")])),_:1})]),t(o,{style:{color:"#722ED1"}},{default:d(()=>l[65]||(l[65]=[r("Datalink Header和FCS。")])),_:1}),i("em",null,[t(o,{style:{color:"#722ED1"}},{default:d(()=>l[66]||(l[66]=[r("主要包含发送方和接收方的mac地址信息。在一般TCP/IP通信中，MAC头包含的协议类型一般只有IP协议和ARP协议。接收方的MAC地址是如何获取呢？首先我们知道包发送的接收方的ip地址，我们使用arp协议帮我们找到这一路上的路由器的mac地址，最终就可到达接收方。")])),_:1})])]),l[227]||(l[227]=n('<h2 id="物理层" tabindex="-1"><a class="header-anchor" href="#物理层" aria-hidden="true">#</a> 物理层</h2><ol><li>作用传输比特流。</li><li>把要传输的数据复制到网卡缓存区，加上报头和起始帧分界符，帧校验序列。</li><li>把0101码转化为电流强弱进行传输，到了以后把电流转化为0101码。</li><li>从网卡发送出去，经过网线到达接收方。</li></ol><p>接下来数据包经过交换机，交换机工作在mac层，也称为2层网络设备，电信号先到达交换机的接口，交换机将电信号转换为数字信号，然后进行FCS校验，如果没问题就放到缓冲区，交换机端口是没有mac地址这个概念的，接下来呢，交换机会查这个包的mac地址是否在我交换机的mac地址表中有，这个表记录的是mac地址和端口，如果存在，就找到对应的端口发出去，否则，就把数据发送到除了源端口的所有端口，那么其他设备接收到了，如果不是发给它的，他就直接丢掉这个包，广播地址：mac地址是FF:FF:FF:FF:FF:FF,ip地址是255.255.255.255。然后数据包经过交换机到达路由器。这一步的转发和交换机类似，也是通过查表判断包转发的目标，不过和交换机还是有区别的，因为路由器是基于ip涉及的，也就是属于三层网络设备，路由器的各个端口都具有mac地址和ip地址，而交换机是基于mac层，是属于二层网络设备，交换机的端口不具有mac地址的，路由器的端口是具有mac地址的，所以能够成为发送方和接收方，同时还具有ip地址，所以在某些层面来说路由器和电脑的网卡是一样的，当转发包的时候，路由器的端口会接收到数据包，接收到数据把电信号转成数字信号，对包末尾的fcs进行错误校验，然后看这个接收方的mac地址看是不是发给自己的包，如果是就放到接收缓存区，否则丢弃，然后路由表查询发送的目标，然后找到对应的端口作为发送方把数据包发送出去。发送给下一个路由器，经过层层转发，最终到达目的地，在这期间源ip和目标ip是不变的，而mac地址是一致变化的，因为需要mac地址在两个设备之间进行包的传输。</p><p>到达服务器之后，服务器先看mac地址是不是自己的mac地址，如果是就保留，然后继续看ip地址是否符合，根据ip头中的协议项，看上层是TCP协议，然后继续看tcp头，里面有序列号，看这个序列号是不是我想要的，如果是就放入缓存然后回复一个ack，如果不是就丢掉，tcp头还有端口号，http的服务器正在监听这个端口，那么服务器就是到时哪个应用进程想要这个包，于是把包发送给http进程。http进程看到这个请求时访问一个页面，于是把网页封装在http相应报文中，响应报文也是类似的层层传递，增加头，然后相反的传递给客户端，客户端收到以后拿到http响应报文之后，交给浏览器去渲染页面。</p><h2 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h2>',5)),i("ol",null,[i("li",null,[l[73]||(l[73]=r("最终到达服务端。服务器处理请求并")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[67]||(l[67]=[r("返回")])),_:1}),l[74]||(l[74]=r("http响应报文。服务器主要作用就是它属于是网络")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[68]||(l[68]=[r("环境")])),_:1}),l[75]||(l[75]=r("中高性能计算机。能够")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[69]||(l[69]=[r("侦听")])),_:1}),l[76]||(l[76]=r("网络中其他计算机的请求，提供相应的服务。如网页服务，邮件服务，视频服务。而客户端主要的功能是浏览网页。服务端根据用户的请求，结合配置文件，把请求")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[70]||(l[70]=[r("分配")])),_:1}),l[77]||(l[77]=r("给服务器上相应的程序进行处理，然后")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[71]||(l[71]=[r("返回")])),_:1}),l[78]||(l[78]=r("后台处理的")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[72]||(l[72]=[r("结果")])),_:1}),l[79]||(l[79]=r("作为响应。"))]),l[80]||(l[80]=i("li",null,"后台开发很多框架，大部分按照MVC的设计模式进行搭建的。MVC将应用程序分成三个核心部件：模型model-视图view-控制器controller，他们各自处理自己的任务，实现输入、处理和输出的分离。",-1))]),l[228]||(l[228]=i("figure",null,[i("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764693037-e1eabbe1-389b-4f57-9849-0eeace78a98a.png",alt:"",tabindex:"0",loading:"lazy"}),i("figcaption")],-1)),l[229]||(l[229]=i("p",null,"视图：提供给用户的操作界面，是程序的外科。",-1)),l[230]||(l[230]=i("p",null,"模型：模型主要负责数据交互，模型拥有最多的处理任务，一个模型可以为多个视图提供数据。",-1)),l[231]||(l[231]=i("p",null,"控制器：负责根据用户从视图层输入的指令，选取“模型层”中的数据，然后对其进行相应的操作，产生最终结果。",-1)),l[232]||(l[232]=i("p",null,"浏览器发送来的请求经过控制器，控制器进行一些逻辑处理和请求分支，接着会调用模型，这一阶段模型会获取redis db以及MySQL数据，获取数据后将页面以响应报文的形式返回给客户端，最后浏览器通过渲染引擎把网页呈现在用户面前。",-1)),l[233]||(l[233]=i("p",null,"响应报文一般包含状态行、协议版本号、成功或失败代码、消息体。",-1)),i("ol",b,[i("li",null,[l[87]||(l[87]=r("客户端")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[81]||(l[81]=[r("接收")])),_:1}),l[88]||(l[88]=r("响应报文以后，进行页面")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[82]||(l[82]=[r("渲染")])),_:1}),l[89]||(l[89]=r("。根据HTML解析出")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[83]||(l[83]=[r("DOM树")])),_:1}),l[90]||(l[90]=r("，根据CSS解析生成")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[84]||(l[84]=[r("CSS规则树")])),_:1}),l[91]||(l[91]=r("。结合DOM树和CSS规则树生成")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[85]||(l[85]=[r("渲染树")])),_:1}),l[92]||(l[92]=r("。根据渲染树计算每一个节点的信息，根据计算好的信息")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[86]||(l[86]=[r("绘制")])),_:1}),l[93]||(l[93]=r("页面。"))]),l[94]||(l[94]=i("li",null,"断开连接：TCP四次挥手",-1))]),l[234]||(l[234]=n('<h1 id="cookie和session" tabindex="-1"><a class="header-anchor" href="#cookie和session" aria-hidden="true">#</a> cookie和session</h1><p>session保存在服务器端，实现是基于cookie实现的，然后向客户端返回一个sessionId，当客户端再次访问服务端时携带sessionId，根据sessionId找到对应的数据。</p><p>cookie是保存在浏览器的。比如说用cookie实现保存登录状态时，客户端点击登录的时候，服务端可以设置一个cookie返回给客户端，客户端会把cookie保存在本地。下次访问服务器时能够带上这个cookie，服务器根据这个cookie获取到用户的信息。</p><h1 id="·tcp" tabindex="-1"><a class="header-anchor" href="#·tcp" aria-hidden="true">#</a> ·TCP</h1><h2 id="tcp和udp区别" tabindex="-1"><a class="header-anchor" href="#tcp和udp区别" aria-hidden="true">#</a> TCP和UDP区别</h2><ol><li>TCP是面向连接的，传输之前需要建立连接。UDP不需要连接。</li><li>TCP是保证可靠交付的，数据无差错、不丢失、不重复。UDP是尽最大努力交付，不保证数据可靠到达。</li><li>TCP是一对一的两点交付，一条tcp连接只有两个端点。UDP支持一对一、一对多、多对多的交互通信。</li><li>TCP有流量控制、拥塞控制，保证数据传输的安全性。UDP没有，即使网络堵塞，也不会影响UDP的发送速率。</li><li>TCP的首部较长，会增加一定量的开销，20+40选项。UDP的首部是8个字节。</li><li>TCP是流式传输的，没有边界，但是能保证顺序和可靠。UDP是一个包一个包的发送，有边界的，但可能会丢包和乱序。</li><li>TCP的数据大小如果大于MSS，会进行分片，拆分传输，如果丢失一个分片，则只需要重传丢失的分片。</li><li>TCP一般用于FTP文件传输，HTTP/HTTPS。UDP用于包数量较少的通信，如DNS、SNMP等；视频、音频等多媒体通信、广播通信等。</li></ol><h2 id="头【乱序、丢失】" tabindex="-1"><a class="header-anchor" href="#头【乱序、丢失】" aria-hidden="true">#</a> 头【乱序、丢失】</h2><p>20字节+40字节选项</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764018737-31451104-29ce-4663-9b79-3fd10fda3d02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="序列号" tabindex="-1"><a class="header-anchor" href="#序列号" aria-hidden="true">#</a> 序列号</h3><p>是建立连接时发送syn数据包时发送一个由计算机随机初始的一个数值，之后每一次发送数据包都加一，作用是解决网络包乱序的问题。</p><h3 id="确认号" tabindex="-1"><a class="header-anchor" href="#确认号" aria-hidden="true">#</a> 确认号</h3><p>是期望接收到的数据序列号，可以认为在这个序列号之前的数据包对面都接收到了。用来解决网络包丢失的问题。</p><h3 id="控制位" tabindex="-1"><a class="header-anchor" href="#控制位" aria-hidden="true">#</a> 控制位</h3><ol><li>ACK：为1表示确认数据包。除了最初建立连接的SYN包之外一直都是1。</li><li>RST：为1时表示TCP异常必须强制断开连接。</li><li>SYN：为1时表示建立连接。</li><li>FIN：为1时表示要断开连接。</li></ol><h2 id="三次四次" tabindex="-1"><a class="header-anchor" href="#三次四次" aria-hidden="true">#</a> 三次四次</h2><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手" aria-hidden="true">#</a> 三次握手</h3>',17)),i("p",null,[l[96]||(l[96]=r("在socket网络编程中，客户端执行")),t(o,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[95]||(l[95]=[r("connect")])),_:1}),l[97]||(l[97]=r("()时，会触发三次握手。"))]),l[235]||(l[235]=i("h4",{id:"流程",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#流程","aria-hidden":"true"},"#"),r(" 流程")],-1)),i("p",null,[l[99]||(l[99]=r("3次握手是指，建立一个TCP连接时，需要")),t(o,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[98]||(l[98]=[r("客户端和服务器")])),_:1}),l[100]||(l[100]=r("总共发送3个包。"))]),l[236]||(l[236]=i("figure",null,[i("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764030935-d5192862-706e-4baf-bbe3-68a2153a947c.png",alt:"",tabindex:"0",loading:"lazy"}),i("figcaption")],-1)),l[237]||(l[237]=i("p",null,"开始客户端和服务端都closed状态，服务端会绑定并监听某个端口，",-1)),l[238]||(l[238]=i("p",null,"第一次握手：",-1)),l[239]||(l[239]=i("p",null,"客户端发送一个TCP的SYN标志为1的包，表明要连接服务器端口，初始化序列号X，之后处于syn-sent状态。",-1)),l[240]||(l[240]=i("p",null,"第二次握手：",-1)),i("p",null,[l[102]||(l[102]=r("服务端收到后，发回确认包ACK应答。SYN和ACK")),t(o,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[101]||(l[101]=[r("标志位")])),_:1}),l[103]||(l[103]=r("都置为1，将确认号设置为客户端序列号+1，即X+1。Seq序列号为y。之后处于syn-rcvd状态。"))]),l[241]||(l[241]=i("p",null,"第三次握手：",-1)),l[242]||(l[242]=i("p",null,"客户端收到这个报文以后，客户端再次发送ACK确认包，SYN标志位0，ACK标志位为1，并且把服务器发来的序列号+1作为确认号。发完以后客户端处于established状态，服务端收到这个确认报文以后，也处于established状态。",-1)),l[243]||(l[243]=i("h4",{id:"为什么3次",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#为什么3次","aria-hidden":"true"},"#"),r(" 为什么3次？")],-1)),l[244]||(l[244]=i("p",null,"为什么不是四次？",-1)),i("ol",null,[i("li",null,[l[105]||(l[105]=r("三次握手的目的是和服务端")),t(o,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[104]||(l[104]=[r("建立连接")])),_:1}),l[106]||(l[106]=r("，3次能让双方都具有发送和接收的能力，正常来说需要四次的，因为第二次的时候相当于2个作用，既能够确认又能够让服务端也发送请求连接syn=1的报文。"))]),l[107]||(l[107]=i("li",null,"3次也能够满足同步双方初始序列号和确认号的需求，并交换TCP接收窗口大小。",-1))]),l[245]||(l[245]=n('<p>为什么不是两次？</p><ol start="3"><li>3次能避免历史连接，如果存在网络拥塞导致报文延迟到达，接收方接收以后发送确认，发送方发现不是自己想收到的确认，直接发送RST断开连接。2次做不到。</li><li>如果2次：过期的SYN报文到达也会导致建立连接,避免资源浪费。</li></ol><h4 id="半连接队列和syn泛洪攻击" tabindex="-1"><a class="header-anchor" href="#半连接队列和syn泛洪攻击" aria-hidden="true">#</a> 半连接队列和SYN泛洪攻击？</h4><p>服务端SYN半连接队列（三次握手尖角处），ACCEPT全连接队列（三次握手）。</p><p>SYN泛洪：属于DoS/DDoS攻击，服务端被攻击，伪造大量客户端向服务端发送SYN报文。</p><p>导致1. 服务端半连接队列占满。2. 服务器触发超时重发，消耗服务器资源。</p><p>解决：1. 增大队列大小 2. 减少重发次数 3. SYN Cookie技术，2步计算cookie返回给客户端，只有收到第三次握手携带cookie验证通过，才分配资源。</p><p>TFO：以后进行三次连接，第一次握手客户端发送缓存的cookie值+http请求，服务端：验证通过返回http响应。累积起来提升性能。</p><h3 id="tcp四次断开" tabindex="-1"><a class="header-anchor" href="#tcp四次断开" aria-hidden="true">#</a> TCP四次断开</h3>',9)),i("p",null,[l[110]||(l[110]=r("TCP的连接断开需要发送4个包，所以叫4次挥手。客户端和服务器")),t(o,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[108]||(l[108]=[r("均可主动发起")])),_:1}),l[111]||(l[111]=r("挥手动作，在socket编程中，任何一方执行")),t(o,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[109]||(l[109]=[r("close")])),_:1}),l[112]||(l[112]=r("操作即可产生挥手操作。"))]),l[246]||(l[246]=n('<h4 id="流程-1" tabindex="-1"><a class="header-anchor" href="#流程-1" aria-hidden="true">#</a> 流程</h4><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764579424-1388502c-3561-4dc4-903c-02c5eeaa279a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第一次断开：客户端发送一个FIN，用来关闭客户端到服务器端的数据传送，客户端进入FIN_WAIT_1状态。</p><p>第二次断开：Server收到FIN后，发送一个ACK给客户端，确认序号为收到的序号+1，服务端进入CLOSE_WAIT状态。</p><p>第三次断开：服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态。</p><p>第四次断开：客户端收到FIN后，发送一个ACK给服务端，确认序号为收到序号+1，客户端进入TIME_WAIT状态，服务端收到以后进入CLOSED状态，完成四次挥手。客户端也就是主动发起挥手的这一方等待2msl进入closed状态。</p><h4 id="为什么四次" tabindex="-1"><a class="header-anchor" href="#为什么四次" aria-hidden="true">#</a> 为什么四次？</h4><p>关闭连接时，客户端向服务端发送FIN，服务端返回ACK，这是2次，代表客户端不再发送数据了，但还能接收数据。</p><p>等服务端发送完数据以后，主动发起FIN，等待客户端的ACK，代表服务端这边也不发送数据了。这样才能2边都关闭连接，所以需要四次。</p><h4 id="为什么time-wait要经过2msl" tabindex="-1"><a class="header-anchor" href="#为什么time-wait要经过2msl" aria-hidden="true">#</a> 为什么time_wait要经过2msl?</h4><p>对于主动提出断开连接一方需要经过2msl，假设客户端主动断开连接，最后给服务端发送ack确认报文，需要确认服务端接收到确认报文。如果服务端没收到，会触发服务端超时重传，客户端就能在2msl时间内接收到重传的报文。</p><p>第一个msl保证最后发送方ACK到达</p><p>第二个msl保证若ack没到达，能够接收到接收方的重传报文。</p><h4 id="time-wait过多有什么危害" tabindex="-1"><a class="header-anchor" href="#time-wait过多有什么危害" aria-hidden="true">#</a> time_wait过多有什么危害？</h4><ol><li>占用系统资源。比如文件描述符、内存资源、CPU、线程。</li><li>占用端口资源。端口资源是有限的。</li></ol><p>客户端：</p><p>客户端如果time_wait过多，会占满端口资源，就无法对某一个服务器发起连接了。</p><p>服务端：</p><p>并不会导致端口资源受限，因为服务端只监听一个端口。但是TCP连接过多，会占用系统资源。</p><h2 id="tcp可靠性" tabindex="-1"><a class="header-anchor" href="#tcp可靠性" aria-hidden="true">#</a> TCP可靠性</h2><h3 id="ip不可靠" tabindex="-1"><a class="header-anchor" href="#ip不可靠" aria-hidden="true">#</a> ip不可靠</h3><p>ip不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据完整性。</p><h3 id="tcp如何确保数据传输可靠性" tabindex="-1"><a class="header-anchor" href="#tcp如何确保数据传输可靠性" aria-hidden="true">#</a> Tcp如何确保数据传输可靠性？</h3><ol><li><p>连接和断开的可靠性</p></li><li><p>TCP的有状态的。报文校验，ACK确认机制，超时重传机制。</p></li><li><p>可控制的。滑动窗口进行的流量控制。拥塞控制。</p></li></ol><h4 id="校验和" tabindex="-1"><a class="header-anchor" href="#校验和" aria-hidden="true">#</a> 校验和</h4><p>数据包校验，检测数据在传输过程中是否出错，如果校验出包有错，则丢弃报文并且不给出响应，TCP发送端收不到确认会触发超时重传。</p><h4 id="ack确认应答机制" tabindex="-1"><a class="header-anchor" href="#ack确认应答机制" aria-hidden="true">#</a> ACK确认应答机制</h4><p>TCP收到另一端发送的数据，将发送一个确认。确认号等于接收报文的序列号+1.</p><h4 id="超时重传" tabindex="-1"><a class="header-anchor" href="#超时重传" aria-hidden="true">#</a> 超时重传</h4><p>TCP发出一个段后，启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。RTO。RTO略大于RTT(往返时延)。</p><p>两种情况：数据包丢失、确认应答丢失。</p><p>【失序数据包重排序+丢弃重复数据】</p><h3 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h3>',33)),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[113]||(l[113]=[r("TCP流量控制")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[114]||(l[114]=[r("主要是使用")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[115]||(l[115]=[r("滑动窗口协议")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[116]||(l[116]=[r("，")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[117]||(l[117]=[r("滑动窗口")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[118]||(l[118]=[r("是接收方接收数据使用的窗口大小，用来告诉发送端接收端的缓存大小，以此可以控制发送端发送数据的大小，从而达到")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[119]||(l[119]=[r("流量控制")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[120]||(l[120]=[r("的目的，控制发送方的发送速率，让接收方能够接收。")])),_:1}),l[247]||(l[247]=i("p",null,"（发送方、接收方）全双工：客服都可做发接",-1)),l[248]||(l[248]=i("p",null,"滑动窗口：大小=拥塞窗口和流量控制窗口最小值",-1)),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[121]||(l[121]=[r("所有数据帧按顺序进行编号，只有落在发送窗口内的帧才允许被发送；")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[122]||(l[122]=[r("发送方发送数据分为4个部分。")])),_:1}),l[249]||(l[249]=n('<figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764587726-09c516b2-f5c1-499c-b05d-4c37ac0a2683.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="拥塞控制" tabindex="-1"><a class="header-anchor" href="#拥塞控制" aria-hidden="true">#</a> 拥塞控制</h3><p>流量控制是避免发送方的数据填满接收方的缓存，控制发送方的发送速率，让接收方来得及接收。而拥塞控制是在网络出现拥堵时，如果继续发送大量的数据包，会导致数据包延迟、丢失等，这时TCP重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟和丢包，所以拥塞控制就是避免发送方的数据填满整个网络。发送窗口就是会根据网络的用拥塞程度动态变化的。</p><p>发送窗口=min（拥塞窗口cwnd，接收窗口rwnd）</p><p>慢开始、拥塞避免、快重传+快恢复（拥塞窗口）</p><p>慢开始：初始为1，RTT，窗口翻倍。到达阈值。窗口值呈指数增长。当到达慢启动门限ssthresh，执行拥塞避免。</p><p>拥塞避免：窗口+1。窗口大小呈线性增长。</p><p>一直增长肯定会导致网络慢慢的拥塞，于是会出现丢包的现象，</p><p>当一报文丢失，接收方发送3次确认，发送方执行快重传、快恢复。</p><p>· 拥塞阈值降为cwnd的一半</p><p>· cwnd大小变为拥塞阈值</p><p>· cwnd线性增加</p><h2 id="粘包拆包" tabindex="-1"><a class="header-anchor" href="#粘包拆包" aria-hidden="true">#</a> 粘包拆包</h2><h3 id="tcp粘包拆包" tabindex="-1"><a class="header-anchor" href="#tcp粘包拆包" aria-hidden="true">#</a> TCP粘包拆包</h3><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1655259793249-be978a16-68f7-4637-a2bf-2606f9ac25a0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',15)),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[123]||(l[123]=[r("假设")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[124]||(l[124]=[r("客户端")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[125]||(l[125]=[r("分别发送了两个数据包D1和D2给服务端，由于服务端")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[126]||(l[126]=[r("一次读取")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[127]||(l[127]=[r("到字节数是不确定的，故可能存在以下四种情况：")])),_:1}),i("ol",null,[i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[128]||(l[128]=[r("服务端分两次读取到了")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[129]||(l[129]=[r("两个独立")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[130]||(l[130]=[r("的数据包，分别是D1和D2，没有粘包和拆包")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[131]||(l[131]=[r("服务端一次接受到了两个数据包，")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[132]||(l[132]=[r("D1和D2粘合")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[133]||(l[133]=[r("在一起，称之为")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[134]||(l[134]=[r("TCP粘包")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[135]||(l[135]=[r("服务端分两次读取到了数据包，第一次读取到了完整的D1包和D2包的部分内容，第二次读取到了D2包的剩余内容，这称之为")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[136]||(l[136]=[r("TCP拆包")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[137]||(l[137]=[r("服务端分两次读取到了数据包，第一次读取到了D1包的部分内容D1_1，第二次读取到了D1包的剩余部分内容D1_2和完整的D2包。")])),_:1})])]),i("p",null,[i("strong",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[138]||(l[138]=[r("如果TCP的接受")])),_:1}),i("strong",null,[i("strong",null,[t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[139]||(l[139]=[r("滑窗")])),_:1})])]),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[140]||(l[140]=[r("非常小，而数据包D1和D2比较大，很有可能会发生第五种情况，即服务端分多次才能将D1和D2包完全接收，期间发生")])),_:1}),i("strong",null,[i("strong",null,[t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[141]||(l[141]=[r("多次拆包")])),_:1})])]),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[142]||(l[142]=[r("。")])),_:1})])]),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[143]||(l[143]=[r("当发生粘包，根据")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[144]||(l[144]=[r("协议的定义")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[145]||(l[145]=[r("，把数据包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[146]||(l[146]=[r("拆开")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[147]||(l[147]=[r("。发生")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[148]||(l[148]=[r("拆包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[149]||(l[149]=[r("问题，等待数据包接收到以后也是根据协议的定义，我们把数据包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[150]||(l[150]=[r("合起来")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[151]||(l[151]=[r("。")])),_:1}),i("h3",g,[l[153]||(l[153]=i("a",{class:"header-anchor",href:"#粘包、拆包发生原因","aria-hidden":"true"},"#",-1)),l[154]||(l[154]=r()),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[152]||(l[152]=[r("粘包、拆包发生原因")])),_:1})]),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[155]||(l[155]=[r("产生原因主要有这3种：")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[156]||(l[156]=[r("滑动窗口")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[157]||(l[157]=[r("、")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[158]||(l[158]=[r("MSS/MTU限制")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[159]||(l[159]=[r("、")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[160]||(l[160]=[r("Nagle算法")])),_:1}),i("h4",y,[l[162]||(l[162]=i("a",{class:"header-anchor",href:"#滑动窗口","aria-hidden":"true"},"#",-1)),l[163]||(l[163]=r()),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[161]||(l[161]=[r("滑动窗口")])),_:1})]),i("ul",null,[i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[164]||(l[164]=[r("粘包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[165]||(l[165]=[r(":")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[166]||(l[166]=[r(" 假设发送方发送的数据会被放到")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[167]||(l[167]=[r("接收缓冲区")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[168]||(l[168]=[r("，如果接收方由于数据处理")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[169]||(l[169]=[r("不及时")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[170]||(l[170]=[r("，")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[171]||(l[171]=[r("接收方的接收缓存中可能会缓存多个报文，那么对于接收方而言，这就是粘包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[172]||(l[172]=[r("。")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[173]||(l[173]=[r("拆包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[174]||(l[174]=[r("：")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[175]||(l[175]=[r("如果")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[176]||(l[176]=[r("接收方的窗口")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[177]||(l[177]=[r("很小，意味着发送方的发送窗口也会变小，如果小于一个数据包的大小，不得不")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 244, 244)"}},{default:d(()=>l[178]||(l[178]=[r("只发送报文的前多少个字节，等到接收方ack 后，再能发送剩余字节。这就造成了拆包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[179]||(l[179]=[r("。")])),_:1})])]),i("h4",E,[l[181]||(l[181]=i("a",{class:"header-anchor",href:"#mss和mtu分片","aria-hidden":"true"},"#",-1)),l[182]||(l[182]=r()),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[180]||(l[180]=[r("MSS和MTU分片")])),_:1})]),i("ul",null,[i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[183]||(l[183]=[r("MSS:数据报文中data部分的最大长度，是传输层对最大发送数据的限制。MSS=MTU-IP-TCP")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[184]||(l[184]=[r("MTU:最大传输单元MTU是数据部分+TCP头+IP头的最大长度。1500，是链路层对最大发送一次数据的限制。")])),_:1})])]),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[185]||(l[185]=[r("发送方发送数据时，发送数据量大于MSS时，操作系统会将数据进行拆分，使得每一部分都小于MSS，这就是")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[186]||(l[186]=[r("拆包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[187]||(l[187]=[r("。")])),_:1}),i("h4",T,[l[189]||(l[189]=i("a",{class:"header-anchor",href:"#nagle算法","aria-hidden":"true"},"#",-1)),l[190]||(l[190]=r()),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[188]||(l[188]=[r("Nagle算法")])),_:1})]),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[191]||(l[191]=[r("TCP/IP协议中，无论发送多少数据，总是要在数据(DATA)前面加上TCP、IP协议头，对方接收到数据，也需要发送ACK表示确认。")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[192]||(l[192]=[r("可能发送的数据只有一个字节，也需要进行这样的传输。TCP总是")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[193]||(l[193]=[r("希望")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[194]||(l[194]=[r("尽可能的发送一个大的数据，能够充分")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FAE1EB"}},{default:d(()=>l[195]||(l[195]=[r("利用")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[196]||(l[196]=[r("网络带宽。")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[197]||(l[197]=[r("Nagle算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。所以为了使发送缓冲区数据长度达到MSS，可能会")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FFE8E6"}},{default:d(()=>l[198]||(l[198]=[r("粘包")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[199]||(l[199]=[r("。")])),_:1}),t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[200]||(l[200]=[r("Nagle算法的规则：")])),_:1}),i("ol",null,[i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[201]||(l[201]=[r("如果SO_SNDBUF(发送缓冲区）中的数据长度达到MSS，则允许发送；")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[202]||(l[202]=[r("如果该SO_SNDBUF中含有FIN，表示请求关闭连接，则先将SO_SNDBUF中的剩余数据发送，再关闭；")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[203]||(l[203]=[r("设置了TCP_NODELAY=true选项，则允许发送。TCP_NODELAY是取消TCP的确认延迟机制，相当于禁用了Nagle 算法。")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[204]||(l[204]=[r("未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送;")])),_:1})]),i("li",null,[t(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[205]||(l[205]=[r("上述条件都未满足，但发生了超时（一般为200ms），则立即发送。")])),_:1})])]),t(o,{style:{color:"rgb(51, 51, 51)"}}),l[250]||(l[250]=n('<h1 id="·http" tabindex="-1"><a class="header-anchor" href="#·http" aria-hidden="true">#</a> ·HTTP</h1><h2 id="http基本概念" tabindex="-1"><a class="header-anchor" href="#http基本概念" aria-hidden="true">#</a> http基本概念</h2><h3 id="http结构" tabindex="-1"><a class="header-anchor" href="#http结构" aria-hidden="true">#</a> http结构</h3>',3)),t(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[206]||(l[206]=[r("请求行")])),_:1}),l[251]||(l[251]=r("包含：请求方法，URL，协议版本。")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[207]||(l[207]=[r("请求方法")])),_:1}),l[252]||(l[252]=r("包含8种，GET，POST，PUT，DELETE，PATCH，HEAD，OPTIONS，TRACE")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[208]||(l[208]=[r("URL")])),_:1}),l[253]||(l[253]=r("即请求地址，由协议://主机：端口/路径？参数组成")),t(o,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[209]||(l[209]=[r("协议版本")])),_:1}),l[254]||(l[254]=r("即http版本号，POST /chapter17/user.html HTTP/1.1")),t(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[210]||(l[210]=[r("请求头")])),_:1}),l[255]||(l[255]=r("：包含一些请求的附加信息，由键值对组成，关键字和值用：分隔。")),t(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[211]||(l[211]=[r("请求体")])),_:1}),l[256]||(l[256]=r("：请求的参数")),l[257]||(l[257]=i("h3",{id:"http状态码",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#http状态码","aria-hidden":"true"},"#"),r(" http状态码")],-1)),l[258]||(l[258]=i("p",null,"响应码",-1)),i("p",null,[l[213]||(l[213]=r("「")),t(o,{style:{color:"rgb(48,79,254)"}},{default:d(()=>l[212]||(l[212]=[r("502 Bad Gateway")])),_:1}),l[214]||(l[214]=r("」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。"))]),i("p",null,[l[216]||(l[216]=r("「")),t(o,{style:{color:"rgb(48,79,254)"}},{default:d(()=>l[215]||(l[215]=[r("503 Service Unavailable")])),_:1}),l[217]||(l[217]=r("」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思。"))]),l[259]||(l[259]=n('<figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764642376-de8c0883-bb4b-4014-8466-164082eda945.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="http常见字段" tabindex="-1"><a class="header-anchor" href="#http常见字段" aria-hidden="true">#</a> http常见字段</h3><p>// 客</p><p>host: 客户端发送请求，用来指定服务器的域名。</p><p>connection：客户端要求服务器使用tcp持久连接。</p><p>accept-encoding：客户端在请求时，告诉可以接受哪些压缩方法。</p><p>// 服</p><p>content-length：服务端返回数据，表名本次数据的长度。</p><p>content-type：服务器回应时，告诉客户端本次数据是什么格式。text/html;charset=utf-8（网页，编码是utf8）</p><p>content-encoding：服务器返回的数据使用什么压缩格式。比如gzip。</p><h3 id="get和post" tabindex="-1"><a class="header-anchor" href="#get和post" aria-hidden="true">#</a> get和post</h3><p>get请求一般是用于查，从服务器获取资源，可以是静态文本、页面、图片、视频等等。get请求参数写在url后面，而且浏览器对url长度有限制，所以参数数量不能太多。</p><p>post请求一般是改，携带的数据一般写在报文的body，请求体中，body中的数据可以是任意格式的数据，需要和客户端协商好，一般不会对body大小做限制，默认是json格式。</p><p>get请求是安全且幂等的，因为是只读，无论做多少次操作，请求的结果都是相同的，所以get请求的数据可以缓存，缓存到浏览器上。</p><p>post一般是改，新增等操作，所以是不安全的，不是幂等的，多次提交结果是不同的，而且不能缓存。</p><h4 id="幂等" tabindex="-1"><a class="header-anchor" href="#幂等" aria-hidden="true">#</a> 幂等</h4><p>幂等就是多次调用（方法/接口）不会改变业务状态，多次调用结果和单次结果一致。</p><p>如：</p><p>前端重复提交：注册/创建帖子，前端可能会重复提交，如果用户提交的数据相应的修改数据库，可能重复创建记录。产生bug。</p><p>接口超时重试：调用第三方接口，可能由于网络原因调用失败，一般都会涉及失败重试，如果第一次调用执行一半出现异常，再次调用就会产生脏数据。</p><p>消息重复消费：使用消息中间件，如果消费者消费了一半突然断开连接，那么没执行完的消息会重新放回队列，消费者再次消费，导致一些异常。</p><p>解决方案：</p><ol><li>token机制：</li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1664332460417-9788b232-2854-4a33-b7f1-081d069b4536.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>客户端发一个请求获取token，服务端生成一个全局唯一id作为token，保存在redis中，然后返回给客户端。</p><p>然后客户端请求业务时会携带这个token。[然后服务端会验证token，如果存在，就业务处理并删除token]（可以用lua脚本保证原子性），如果不在，代表重复操作，直接返回。</p><ol start="2"><li>mysql实现：</li></ol><p>利用mysql的唯一索引。</p><p>建一张表，一个字段是唯一索引。客户端请求服务端，服务端会设定相应的key以及信息存入这张表。因为是唯一索引，如果插入成功，代表之前没有请求，然后执行业务逻辑。如果插入失败，代表已经请求过，直接返回。</p><ol start="3"><li>redis实现</li></ol><p>setnx key value，key不存在可以set成功返回1，否则返回0.</p><p>客户端请求服务端，然后setnx存入redis，并设置过期时间，如果设置成功，代表第一次访问，执行业务逻辑。否则代表请求过，直接返回。</p><h2 id="http1-1和http1-0和http2和http3" tabindex="-1"><a class="header-anchor" href="#http1-1和http1-0和http2和http3" aria-hidden="true">#</a> Http1.1和Http1.0和Http2和HTTP3</h2><h3 id="http-1-1" tabindex="-1"><a class="header-anchor" href="#http-1-1" aria-hidden="true">#</a> HTTP/1.1</h3><ol><li>提出长连接，不需要每次会话都新建一次tcp三次握手，4次挥手。</li><li>管道网络传输，不必等服务端响应了再发下一个请求。队头阻塞（响应），服务端按请求顺序响应的，如果反应慢，就会导致客户端一直收不到数据。</li><li>缓存处理：HTTP1.0主要使用header里的If-Modified-Since,Expires来作为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略如Entity tag，If-Unmodified-Since，If-Match，If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li>Host头处理：http1.0认为每台服务器绑定一个唯一的IP地址。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，共享一个ip地址，所以http1.1的请求支持host头域。</li></ol><h3 id="http-2" tabindex="-1"><a class="header-anchor" href="#http-2" aria-hidden="true">#</a> HTTP/2</h3><ol><li>使用了HTTPS。</li><li>会压缩头，1.1头带有大量信息，而且每次都需要重复发送，http2会消除重复的部分，减小传输的压力，hpack算法，客户端和服务器同时维护了一张头信息表，生成一个索引号，以后就只发索引号就可以了。</li><li>报文2进制格式（叫头信息帧和数据帧），不像http1.1纯文本的形式，好处就是收到报文以后，不需要将明文转成二进制了，可以直接进行解析。</li><li>响应请求数据包有标记，也就是根据标记找到是响应的哪个请求，也就是不需要按序了，而且可以对请求加优先级。</li><li>多路复用，多个请求复用一个TCP连接，每个请求会对应一个id，一个连接可以有多个请求，接收方可以根据请求的id分配到不同的服务端请求里面。</li></ol><p>http2也会有队头阻塞，不过是tcp层导致的队头阻塞，因为tcp按序到达，有确认重传机制，一旦发生丢包接收不到的会重传，因此可能会发生TCP层的队头阻塞。</p><h3 id="http3" tabindex="-1"><a class="header-anchor" href="#http3" aria-hidden="true">#</a> HTTP3</h3><ol><li>采用UDP。</li><li>解决TCP丢包超时重传那么后面的阻塞。</li><li>QUIC协议保证可靠。</li></ol><h2 id="http和https" tabindex="-1"><a class="header-anchor" href="#http和https" aria-hidden="true">#</a> HTTP和HTTPS</h2><p>HTTP：明文/无状态的。窃听、伪装、篡改。</p><p>HTTPS:混合加密、CA、摘要算法。</p><h3 id="混合加密" tabindex="-1"><a class="header-anchor" href="#混合加密" aria-hidden="true">#</a> 混合加密</h3><p>https=http+ssl/tls，对数据进行加密和解密。是采用一种混合加密算法，非对称和对称加密结合的方式。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764650634-2f82fa69-a69f-4e24-9915-8d0c4df5b997.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对称密钥加密，加密和解密使用同一密钥。优点运算速度快。缺点无法安全地将密钥传输给通信方。</p><p>非对称加密：又称公开密钥加密，加密和解密使用不同的密钥。</p><p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p><h3 id="ca" tabindex="-1"><a class="header-anchor" href="#ca" aria-hidden="true">#</a> CA</h3><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764662473-7893f3f1-d0a9-446b-a081-b207442e47a7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>返回：服务器信息、域名、申请证书的公司、公钥、数据加密算法。</p><p>一般来说，非对称加密时用公钥加密，私钥解密，能保证数据的安全性，因为私钥只有一个人知道，只有他才能解密。而用私钥加密，公钥解密能保证消息发送方没有被冒充，因为私钥是不可泄密的，所以如果能够被公钥解密说明这个内容是来自于持有私钥身份的人发出的。</p><p>所以在CA认证时，就采用这种方式来确认消息的身份。</p><hr><h3 id="摘要算法" tabindex="-1"><a class="header-anchor" href="#摘要算法" aria-hidden="true">#</a> 摘要算法</h3><p>一般摘要算法是哈希函数，根据内容计算出哈希值。虽然能保证内容没有被篡改，但是不能保证内容+指纹没有被替换。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654764658321-817c202e-715a-4153-97b1-f3ea9be36008.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="·cdn" tabindex="-1"><a class="header-anchor" href="#·cdn" aria-hidden="true">#</a> ·CDN</h1><p>定义：</p><ol><li>内容分发网络。</li><li>部署在各地的机房服务器。</li><li>让用户能够就近获取所需内容，降低网络延迟。</li><li>实现负载均衡、内容分发、调度的能力。</li></ol><p>关键技术：</p><ol><li>内容发布：</li><li>内容路由</li><li>内容交换</li><li>性能管理</li></ol><p>负载均衡系统</p><ol><li>是CDN的核心。</li><li>将用户请求负载到不同的中心机房或者服务器上。</li></ol><h2 id="负载均衡算法" tabindex="-1"><a class="header-anchor" href="#负载均衡算法" aria-hidden="true">#</a> 负载均衡算法</h2><h3 id="轮询均衡" tabindex="-1"><a class="header-anchor" href="#轮询均衡" aria-hidden="true">#</a> 轮询均衡</h3><ol><li>将客户端请求轮流分配到1-N台服务器上。</li><li>每台服务器被均等的分配一定数量的客户端请求。</li></ol><h3 id="权重轮询均衡" tabindex="-1"><a class="header-anchor" href="#权重轮询均衡" aria-hidden="true">#</a> 权重轮询均衡</h3><ol><li>按照每台服务器的不同配置和服务能力。</li><li>每台服务器设置不同的权重值。</li><li>按照设置的权重值轮询将请求分配到不同服务器上。</li></ol><h3 id="随机均衡" tabindex="-1"><a class="header-anchor" href="#随机均衡" aria-hidden="true">#</a> 随机均衡</h3><p>按照请求随机分配给服务器。</p><p>权重随机均衡</p><p>响应速度均衡</p><p>最少连接数均衡</p><p>处理能力均衡</p><p>DNS响应均衡</p><p>散列算法均衡</p><p>IP地址散列</p><p>URL散列</p>',80))])}const k=p(u,[["render",P],["__file","network.html.vue"]]);export{k as default};
