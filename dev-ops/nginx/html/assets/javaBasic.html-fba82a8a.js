const l=JSON.parse('{"key":"v-e2d6088c","path":"/tech/java/javaBasic.html","title":"Java基础","lang":"zh-CN","frontmatter":{"title":"Java基础","date":"2023-02-12T00:00:00.000Z","index":false,"icon":"laptop-code","category":["Java"],"tag":["Java集合","序列化","反射","代理","设计模式"],"description":"·java集合 一、HashSet：HashMap实现、无序 实现： 存的是散列值。 按照元素的散列值来存取元素的。 元素的散列值通过元素的hashCode方法计算得到。 hashCode相等，则接着通过equals方法比较。 特点： 查找O(1)。 无序。 iterator遍历得到的结果是不确定的。 二、TreeSet：二叉树实现","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/tech/java/javaBasic.html"}],["meta",{"property":"og:site_name","content":"txy"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"·java集合 一、HashSet：HashMap实现、无序 实现： 存的是散列值。 按照元素的散列值来存取元素的。 元素的散列值通过元素的hashCode方法计算得到。 hashCode相等，则接着通过equals方法比较。 特点： 查找O(1)。 无序。 iterator遍历得到的结果是不确定的。 二、TreeSet：二叉树实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Java集合"}],["meta",{"property":"article:tag","content":"序列化"}],["meta",{"property":"article:tag","content":"反射"}],["meta",{"property":"article:tag","content":"代理"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-02-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Set:接口 ：不可重复","slug":"set-接口-不可重复","link":"#set-接口-不可重复","children":[]},{"level":2,"title":"List接口：可重复","slug":"list接口-可重复","link":"#list接口-可重复","children":[{"level":3,"title":"list和set的区别","slug":"list和set的区别","link":"#list和set的区别","children":[]},{"level":3,"title":"Collection和Collections的区别","slug":"collection和collections的区别","link":"#collection和collections的区别","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"hashmap","slug":"hashmap","link":"#hashmap","children":[]},{"level":3,"title":"concurrenthashmap","slug":"concurrenthashmap","link":"#concurrenthashmap","children":[]},{"level":3,"title":"hashtable","slug":"hashtable","link":"#hashtable","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"Queue","slug":"queue","link":"#queue","children":[]},{"level":2,"title":"线程安全集合类","slug":"线程安全集合类","link":"#线程安全集合类","children":[]},{"level":2,"title":"add扩容：","slug":"add扩容","link":"#add扩容","children":[]},{"level":2,"title":"删除元素","slug":"删除元素","link":"#删除元素","children":[]},{"level":2,"title":"Fail-Fast","slug":"fail-fast","link":"#fail-fast","children":[]},{"level":2,"title":"序列化：","slug":"序列化","link":"#序列化","children":[]},{"level":2,"title":"结构：","slug":"结构","link":"#结构","children":[]},{"level":2,"title":"put","slug":"put","link":"#put","children":[]},{"level":2,"title":"为什么线程不安全？","slug":"为什么线程不安全","link":"#为什么线程不安全","children":[]},{"level":2,"title":"Hashmap为什么用红黑树而不是B+树？","slug":"hashmap为什么用红黑树而不是b-树","link":"#hashmap为什么用红黑树而不是b-树","children":[]},{"level":2,"title":"为什么重载因子是0.75","slug":"为什么重载因子是0-75","link":"#为什么重载因子是0-75","children":[]},{"level":2,"title":"为什么8转化为红黑树","slug":"为什么8转化为红黑树","link":"#为什么8转化为红黑树","children":[]},{"level":2,"title":"1.7","slug":"_1-7","link":"#_1-7","children":[{"level":3,"title":"结构","slug":"结构-1","link":"#结构-1","children":[]},{"level":3,"title":"Put流程：","slug":"put流程","link":"#put流程","children":[]},{"level":3,"title":"Get逻辑：","slug":"get逻辑","link":"#get逻辑","children":[]},{"level":3,"title":"扩容：","slug":"扩容","link":"#扩容","children":[]}]},{"level":2,"title":"1.8","slug":"_1-8","link":"#_1-8","children":[{"level":3,"title":"结构：","slug":"结构-2","link":"#结构-2","children":[]},{"level":3,"title":"Put：","slug":"put-1","link":"#put-1","children":[]},{"level":3,"title":"Get：","slug":"get","link":"#get","children":[]}]},{"level":2,"title":"@Transactional注解","slug":"transactional注解","link":"#transactional注解","children":[]},{"level":2,"title":"ioc","slug":"ioc","link":"#ioc","children":[]},{"level":2,"title":"Aop","slug":"aop","link":"#aop","children":[]},{"level":2,"title":"代理","slug":"代理","link":"#代理","children":[{"level":3,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":3,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[]}]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"反射是啥？","slug":"反射是啥","link":"#反射是啥","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"反射API","slug":"反射api","link":"#反射api","children":[]},{"level":3,"title":"步骤","slug":"步骤","link":"#步骤","children":[]},{"level":3,"title":"用途场景","slug":"用途场景","link":"#用途场景","children":[]}]},{"level":2,"title":"封装继承多态/重写重载","slug":"封装继承多态-重写重载","link":"#封装继承多态-重写重载","children":[]},{"level":2,"title":"抽象类和接口","slug":"抽象类和接口","link":"#抽象类和接口","children":[]},{"level":2,"title":"面向对象的六大原则","slug":"面向对象的六大原则","link":"#面向对象的六大原则","children":[]},{"level":2,"title":"static/final/拷贝/JDK/C++","slug":"static-final-拷贝-jdk-c","link":"#static-final-拷贝-jdk-c","children":[{"level":3,"title":"static","slug":"static","link":"#static","children":[]},{"level":3,"title":"final","slug":"final","link":"#final","children":[]},{"level":3,"title":"浅拷贝/深拷贝","slug":"浅拷贝-深拷贝","link":"#浅拷贝-深拷贝","children":[]},{"level":3,"title":"JDK/JRE","slug":"jdk-jre","link":"#jdk-jre","children":[]},{"level":3,"title":"Java和C++的区别","slug":"java和c-的区别","link":"#java和c-的区别","children":[]}]},{"level":2,"title":"内部类","slug":"内部类","link":"#内部类","children":[{"level":3,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[]},{"level":3,"title":"成员内部类","slug":"成员内部类","link":"#成员内部类","children":[]},{"level":3,"title":"局部内部类","slug":"局部内部类","link":"#局部内部类","children":[]},{"level":3,"title":"匿名内部类","slug":"匿名内部类","link":"#匿名内部类","children":[]}]},{"level":2,"title":"泛型/注解/异常","slug":"泛型-注解-异常","link":"#泛型-注解-异常","children":[{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"注解","slug":"注解","link":"#注解","children":[]},{"level":3,"title":"异常","slug":"异常","link":"#异常","children":[]}]},{"level":2,"title":"IO流和序列化","slug":"io流和序列化","link":"#io流和序列化","children":[{"level":3,"title":"序列化","slug":"序列化-1","link":"#序列化-1","children":[]},{"level":3,"title":"IO流","slug":"io流","link":"#io流","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":47.42,"words":14227},"filePathRelative":"tech/java/javaBasic.md","localizedDate":"2023年2月12日","excerpt":"<h1> ·java集合</h1>\\n<h2> </h2>\\n<p>一、HashSet：HashMap实现、无序</p>\\n<p>实现：</p>\\n<ol>\\n<li>存的是散列值。</li>\\n<li>按照元素的散列值来存取元素的。</li>\\n<li>元素的散列值通过元素的hashCode方法计算得到。</li>\\n<li>hashCode相等，则接着通过equals方法比较。</li>\\n</ol>\\n<p>特点：</p>\\n<ol>\\n<li>查找O(1)。</li>\\n<li>无序。</li>\\n<li>iterator遍历得到的结果是不确定的。</li>\\n</ol>\\n<p>二、TreeSet：二叉树实现</p>","autoDesc":true}');export{l as data};
