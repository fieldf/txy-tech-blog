import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as u,o as e,c as a,f as t,b as n,d as i,e as r,w as d}from"./app-9393c1ef.js";const p={},b={id:"字段设计",tabindex:"-1"},f={id:"表的设计-范式",tabindex:"-1"},g={id:"索引",tabindex:"-1"},y={id:"缓存",tabindex:"-1"},m={id:"慢查询日志",tabindex:"-1"},k={id:"分区",tabindex:"-1"},F={id:"分库分表",tabindex:"-1"},x={id:"集群",tabindex:"-1"},A={id:"主从复制",tabindex:"-1"},C={id:"读写分离",tabindex:"-1"},B={id:"负载均衡",tabindex:"-1"},w={id:"高可用",tabindex:"-1"},q={id:"mvcc",tabindex:"-1"};function D(v,l){const o=u("font");return e(),a("div",null,[l[251]||(l[251]=t('<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1667314175631-0ca0a803-49a4-4380-9fd9-96727c4aad59.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="myisam和innodb" tabindex="-1"><a class="header-anchor" href="#myisam和innodb" aria-hidden="true">#</a> myisam和innodb</h2><p>myisam：</p><ol><li>myisam不支持行锁，读取数据只能加表锁。写入时加排他锁。</li><li>不支持事务。</li><li>不支持外键。</li><li>适合select密集型表。</li></ol><p>innodb：</p><ol><li>支持行锁，采用mvcc支持高并发。</li><li>支持事务。</li><li>支持外键。</li><li>适合insert和updata密集型的表。</li></ol><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><ol><li>max_user_connection: 最大连接数。</li><li>wait_timeout: 数据库连接闲置时间。</li></ol><h1 id="·索引" tabindex="-1"><a class="header-anchor" href="#·索引" aria-hidden="true">#</a> ·索引</h1><p>索引相当于目录，能够通过索引快速获取相关的数据，空间换时间。索引和数据位于存储引擎层。</p><h2 id="索引分类" tabindex="-1"><a class="header-anchor" href="#索引分类" aria-hidden="true">#</a> 索引分类</h2><h3 id="按数据结构分" tabindex="-1"><a class="header-anchor" href="#按数据结构分" aria-hidden="true">#</a> 按数据结构分</h3><ol><li>b+树索引</li><li>hash索引(Innodb不支持hash索引，但是有一个自适应hash索引)，mysql没有显式的支持hash索引，作为内部的一种优化。怎么优化？就是二级索引被频繁访问，就会建立hash索引。某些热点数据会自动生成hash索引。</li></ol><h3 id="按字段特征分类" tabindex="-1"><a class="header-anchor" href="#按字段特征分类" aria-hidden="true">#</a> 按字段特征分类</h3><ol><li>主键索引、primary key</li><li>唯一索引、unique</li><li>普通索引、index</li><li>全文索引、fulltext</li><li>前缀索引、index(column_name(length))</li></ol><h4 id="前缀索引" tabindex="-1"><a class="header-anchor" href="#前缀索引" aria-hidden="true">#</a> 前缀索引</h4><p>index(column_name(length))</p><p>对字符类型的字段前几个字符建立索引，而不是在整个字段建立索引，例如char、varchar、binary、varbinary列。</p><p>作用是减少索引占用的存储空间，提升查询效率。</p><h3 id="按物理存储分类" tabindex="-1"><a class="header-anchor" href="#按物理存储分类" aria-hidden="true">#</a> 按物理存储分类</h3><ol><li>聚集索引（主键索引-&gt;unique索引-&gt;rowid）</li><li>二级索引（非聚集索引）[要回表]</li></ol><p>聚簇结构：索引的关键字和记录是存放在一起的。仅Innodb的主键索引为聚簇结构。其他的索引包括Innodb的非主键索引都是典型的BTree结构。</p><h4 id="回表和索引覆盖" tabindex="-1"><a class="header-anchor" href="#回表和索引覆盖" aria-hidden="true">#</a> 回表和索引覆盖</h4><p>二级索引叶子结点存放的是主键值。查询时，如果查询的数据能够在二级索引查询得到，就不需要回表，这个过程就是索引覆盖。如果查询的数据不在二级索引，会先检索二级索引，找到叶子结点获取主键值，再检索主键索引，就能查询到数据了，这个过程就是回表。</p><h3 id="按字段个数来分" tabindex="-1"><a class="header-anchor" href="#按字段个数来分" aria-hidden="true">#</a> 按字段个数来分</h3><ol><li>单列索引、联合索引</li></ol><h4 id="联合索引" tabindex="-1"><a class="header-anchor" href="#联合索引" aria-hidden="true">#</a> 联合索引</h4><p>alter table table_name add index index_name(prodect_no, name);</p><p>最左匹配原则：按照最左优先的方式进行索引匹配。如创建了(a,b,c)联合索引，如果查询条件是一下几种，可以匹配。</p><ul><li>where a=1;</li><li>where a=1 and b=2 and c=3;</li><li>where a=1 and b=2;</li></ul><p>先按a排序，a相同的情况下按b排序，b相同的情况再按c排序。所以b和c是全局无序，局部相对有序。所以在没有遵循最左匹配原则的情况下，是无法利用索引的，因为利用索引的前提是key是有序的。</p><h5 id="索引下推-using-index-condition" tabindex="-1"><a class="header-anchor" href="#索引下推-using-index-condition" aria-hidden="true">#</a> 索引下推（using index condition）</h5><p>select * from table where a&gt;1 and b=2</p><p>如果where a&gt;1 and b=2，a是可以用到联合索引的，b用不到，因为a&gt;1时，b值不是有序的，所以b用不上联合索引。除了a&gt;1，在&lt;,between,like等也会导致后面的列用不到索引。</p><p>那么在mysql5.6之前，对于满足a&gt;1条件的记录，需要一个一个的回表查看是否满足下面的条件b=2。</p><p>在mysql5.6引入了索引下推，也就是在联合索引遍历时，会对联合索引中的字段先做判断，直接过滤掉不满足条件的也就是b！=2的记录，从而减少回表次数。</p><p>因为后面的很可能索引失效，如果索引失效需要根据前面满足条件的，然后再去找后面满足条件的，如果前面的数据多，那么查找效率会低。所以一般把区分度高的索引列放到前面。区分度=distinct(col)/count(*)</p><h4 id="联合索引实例↑" tabindex="-1"><a class="header-anchor" href="#联合索引实例↑" aria-hidden="true">#</a> 联合索引实例↑</h4><p>select * from order where status=1 order by create_time asc</p><p>可以给status和create_time建立联合索引，这样当status满足条件时，create_time就是有序的了。</p><p>如果只给status建立索引，那么还需要对create_time排序，这时就要用到文件排序filesort，extra列。</p><h2 id="mysql的b-树和b树的区别" tabindex="-1"><a class="header-anchor" href="#mysql的b-树和b树的区别" aria-hidden="true">#</a> mysql的b+树和b树的区别</h2>',43)),n("p",null,[l[1]||(l[1]=i("B+树：B+树叶子结点存储数据，非叶子节点存储指针，非叶子节点数据冗余了一份在叶子结点。B+树叶子结点用")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[0]||(l[0]=[i("双向链表")])),_:1}),l[2]||(l[2]=i("进行连接。"))]),l[252]||(l[252]=n("p",null,"B树：b树非叶子结点会存储数据。",-1)),n("ol",null,[l[8]||(l[8]=n("li",null,"b+树通过索引能够定位到在哪个或者哪些叶子结点，b树查数据时节点内数据时存储在磁盘中的，每次和叶子结点内数据比对看是不是自己需要的数据时都需要进行一次磁盘io。",-1)),n("li",null,[l[4]||(l[4]=i("b+树非叶子节点存储的是指针，指针占据存储空间很小，也就是每一页可以存很多指针，b+树的树高就相对比较")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[3]||(l[3]=[i("矮")])),_:1}),l[5]||(l[5]=i("，不需要进行那么多次磁盘io。"))]),n("li",null,[l[7]||(l[7]=i("而且")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[6]||(l[6]=[i("范围查询b树需要对树进行中序遍历，b+树直接在叶子结点链表遍历即可。")])),_:1})])]),l[253]||(l[253]=n("h2",{id:"mysql数据库页",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql数据库页","aria-hidden":"true"},"#"),i(" mysql数据库页")],-1)),n("p",null,[l[12]||(l[12]=i("Mysql数据存储在磁盘，用页来存储，一页存多条数据的，这样避免了每查一行数据就进行一次磁盘io，是一下子能查出一页数据，减少磁盘io的次数。")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[9]||(l[9]=[i("页内数据通过链表")])),_:1}),l[13]||(l[13]=i("连接，每个页有一个")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[10]||(l[10]=[i("页目录")])),_:1}),l[14]||(l[14]=i("，一页数据分成多个")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[11]||(l[11]=[i("组")])),_:1}),l[15]||(l[15]=i("，通过页目录可以定位到对应的组。再在对应的组里找到想要查的数据。"))]),l[254]||(l[254]=t('<figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1650684070725-98041b14-35ea-4364-ada2-daa1d80b2f2e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>存多少数据？</p><p>1页16k，一个索引大概也就几B，算成10B。一页大概存1000多个索引。</p><p>数据比索引大一些，叶子结点1页存储数据大概有几百条。</p><p>如果3层，1000<em>1000</em>几百条，能存上亿条数据。</p><h2 id="建立索引的原则" tabindex="-1"><a class="header-anchor" href="#建立索引的原则" aria-hidden="true">#</a> 建立索引的原则</h2><p>建立：</p>',7)),n("ol",null,[n("li",null,[l[21]||(l[21]=i("经常作为")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[16]||(l[16]=[i("查询条件")])),_:1}),l[22]||(l[22]=i("的where字段建立索引，可以提高查询速度。 ")),n("ol",null,[n("li",null,[l[18]||(l[18]=i("where条件尽量避免对null值判断，可能会导致")),r(o,{style:{"background-color":"#1890FF"}},{default:d(()=>l[17]||(l[17]=[i("索引失效")])),_:1}),l[19]||(l[19]=i("->全表扫描。"))]),l[20]||(l[20]=n("li",null,"可以用0代表null。",-1))])]),l[27]||(l[27]=n("li",null,[i("为经常需要order by，group by（）的字段建立索引。 "),n("ol",null,[n("li",null,"这些字段需要排序操作，会浪费时间。建立索引，可以避免排序。")])],-1)),n("li",null,[l[24]||(l[24]=i("选择")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[23]||(l[23]=[i("唯一")])),_:1}),l[25]||(l[25]=i("性索引 ")),l[26]||(l[26]=n("ol",null,[n("li",null,"因为值是唯一的有助于快速定位数据。给学号字段建立唯一索引，比给姓名建立索引强。")],-1))]),l[28]||(l[28]=n("li",null,[i("字段值如果很稀少不适合做索引，比如性别。 "),n("ol",null,[n("li",null,"count(distinct col)/count(*)，越接近1越好。如果值为0.1，代表找一条数据需要扫描10条。"),n("li",null,"比如性别没有很多个值没必要建索引。")])],-1))]),l[255]||(l[255]=t("<p>联合：</p><ol><li>查询条件数据列较多，考虑建立联合索引。 <ol><li>查询时不使用select * from t.用具体的字段代替。</li></ol></li><li>最左前缀匹配原则 <ol><li>从左向右匹配直到遇到范围查询(&gt;,&lt;,between,like)时会停止匹配。</li><li>比如a=&quot;1&quot;and b=&quot;2&quot; and c&gt;&quot;3&quot; and d=4，建立(a,b,c,d)，d是用不到索引的。如果建立(a,b,d,c)的索引则都可以用到。abd顺序可调。优化器</li></ol></li></ol><p>前缀：</p><ol><li>选择字段长度小的做索引，如果长，查询速度受影响。 <ol><li>例如CHAR(100)检索的时间肯定比CHAR(10)时间更少。</li><li>或者长字段考虑建立前缀索引。</li></ol></li></ol><p>注意：</p>",5)),n("ol",null,[l[32]||(l[32]=n("li",null,[i("索引不是越多越好 "),n("ol",null,[n("li",null,"存储索引占用磁盘空间，索引越多磁盘空间越大。"),n("li",null,"修改表时，对索引的更新都很麻烦。索引越多，更新表越慢。"),n("li",null,"一个表的索引最好不要超过6个。")])],-1)),l[33]||(l[33]=n("li",null,"索引不用就删了。",-1)),n("li",null,[l[30]||(l[30]=i("查询时用")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[29]||(l[29]=[i(">=不用＞。")])),_:1}),l[31]||(l[31]=n("ol",null,[n("li",null,"select * from emp where deptno>=4,而不用select * from emp where deptno>3"),n("li",null,"大于等于直接跳到位置，大于先定位到数字再扫描第一个比它大的记录。")],-1))])]),l[256]||(l[256]=n("p",null,"查询原则：",-1)),l[257]||(l[257]=n("ol",null,[n("li",null,"sql尽可能简单。可以减少锁时间。"),n("li",null,"or改成in。or是O(n)，in是O(logn)。")],-1)),l[258]||(l[258]=n("h2",{id:"索引失效",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#索引失效","aria-hidden":"true"},"#"),i(" 索引失效")],-1)),n("ol",null,[n("li",null,[l[35]||(l[35]=i("尽量避免where条件判断null，或者使用")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[34]||(l[34]=[i("!=")])),_:1}),l[36]||(l[36]=i("，可能导致引擎使用全表扫描。"))]),n("li",null,[l[38]||(l[38]=i("尽量避免在where子句中使用")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[37]||(l[37]=[i("or来连接条件")])),_:1}),l[39]||(l[39]=i("，否则导致引擎放弃使用索引而进行全表扫描。如：select id from t where num=10 or num=20可以select id from t where num=10 union all select id from t where num=20;"))]),n("li",null,[r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[40]||(l[40]=[i("模糊匹配")])),_:1}),l[41]||(l[41]=i("可能会索引失效select id from t where name like '%三'模糊匹配"))]),n("li",null,[l[43]||(l[43]=i("where条件字段使用")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[42]||(l[42]=[i("函数或者表达式")])),_:1}),l[44]||(l[44]=i("。 ")),l[45]||(l[45]=n("ol",null,[n("li",null,"表达式select id from t where num/2=100;"),n("li",null,"select id from t where substring(name,1,3)='abc', like 'abc%'；"),n("li",null,[i("比如from_unixtime(create_time)='2014-05-29'就不能使用到索引。 "),n("ol",null,[n("li",null,"索引是存的是字段值。"),n("li",null,"如果用函数，检索时每个数据的字段值都得用函数才能比较。所以改成create_time=from_unixtime('2014-05-29');")])])],-1))]),l[46]||(l[46]=n("li",null,"用between不用in和not in要慎用，否则会导致全表扫描。select id from t where num in(1,2,3)，尤其对于连续的数值，能用between就不要用in了，select id from t where num between 1 and 3;",-1))]),l[259]||(l[259]=n("h1",{id:"·性能优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#·性能优化","aria-hidden":"true"},"#"),i(" ·性能优化")],-1)),n("p",null,[l[48]||(l[48]=i("由于系统的吞吐量瓶颈往往出现在数据库的")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[47]||(l[47]=[i("访问速度")])),_:1}),l[49]||(l[49]=i("上；而且随着应用程序的运行，数据库中的数据会越来越多，处理时间会相应变慢；数据是存放在磁盘上的，读写速度无法和内存相比。因此需要进行性能优化。"))]),l[260]||(l[260]=n("h2",{id:"设计数据库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计数据库","aria-hidden":"true"},"#"),i(" 设计数据库")],-1)),n("h3",b,[l[51]||(l[51]=n("a",{class:"header-anchor",href:"#字段设计","aria-hidden":"true"},"#",-1)),l[52]||(l[52]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[50]||(l[50]=[i("字段设计")])),_:1})]),l[261]||(l[261]=n("p",null,"需要遵循：",-1)),n("ol",null,[l[59]||(l[59]=n("li",null,"尽量用tinyint，smallint，medium_int做整形，而非int。如果非负用unsigned。",-1)),n("li",null,[l[54]||(l[54]=i("尽量用")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[53]||(l[53]=[i("定长")])),_:1}),l[55]||(l[55]=i("，比如varchar长度只分配需要的空间。因为非定长的空间会随着数据的增大而增大。"))]),l[60]||(l[60]=n("li",null,"避免用null设置字段，占用额外的索引空间，而且很难进行查询优化。",-1)),l[61]||(l[61]=n("li",null,"尽量用timestamp而不是datetime。",-1)),n("li",null,[l[57]||(l[57]=i("某些情况下如果能用")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[56]||(l[56]=[i("整形")])),_:1}),l[58]||(l[58]=i("就用整形表示字符串。"))])]),n("h3",f,[l[63]||(l[63]=n("a",{class:"header-anchor",href:"#表的设计-范式","aria-hidden":"true"},"#",-1)),l[64]||(l[64]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[62]||(l[62]=[i("表的设计")])),_:1}),l[65]||(l[65]=i("：范式"))]),n("p",null,[l[67]||(l[67]=i("第一范式：字段")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[66]||(l[66]=[i("原子性")])),_:1}),l[68]||(l[68]=i("不可分割。一个字段不能以逗号分割，存多个值。（关系型数据库，默认满足第一范式）。"))]),n("p",null,[l[70]||(l[70]=i("第二范式：消除字段对主键的部分依赖。新增一个独立字段作为主键。第二范式是")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[69]||(l[69]=[i("字段和主键是直接相关")])),_:1}),l[71]||(l[71]=i("的，员工，部门，部门领导。指表描述一件事情。"))]),n("p",null,[l[73]||(l[73]=i("第三范式：消除字段对主键的传递依赖。")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[72]||(l[72]=[i("非主键外字段之间互不依赖")])),_:1}),l[74]||(l[74]=i("，员工，部门id， 部门名称，部门。。。数据冗余。能够避免冗余。"))]),n("h3",g,[l[76]||(l[76]=n("a",{class:"header-anchor",href:"#索引","aria-hidden":"true"},"#",-1)),l[77]||(l[77]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[75]||(l[75]=[i("索引")])),_:1})]),n("p",null,[l[79]||(l[79]=i("关键字")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[78]||(l[78]=[i("（字段）与数据的映射关系")])),_:1}),l[80]||(l[80]=i("称为索引。（包含关键字和对应的记录在磁盘中的地址）。关键字是从数据当中提取的用于标识、检索数据的特定内容。"))]),l[262]||(l[262]=n("p",null,"索引检索为什么快？关键字相对于数据本身，数据量小。关键字是有序的，二分查找可快速确定位置。",-1)),l[263]||(l[263]=n("p",null,"在where、order by、join字段上建立索引。基于业务逻辑优化、组合索引：如果条件经常性出现在一起，那么可以考虑将多字段索引升级为复合索引。如果通过增加个别字段的索引，就可以出现索引覆盖，那么可以考虑为该字段建立索引。查询时，不常用到的索引，应该删除掉。",-1)),n("h2",y,[l[82]||(l[82]=n("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#",-1)),l[83]||(l[83]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[81]||(l[81]=[i("缓存")])),_:1})]),n("p",null,[l[87]||(l[87]=i("配置文件中开启缓存：Windows上使my.ini，linux上是my.cnf。mysqld段中配置")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[84]||(l[84]=[i("query_cache_type")])),_:1}),l[88]||(l[88]=i(": 0不开启，1开启默认缓存所有，需要在sql语句中增加select sql-no-cache提示来放弃缓存，")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[85]||(l[85]=[i("2：开启")])),_:1}),l[89]||(l[89]=i("，默认都不缓存，需要在sql语句中增加")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[86]||(l[86]=[i("select sql-cache")])),_:1}),l[90]||(l[90]=i("来主动缓存（常用）"))]),l[264]||(l[264]=n("p",null,"将查询结果缓存：",-1)),l[265]||(l[265]=n("p",null,"select sql_cache * from user;",-1)),l[266]||(l[266]=n("p",null,"重置缓存",-1)),l[267]||(l[267]=n("p",null,"reset query cache;",-1)),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[91]||(l[91]=[i("不建议使用")])),_:1}),l[268]||(l[268]=i("查询缓存，因为对一个表更新，这个表上所有的查询缓存都会被清空。静态表才适合使用查询缓存。Mysql8.0版本将查询缓存的整块功能彻底删掉了。")),n("h2",m,[l[93]||(l[93]=n("a",{class:"header-anchor",href:"#慢查询日志","aria-hidden":"true"},"#",-1)),l[94]||(l[94]=i()),r(o,{style:{color:"#E8323C"}},{default:d(()=>l[92]||(l[92]=[i("慢查询日志")])),_:1})]),l[269]||(l[269]=n("p",null,"记录查询时间超过某阈值(long_query_time)的sql语句的日志。",-1)),n("p",null,[l[96]||(l[96]=i("配置：/etc/my.cnf，查看日志位置：")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[95]||(l[95]=[i("/var/lib/mysql/localhost-slow.log")])),_:1})]),l[270]||(l[270]=n("p",null,"开关: show variable like ‘slow_query_log’;",-1)),n("h2",k,[l[98]||(l[98]=n("a",{class:"header-anchor",href:"#分区","aria-hidden":"true"},"#",-1)),l[99]||(l[99]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[97]||(l[97]=[i("分区")])),_:1})]),l[271]||(l[271]=n("p",null,"一般情况下我们创建的表对应一组存储文件，使用myisam存储引擎时是一个.myi和.myd文件。使用Innodb存储引擎时是一个.ibd和.frm（表结构）的文件。",-1)),l[272]||(l[272]=n("p",null,"当数据量较大（千万条记录级别以上），mysql性能下降，这时我们需要将数据分散到多组存储文件，保证单个文件的执行效率。",-1)),n("p",null,[l[102]||(l[102]=i("最常见分区方案：")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[100]||(l[100]=[i("id分区")])),_:1}),l[103]||(l[103]=i("，将id的哈希值对10取模将数据均匀分散到")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[101]||(l[101]=[i("10个.ibd存储文件")])),_:1}),l[104]||(l[104]=i("中。Create table article (id int auto_increment primary key)partition by hash(id) partitions 10"))]),r(o,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[105]||(l[105]=[i("mysql提供的")])),_:1}),l[273]||(l[273]=i("分区算法：")),n("p",null,[l[108]||(l[108]=i("分区依据的字段必须是")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[106]||(l[106]=[i("主键的一部分")])),_:1}),l[109]||(l[109]=i("，分区是为了")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[107]||(l[107]=[i("快速定位")])),_:1}),l[110]||(l[110]=i("数据。"))]),l[274]||(l[274]=n("p",null,"Hash(field): 相同的输入得到相同的输出。仅适用于整型字段。",-1)),l[275]||(l[275]=n("p",null,"Key(field):和上面的性质一样。只不过key是处理字符串的，比hash多了一步从字符串中计算出一个整形再做取模操作。",-1)),n("p",null,[l[112]||(l[112]=i("Range算法，条件分区算法，按照数据大小范围分区。将数据使用某种")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[111]||(l[111]=[i("条件")])),_:1}),l[113]||(l[113]=i("，分散到不同的分区中。比如文章的发布时间8月、9月、10月分区存放。"))]),n("h2",F,[l[115]||(l[115]=n("a",{class:"header-anchor",href:"#分库分表","aria-hidden":"true"},"#",-1)),l[116]||(l[116]=i()),r(o,{style:{color:"#E8323C"}},{default:d(()=>l[114]||(l[114]=[i("分库分表")])),_:1})]),l[276]||(l[276]=t('<h3 id="为什么要分库分表" tabindex="-1"><a class="header-anchor" href="#为什么要分库分表" aria-hidden="true">#</a> 为什么要分库分表？</h3><ol><li>数据存储在磁盘中的。 <ol><li>我们的硬件存储数据比较有压力的。</li><li>表中数据量较大时，查询/对数据的操作效率会比较低。</li></ol></li><li>索引的操作，索引是存储在内存中的。 <ol><li>数据较多可能意味着索引较大，可能导致内存没办法存储这么多数据。</li></ol></li></ol><h3 id="分表" tabindex="-1"><a class="header-anchor" href="#分表" aria-hidden="true">#</a> 分表</h3><p>如果单表的数据量很大，就可以考虑分表，几千万？分表可以分为垂直分表和水平分表。</p><p>垂直分表：</p><ol><li>把一个表中的字段分到不同的表中。</li><li>根据业务需要，把一个表中不常使用的或者是长度比较长的分到一个表。</li><li>在数据库设计之初就应该考虑到，避免后续数据量很大时再做这种操作。</li></ol><p>水平分表：</p><ol><li>把一个表中的数据按照一些规则分到多个表中。</li><li>方式可以选择取模，比如按照某一个字段比如id，id对表的数量取模，得到余数代表存到对应的表中。 <ol><li>优点就是比较均匀，但是想要扩展会比较麻烦。</li><li>比如原先分成两个表，后来数据多了想要分成3个表，那数据的位置都会变。</li></ol></li><li>除了取模还可以按照时间来分，比如哪些时间段的分到哪张表，这种操作。 <ol><li>好处就是操作简单，缺点就是数据分布不会特别均匀。</li></ol></li></ol><h3 id="分库" tabindex="-1"><a class="header-anchor" href="#分库" aria-hidden="true">#</a> 分库</h3><ol><li>分库就是把数据库分成多个数据库。</li><li>可以按照业务来分库。 <ol><li>根据这些表的功能来分，分出不同的业务数据库。</li><li>比如订单数据库、评论数据库等等。</li></ol></li></ol><p>常用的组件：Mycat/ShardingSphere</p><p>执行流程：sql解析，查询优化，sql路由，sql改写，sql执行，结果归并</p>',12)),n("h2",x,[l[118]||(l[118]=n("a",{class:"header-anchor",href:"#集群","aria-hidden":"true"},"#",-1)),l[119]||(l[119]=i()),r(o,{style:{"background-color":"rgb(0,255,0)"}},{default:d(()=>l[117]||(l[117]=[i("集群")])),_:1})]),r(o,{style:{"background-color":"rgb(0,255,0)"}},{default:d(()=>l[120]||(l[120]=[i("（读写分离、主从复制、负载均衡、高可用）")])),_:1}),l[277]||(l[277]=n("p",null,"横向扩展：从根本上提升数据库性能，由此而生的相关技术：读写分离、负载均衡。",-1)),n("h3",A,[l[122]||(l[122]=n("a",{class:"header-anchor",href:"#主从复制","aria-hidden":"true"},"#",-1)),l[123]||(l[123]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[121]||(l[121]=[i("主从复制")])),_:1})]),l[278]||(l[278]=n("ol",null,[n("li",null,"配置主从节点，master，slave。"),n("li",null,"从库读，主库写。")],-1)),l[279]||(l[279]=n("p",null,"主从同步：",-1)),n("ol",null,[n("li",null,[l[126]||(l[126]=i("主服务器")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[124]||(l[124]=[i("提交事务之后")])),_:1}),l[127]||(l[127]=i("，它的修改ddl、dml会保存在")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[125]||(l[125]=[i("Bin log日志中")])),_:1}),l[128]||(l[128]=i("。"))]),n("li",null,[l[131]||(l[131]=i("主库的二进制日志传到从库中，然后")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[129]||(l[129]=[i("从库")])),_:1}),l[132]||(l[132]=i("对这些日志")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[130]||(l[130]=[i("重新执行")])),_:1}),l[133]||(l[133]=i("。"))]),n("li",null,[l[147]||(l[147]=i("具体： ")),n("ol",null,[n("li",null,[r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[134]||(l[134]=[i("从服务器")])),_:1}),l[136]||(l[136]=i("上启动一个")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[135]||(l[135]=[i("I/O thread")])),_:1}),l[137]||(l[137]=i("。它向主服务器请求读取binlog日志，"))]),n("li",null,[l[139]||(l[139]=i("然后把读取到的二进制日志写到本地的一个")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[138]||(l[138]=[i("Realy log中继日志")])),_:1}),l[140]||(l[140]=i("里面。"))]),n("li",null,[l[144]||(l[144]=i("从服务器上面开启一个")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[141]||(l[141]=[i("sql thread")])),_:1}),l[145]||(l[145]=i("定时检查realy log，如果发现有更改立即把")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[142]||(l[142]=[i("更改的内容")])),_:1}),l[146]||(l[146]=i("在本机上")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[143]||(l[143]=[i("执行一遍。")])),_:1})])])])]),l[280]||(l[280]=n("p",null,"一主多从",-1)),l[281]||(l[281]=n("ol",null,[n("li",null,"主库既要负责写又要负责为几个从库提供二进制日志。"),n("li",null,"可以把二进制日志只给某一从。"),n("li",null,"从库同时也可以作为其他从服务器的主库，把二进制日志发给其他从。"),n("li",null,"这样的架构性能会好很多，数据之间的延迟也会稍微好一些。")],-1)),l[282]||(l[282]=n("p",null,"好处",-1)),n("ol",null,[n("li",null,[l[149]||(l[149]=i("实现")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[148]||(l[148]=[i("读写分离")])),_:1}),l[150]||(l[150]=i("，降低主库的访问压力（增删改主库，查询从库）"))]),n("li",null,[l[152]||(l[152]=i("可以在")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[151]||(l[151]=[i("从库中执行备份")])),_:1}),l[153]||(l[153]=i("，以避免备份期间影响主库业务。"))]),n("li",null,[r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[154]||(l[154]=[i("主库出现问题")])),_:1}),l[156]||(l[156]=i("，可以快速")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[155]||(l[155]=[i("切换到从库")])),_:1}),l[157]||(l[157]=i("提供服务"))])]),l[283]||(l[283]=n("figure",null,[n("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1650705122557-4a061f6e-1994-4823-b74e-e332f0a0d7ee.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1)),n("h3",C,[l[159]||(l[159]=n("a",{class:"header-anchor",href:"#读写分离","aria-hidden":"true"},"#",-1)),l[160]||(l[160]=i()),r(o,{style:{color:"#E8323C"}},{default:d(()=>l[158]||(l[158]=[i("读写分离")])),_:1})]),n("ol",null,[l[166]||(l[166]=n("li",null,"基于主从复制",-1)),n("li",null,[l[163]||(l[163]=i("写：")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[161]||(l[161]=[i("连主库")])),_:1}),l[164]||(l[164]=i("，读：")),r(o,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[162]||(l[162]=[i("连从库")])),_:1}),l[165]||(l[165]=i("。程序员控制，麻烦。"))]),l[167]||(l[167]=n("li",null,"把数据库的读和写操作分开，以应对不同的数据库服务器。",-1)),l[168]||(l[168]=n("li",null,"主数据库提供写操作，从数据库提供读操作，这样能有效的减轻单台数据库的压力。",-1))]),l[284]||(l[284]=n("figure",null,[n("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1650706448534-8053e3df-677b-4727-b7a2-f7bcfb360d30.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1)),l[285]||(l[285]=n("p",null,"方案一：定义两种连接，就像我们在jdbc时定义的database一样，我们可以抽取出ReadDataBase，WriteDataBase implements DataBase，但是这种方式无法利用优秀的线程技术如DruidDataDource帮我们管理连接，也无法利用spring AOP让连接对DAO层透明。",-1)),l[286]||(l[286]=n("p",null,"方案二、使用Spring AOP。如果能够使用spring AOP解决数据源切换的问题，那么就可以和mybatis、druid整合到一起了。读数据源对应连接master而写数据源对应连接slave，那么就可以做到读写分离了。",-1)),n("h3",B,[l[170]||(l[170]=n("a",{class:"header-anchor",href:"#负载均衡","aria-hidden":"true"},"#",-1)),l[171]||(l[171]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[169]||(l[169]=[i("负载均衡")])),_:1})]),l[287]||(l[287]=n("p",null,"负载均衡算法：",-1)),l[288]||(l[288]=n("ol",null,[n("li",null,"轮询：按用户请求进入的时间顺序依次将请求分配给各个服务器。"),n("li",null,"加权轮询：按照处理能力来加权。"),n("li",null,[i("负载分配：依据服务器的空闲状态来分配用户请求。 "),n("ol",null,[n("li",null,"每个节点的内存使用率，CPU利用率。"),n("li",null,"选出最闲的那个，效率太低。")])])],-1)),n("h3",w,[l[173]||(l[173]=n("a",{class:"header-anchor",href:"#高可用","aria-hidden":"true"},"#",-1)),l[174]||(l[174]=i()),r(o,{style:{color:"rgb(255,0,0)"}},{default:d(()=>l[172]||(l[172]=[i("高可用")])),_:1})]),l[289]||(l[289]=n("p",null,"在服务器架构时，为了保证服务器7*24不宕机在线状态，需要为每台单点服务器（由一台服务器提供的服务器，如写服务器、数据库中间件）提供冗余机。",-1)),l[290]||(l[290]=n("p",null,"对于写服务器来说，需要提供一台同样的写-冗余服务器，当写服务器健康时（写-冗余通过心跳检测），写-冗余作为一个从机的角色复制写服务器的内容与其做一个同步；当写服务器宕机时，写-冗余服务器便顶上来作为写服务器继续提供服务。对外界来说这个处理过程是透明的。即外界仅通过一个IP访问服务。",-1)),l[291]||(l[291]=n("h1",{id:"·事务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#·事务","aria-hidden":"true"},"#"),i(" ·事务")],-1)),l[292]||(l[292]=n("h2",{id:"事务的四大特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事务的四大特性","aria-hidden":"true"},"#"),i(" 事务的四大特性")],-1)),n("p",null,[l[178]||(l[178]=i("A原子性：事务是原子的，要么全部执行，要么全部不执行。原子性由undolog保证。也叫做回滚日志。用于记录数据被修改前的信息。可以提供回滚也可以用于MVCC。它不同于redolog，undolog是一种")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[175]||(l[175]=[i("逻辑日志")])),_:1}),l[179]||(l[179]=i("。可以认为当删除一条记录的时候，undolog记录一条新增记录，当更新一条记录的时候，它记录一条相反的更新操作。undolog在")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[176]||(l[176]=[i("事务执行时产生")])),_:1}),l[180]||(l[180]=i("，事务")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[177]||(l[177]=[i("提交时不会立即删除")])),_:1}),l[181]||(l[181]=i("，会用于MVCC。"))]),l[293]||(l[293]=n("p",null,"C一致性：事务执行前后数据是一致的。是由原子性隔离性持久性一起保证的。",-1)),l[294]||(l[294]=n("p",null,"I隔离性：事务之间是相互隔离的。数据库有不同的隔离级别，会产生不同的并发问题。隔离性是锁和MVCC保证的。",-1)),n("p",null,[l[187]||(l[187]=i("D持久性：事务一旦")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[182]||(l[182]=[i("提交或回滚")])),_:1}),l[188]||(l[188]=i("，都会持久化到磁盘中。持久性是由redolog保证的，也叫重做日志，记录的是事务提交时数据页的物理修改，用来实现事务的持久性。该日志文件由两部分组成：重做日志")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[183]||(l[183]=[i("buffer")])),_:1}),l[189]||(l[189]=i("（redolog buffer）在内存中。和重做日志")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[184]||(l[184]=[i("文件")])),_:1}),l[190]||(l[190]=i("（redolog file）在磁盘中，当事务提交之后会把所有修改信息都存在日志文件中，用于在")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[185]||(l[185]=[i("刷新脏页到磁盘")])),_:1}),l[191]||(l[191]=i("发生错误时，")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[186]||(l[186]=[i("恢复数据")])),_:1}),l[192]||(l[192]=i("使用。"))]),l[295]||(l[295]=t('<figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1654697927568-bd0e0def-e486-4f7a-b937-b93d58682265.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="并发事务问题" tabindex="-1"><a class="header-anchor" href="#并发事务问题" aria-hidden="true">#</a> 并发事务问题</h2><h3 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读" aria-hidden="true">#</a> 脏读</h3><p>一个事务读取到另一个事务未提交的数据。</p><h3 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读" aria-hidden="true">#</a> 不可重复读</h3><p>一个事务2次读取到的数据不一致。</p><p>在一个事务提交前读一次，提交后读一次，读到的不一样。</p><h3 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读" aria-hidden="true">#</a> 幻读</h3><p>2次数据总数变了。一个事务查询数据得到n条，另一个事务可能增加或者删除了几条数据，这样当第一个事务再进行查询时得到的数据发生了变化。</p><p>innodb在可重复读隔离级别就能防止幻读，原因是next-key lock，对间隙也会加锁，所以并发插入的时候会被阻塞，防止幻读。</p><h2 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别</h2><h3 id="读未提交" tabindex="-1"><a class="header-anchor" href="#读未提交" aria-hidden="true">#</a> 读未提交</h3><ol><li>限制两个数据不能同时修改。</li><li>修改数据时，事务未提交，其他事务是可以读的。（脏读，不可重复读，幻读）</li><li>锁 <ol><li>读不加锁。写加排他锁，事务提交释放锁。</li><li>一个事务写操作还没提交事务，其他事务能够读取到未提交的数据。但是其他事务也去写，会阻塞。说明读未提交在写的时候会加锁，而且在事务提交的时候释放锁。</li></ol></li></ol><h3 id="读已提交" tabindex="-1"><a class="header-anchor" href="#读已提交" aria-hidden="true">#</a> 读已提交</h3><ol><li>当前事务只能读取到其他事务提交的数据。</li><li>解决了脏读。（不可重复读，幻读）</li><li>锁和读mvcc <ol><li>读不加锁，写加行锁，事务提交释放锁。</li><li>其他事务读的时候利用MVCC读取到其他事务已提交的数据。</li><li>每次读操作都更新一遍readview，所以可能导致两次读的数据不一致。</li></ol></li></ol><h3 id="可重复读" tabindex="-1"><a class="header-anchor" href="#可重复读" aria-hidden="true">#</a> 可重复读</h3>',16)),n("ol",null,[l[202]||(l[202]=n("li",null,"限制读取数据时不能进行修改。",-1)),l[203]||(l[203]=n("li",null,"所以解决了重复读的问题。",-1)),l[204]||(l[204]=n("li",null,"但是读取数据时可以插入数据，所以会（幻读）。",-1)),n("li",null,[l[195]||(l[195]=i("锁 ")),n("ol",null,[n("li",null,[r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[193]||(l[193]=[i("读不加锁，写加next-key lock，解决幻读。")])),_:1})]),n("li",null,[r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[194]||(l[194]=[i("其他事务读取事务创建时的readview，所以不会发生不可重复读。")])),_:1})])])]),n("li",null,[l[201]||(l[201]=i("读MVCC ")),n("ol",null,[n("li",null,[r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[196]||(l[196]=[i("可重复读")])),_:1}),l[197]||(l[197]=i("隔离级别下是快照读。"))]),l[198]||(l[198]=n("li",null,"创建事务的时候创建一个readview快照。",-1)),l[199]||(l[199]=n("li",null,"事务执行期间都是用这一个快照，不会看到其他事务插入的数据的，所以不会发生幻读。",-1)),l[200]||(l[200]=n("li",null,[i("在当前读中，mysql通过next-key避免幻读。 "),n("ol",null,[n("li",null,"当前读就是读取最新数据。"),n("li",null,"select...lock in share mode, select... for update"),n("li",null,"或者增删改都进行当前读。"),n("li",null,"类似volatile，也就是读取最新值。")])],-1))])])]),l[296]||(l[296]=n("h3",{id:"串行化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#串行化","aria-hidden":"true"},"#"),i(" 串行化")],-1)),n("ol",null,[l[211]||(l[211]=n("li",null,[n("p",null,"所有事务是串行执行的。")],-1)),n("li",null,[r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[205]||(l[205]=[i("读表加读锁，写表加写锁，让事务的操作串行执行。")])),_:1})]),l[212]||(l[212]=n("li",null,[n("p",null,"事务执行很耗性能。")],-1)),n("li",null,[r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[206]||(l[206]=[i("可重复读")])),_:1}),l[207]||(l[207]=i("隔离级别下是快照读。"))]),l[213]||(l[213]=n("li",null,[n("p",null,"创建事务的时候创建一个readview快照。")],-1)),n("li",null,[n("p",null,[l[209]||(l[209]=i("事务执行期间都是用这一个快照，不会看到其他事务插入的数据的，所以不会发生幻读。因此")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[208]||(l[208]=[i("幻读")])),_:1}),l[210]||(l[210]=i("只在当前读中发生（当前读就是读取最新数据，加锁的select...lock in share mode, select... for update，或者增删改都进行当前读，类似volatile），也就是读取最新值。"))])])]),n("h2",q,[l[215]||(l[215]=n("a",{class:"header-anchor",href:"#mvcc","aria-hidden":"true"},"#",-1)),l[216]||(l[216]=i()),r(o,{style:{color:"rgb(77, 77, 77)"}},{default:d(()=>l[214]||(l[214]=[i("MVCC")])),_:1})]),l[297]||(l[297]=t('<p>m_ids:创建视图时当前数据库中活跃且未提交的事务的事务id列表。</p><p>creator_trx_id:创建该readview的事务id。</p><p>min_trx_id:创建readview时当前数据库中活跃且未提交事务的最小id。</p><p>max_trx_id:创建readview时当前数据库中应该给的下一个事务的id。</p><hr><p>每条数据有2个隐藏列：trx_id：事务id和回滚指针。</p><p>核心就2句话：</p><p>1、找到的数据trx_id和m_ids比较，如果不在m_ids，说明可读，否则都需要沿着版本链找。</p><p>2、读提交是每次读更新readview，可重复读是事务启动时创建readview不变。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1652600680214-c5a54bd2-5038-4086-a544-51969fb2ed52.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="·日志" tabindex="-1"><a class="header-anchor" href="#·日志" aria-hidden="true">#</a> ·日志</h1><h2 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log" aria-hidden="true">#</a> redo log</h2>',12)),n("ol",null,[l[219]||(l[219]=n("li",null,"redolog是innoDB引擎特有的；",-1)),l[220]||(l[220]=n("li",null,"redolog是物理日志，记录的是“在某个数据页上做了什么修改”；",-1)),l[221]||(l[221]=n("li",null,"redolog是循环写，空间固定。会用完会覆盖之前的日志。",-1)),n("li",null,[r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[217]||(l[217]=[i("redolog")])),_:1}),l[218]||(l[218]=i("是只会记录未刷盘的日志，已经刷盘的会从日志中删除，具有crash-safe能力。"))])]),l[298]||(l[298]=t('<h3 id="为什么binlog没有crash-safe" tabindex="-1"><a class="header-anchor" href="#为什么binlog没有crash-safe" aria-hidden="true">#</a> 为什么binlog没有crash safe</h3><ol><li>当数据库crash后，想要恢复数据时，binlog是无法恢复的。</li><li>虽然binlog有全量的日志，但innodb不能判断哪些数据已经刷盘，哪些数据还没有。</li><li>但redolog不一样，只要刷入磁盘的数据，都会从redolog中抹去。</li><li>数据库重启后，直接把redolog中的数据都恢复至内存就可以了。</li></ol><h2 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog" aria-hidden="true">#</a> binlog</h2><ol><li>用来实现主从同步，高可用。</li><li>binlog是Mysql的server层实现的，所有引擎都可以使用。</li><li>binlog是逻辑日志，记录的是sql语句，ddl（数据定义语言）语句和dml（数据操纵语言）语句。比如“给ID=2这一行的c字段加1”</li><li>binlog是可以追加写入的，保存的是全量日志。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>binlog作用：</p><ol><li>灾难时的数据恢复 。</li><li>mysql的主从复制，mysql8版本中， 默认binlog是开启的。</li></ol><p>参数：show variables like &#39;%log_bin%&#39;</p><p>binlog和redolog可能会导致io影响到性能，可以通过设置参数，建设binlog和redolog的写入次数，不是每次事务提交都写。可能会有丢失数据的风险。</p><h2 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log" aria-hidden="true">#</a> undo log</h2><p>事务回滚，实现MVCC</p>',10)),n("ol",null,[l[230]||(l[230]=n("li",null,"原子性由undolog保证。",-1)),l[231]||(l[231]=n("li",null,"也叫做回滚日志，可用于事务回滚。会记录数据被修改前的信息。",-1)),n("li",null,[l[224]||(l[224]=i("可以用于MVCC，undolog在")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[222]||(l[222]=[i("事务执行时产生")])),_:1}),l[225]||(l[225]=i("，事务")),r(o,{style:{"background-color":"#FFFB8F"}},{default:d(()=>l[223]||(l[223]=[i("提交时不会立即删除")])),_:1}),l[226]||(l[226]=i("，会用于MVCC。。"))]),n("li",null,[l[228]||(l[228]=i("是一种")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[227]||(l[227]=[i("逻辑日志")])),_:1}),l[229]||(l[229]=i("，当删除一条记录的时候，记录一条新增记录；当更新一条记录的时候，它记录一条相反的更新操作。"))])]),l[299]||(l[299]=n("h1",{id:"·锁",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#·锁","aria-hidden":"true"},"#"),i(" ·锁")],-1)),l[300]||(l[300]=n("h2",{id:"分类-特点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分类-特点","aria-hidden":"true"},"#"),i(" 分类/特点")],-1)),l[301]||(l[301]=n("p",null,"分类：",-1)),n("ol",null,[n("li",null,[r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[232]||(l[232]=[i("锁可以分为")])),_:1}),r(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:d(()=>l[233]||(l[233]=[i("共享锁")])),_:1}),r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[234]||(l[234]=[i("和")])),_:1}),r(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:d(()=>l[235]||(l[235]=[i("排他锁")])),_:1}),r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[236]||(l[236]=[i("。")])),_:1})]),n("li",null,[r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[237]||(l[237]=[i("按照加")])),_:1}),r(o,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:d(()=>l[238]||(l[238]=[i("锁粒度")])),_:1}),r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[239]||(l[239]=[i("分可以有行锁、表锁、gap锁、next-key lock。")])),_:1})])]),r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[240]||(l[240]=[i("myisam表级锁--select：表加读锁")])),_:1}),r(o,{style:{color:"rgb(51, 51, 51)"}},{default:d(()=>l[241]||(l[241]=[i(" --改：表加写锁")])),_:1}),l[302]||(l[302]=t('<p>innodb--select: mvcc不用加锁（但是serializable加行级读锁）</p><p>--改：行加写锁：①因为加锁是对索引加的，所以可能变成表锁。②范围可能会变成next-key lock</p><p>特点：</p><ol><li>加锁的话是在事务执行完毕时释放锁。单条update也是一个事务。</li><li>共享锁：也叫读锁，其他事务可以读，但不可以写。</li><li>排他锁：也叫写锁，其他事务不能读，也不能写。</li><li>表级锁：开销小，加锁比较快，锁的粒度大，并发度低，锁冲突的概率大。不会死锁。所以更适合以查询为主，并发用户小，少量更新。 <ol><li>意向锁：属于表锁。</li><li>意向共享锁IS：事务打算加行共享锁，需要先获取表的IS锁。</li><li>意向排他锁IX：事务给数据行加排他锁之前，需要先获取表的IX锁。</li></ol></li><li>行级锁：开销大，加锁慢，加锁粒度小，并发度较高，锁冲突的概率低。可能会发生死锁（锁是逐步获得的）。 <ol><li>行锁是给索引（索引项）加锁实现的，只有通过索引条件查询，才能使用行锁，否则使用表锁。</li></ol></li><li>next-key锁：使用范围条件查询或者更新时，符合条件的数据的索引会被加行锁，在范围内但是数据不存在的记录，叫做间隙，innodb也会对间隙加锁。比如 select * from table where id &gt;100,记录1-101，101符合条件会被加锁，大于101的间隙也会被加锁。 <ol><li>记录锁加在索引上。</li><li>间隙锁加在索引之间。</li></ol></li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1664328273916-90280925-110a-4368-927f-f3ef596c588f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h2><p>定义：</p><ol><li>当多用户并发读写数据时，产生多个事务同时存取数据的情况。</li><li>两个事务有一组冲突的锁，事务不能继续执行下去，会出现死锁。</li></ol><p>举例：</p><ol><li>用户A访问A表，然后又访问B表。用户B访问B表，然后访问A表。A和B会互相等待对方的锁，还持有原本持有的锁，会陷入僵持，也就死锁了。</li></ol><p>死锁：多个进程或者线程对共享资源争抢或者互相依赖，产生的一种不经过外力无法破除的一种现象。</p><p>四个必要条件：</p><p>互斥：资源是互斥访问的，如果被某个线程持有，其他线程只能等待。</p><p>请求和保持：发生阻塞时，当前持有的资源保持不放。</p><p>不可剥夺：当前进程未执行完时，所持有的资源不能被剥夺。</p><p>循环等待：进程之间循环等待资源。</p><p>破坏互斥条件：如果资源是共享资源，则不会发生死锁。但是有些资源是不允许共享访问的，比如键盘，可写文件，有些资源是可以共享访问的，比如只读文件和磁盘。所以破坏互斥条件只适合一部分资源。</p><p>破坏请求和保持条件：如果进程持有一部分资源且申请其他资源的时候由于它不会释放自己持有的资源，可能会发生死锁。可以在程序运行前把所有它需要的资源都分配给该进程，但是会造成资源的浪费。</p><p>破坏不可剥夺条件：方案一：当持有资源申请不到其他资源时，可以强迫其释放所持有的资源，需要时再次申请。方案二：当进程请求的资源被其他进程占有，由操作系统协调剥夺其他进程占有的资源。方案一是释放自己的，可能导致前期所做的工作失效。方案二是释放其他的，可能会导致其他进程前期所做的工作失效。</p><p>破坏循环等待条件：将资源按顺序编号，申请资源按顺序递增的方式申请。缺点是不易增加新的设备，用户编程麻烦。</p><h2 id="乐观锁-悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁-悲观锁" aria-hidden="true">#</a> 乐观锁/悲观锁</h2><p>1、版本号机制</p><p>一般是说在数据表中加上一个数据库版本号version字段，在表述数据被修改的次数，当数据被修改时，它的version会加一。</p><p>当线程A需要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才能更新，否则重试更新操作，直到更新成功。</p><p>库存超卖问题，库存就是个版本号。</p><p>2、CAS算法</p><p>cas是compare and swap比较并交换，有3个操作数，内存值V，预期值B，要替换的目标值A，CAS指令执行时，比较内存地址值V和预期值B是否相等，如果相等则将A复制给B，不相等则会循环比较知道相等，整个比较并赋值的操作是一个原子性的操作。</p><p>CAS缺点：</p><p>（1） 循环时间开销大，内存值V与预期值B不相等会一直循环比较知道相等。</p><p>（2）只能保证一个共享变量的原子操作</p><p>（3）如果一个变量V初次读取的时候值是A，并且在准备赋值的时候检查到它仍然是A值，但是这段时间不一定没有发生改变，如果它被修改成别的值，然后又改回了A，那CAS操作会认为它没有被修改过，这个问题就是CAS操作的“ABA”问题。</p><p>3、悲观锁</p><p>悲观锁是很悲观，每次拿数据都认为别人会修改，所以每次拿数据都会加锁。这样别人想拿数据会被阻塞直到获取到锁。</p><h2 id="两阶段锁" tabindex="-1"><a class="header-anchor" href="#两阶段锁" aria-hidden="true">#</a> 两阶段锁</h2><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1664329111936-c7e52360-4ba3-452b-9576-5114508709f8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个事务有两个更新语句，需要添加行锁，但并不是第一个更新执行完成后就释放锁，而是等事务都执行结束后才释放。</p><p>帮助：把影响并发度的锁尽量放后面，因为放前面它加锁后不释放可能会影响后面的运行。提高并发度。</p><h1 id="·sql" tabindex="-1"><a class="header-anchor" href="#·sql" aria-hidden="true">#</a> ·sql</h1><p>时间类型：datetime，timestamp，date</p>',39)),n("p",null,[l[243]||(l[243]=i("select ")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[242]||(l[242]=[i("no")])),_:1}),l[244]||(l[244]=i(", avg(score) from sc group by no;"))]),n("p",null,[l[246]||(l[246]=i("group by no就是no")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[245]||(l[245]=[i("都是1个")])),_:1}),l[247]||(l[247]=i("。"))]),l[303]||(l[303]=n("p",null,"no-score no-avg(score)",-1)),l[304]||(l[304]=n("p",null,"1--20 1---25",-1)),l[305]||(l[305]=n("p",null,"1--30 2---30",-1)),l[306]||(l[306]=n("p",null,"2--10",-1)),l[307]||(l[307]=n("p",null,"2--50",-1)),l[308]||(l[308]=n("p",null,"select *,row_number() over (partition by c_id order by s_score) from score;",-1)),n("p",null,[l[249]||(l[249]=i("partition by的字段都")),r(o,{style:{"background-color":"#FADB14"}},{default:d(()=>l[248]||(l[248]=[i("一样")])),_:1}),l[250]||(l[250]=i("，然后按照order by的排序，在给出row number。"))]),l[309]||(l[309]=t(`<figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1655452238021-1d58bee6-9969-4c0a-b9f9-0027e767b6c0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>select * ,row_number() over (partition by c_id,(case when s_score&gt;70 then 1 else 0 end) order by s_score) from score;</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1655452469160-c1a0161d-5008-499f-9b03-cff0811e00d2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查询连续7天登录</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1655453673423-30b3fe0b-a6d3-41f4-8174-503354f33a2d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">day</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> <span class="token keyword">date</span><span class="token punctuation">(</span>createtime<span class="token punctuation">)</span> <span class="token operator">-</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> createtime<span class="token punctuation">)</span> <span class="token keyword">day</span>
                  <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> name<span class="token punctuation">,</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> <span class="token string">&#39;%Y-%m-%d&#39;</span><span class="token punctuation">)</span> createtime
                        <span class="token keyword">from</span> table_name<span class="token punctuation">)</span> t1<span class="token punctuation">)</span> t2
<span class="token keyword">group</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const z=s(p,[["render",D],["__file","mysql.html.vue"]]);export{z as default};
