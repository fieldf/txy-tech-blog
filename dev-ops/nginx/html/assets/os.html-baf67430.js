import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as u,o as f,c as a,b as t,d as n,e as o,w as d,f as i}from"./app-9393c1ef.js";const e={},b={id:"进程状态的切换-生命周期",tabindex:"-1"},k={id:"进程终止方式",tabindex:"-1"},g={href:"https://www.cnblogs.com/wangshaowei/p/14358774.html",target:"_blank",rel:"noopener noreferrer"},F={id:"中断",tabindex:"-1"};function C(y,l){const r=u("font"),s=u("ExternalLinkIcon");return f(),a("div",null,[l[230]||(l[230]=t("h1",{id:"内存",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#内存","aria-hidden":"true"},"#"),n(" 内存")],-1)),l[231]||(l[231]=t("h2",{id:"虚拟内存",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#虚拟内存","aria-hidden":"true"},"#"),n(" 虚拟内存")],-1)),l[232]||(l[232]=t("p",null,"虚拟内存，就是虚拟出来的内存，可以把外存当做内存来使用，是为了解决程序运行时内存不足的问题。",-1)),t("p",null,[l[10]||(l[10]=n("每个程序拥有")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[0]||(l[0]=[n("自己的")])),_:1}),l[11]||(l[11]=n("地址空间，也就是虚拟内存地址。在编译期间，为变量")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[1]||(l[1]=[n("分配")])),_:1}),l[12]||(l[12]=n("一个虚拟地址。虚拟地址空间被分成多个固定大小的")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[2]||(l[2]=[n("页")])),_:1}),l[13]||(l[13]=n("。物理空间也就是内存空间，")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[3]||(l[3]=[n("也")])),_:1}),l[14]||(l[14]=n("被分成大小相同的页。在运行期间，内存管理单元MMU，用于获取虚拟地址对应的物理地址，是通过内存中的")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[4]||(l[4]=[n("页表")])),_:1}),l[15]||(l[15]=n("获取虚拟地址对应的实际内存物理地址，但是这个时候如果变量还")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[5]||(l[5]=[n("未分配")])),_:1}),l[16]||(l[16]=n("物理地址，MMU就会")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[6]||(l[6]=[n("查不到")])),_:1}),l[17]||(l[17]=n("它对应的物理地址是什么，此时发生了")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[7]||(l[7]=[n("缺页中断")])),_:1}),l[18]||(l[18]=n("。需要为它在内存上分配一块物理地址，并将该地址")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[8]||(l[8]=[n("写回页表")])),_:1}),l[19]||(l[19]=n("供以后使用。发生缺页中断时，若物理内存空间")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[9]||(l[9]=[n("满了")])),_:1}),l[20]||(l[20]=n("，需要将物理空间中的一部分数据和磁盘对换来腾出空间，称为页面置换，根据换出页面的不同有不同的页面置换算法。"))]),l[233]||(l[233]=t("p",null,"好处：",-1)),t("ol",null,[l[27]||(l[27]=t("li",null,"扩大地址空间。",-1)),t("li",null,[l[22]||(l[22]=n("虚存")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[21]||(l[21]=[n("共享")])),_:1}),l[23]||(l[23]=n("实现进程通信。不同进程使用同样代码，可以把自己虚拟内存映射过去，节省内存。"))]),t("li",null,[l[25]||(l[25]=n("内存")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[24]||(l[24]=[n("保护")])),_:1}),l[26]||(l[26]=n("：进程运行在各自的虚拟内存地址空间，互不干扰。"))]),l[28]||(l[28]=t("li",null,"虚拟内存分配连续空间，不需要实际物理内存连续。",-1))]),l[234]||(l[234]=t("p",null,"缺点：",-1)),l[235]||(l[235]=t("ol",null,[t("li",null,"页表需要额外的内存"),t("li",null,"地址转换增加了指令执行时间。"),t("li",null,"页面换入换出需要磁盘IO"),t("li",null,"按页存取，如果不足一页也是一页，浪费内存。")],-1)),l[236]||(l[236]=t("h3",{id:"分页分段",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#分页分段","aria-hidden":"true"},"#"),n(" 分页分段")],-1)),o(r,{style:{"background-color":"#FA8C16"}},{default:d(()=>l[29]||(l[29]=[n("分页：")])),_:1}),l[237]||(l[237]=t("p",null,"虚拟内存被分割成大小固定的页，称为虚拟页VP，物理内存也被分成大小固定的页，叫物理页PP，虚拟页的大小和物理页的大小相同，每一页和物理内存进行映射。虚拟内存包括未分配虚拟地址的、已分配未缓存到内存的、已分配缓存到内存的。分页对程序员是透明的，分段是需要程序员显示的划分每个段。",-1)),o(r,{style:{"background-color":"#FA8C16"}},{default:d(()=>l[30]||(l[30]=[n("分段：")])),_:1}),l[238]||(l[238]=n()),t("p",null,[l[32]||(l[32]=n("分段是把地址空间划分为多个段，为每个程序都能划分为")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[31]||(l[31]=[n("独立的地址空间")])),_:1}),l[33]||(l[33]=n("有助于共享和保护。对于分页，页面大小是固定的，存储一些动态增长的数据时可能会发生覆盖，但是分段每个段的大小可以不同而且可以动态增长，所以相较于分页有这样的一个优点。"))]),o(r,{style:{"background-color":"#FA8C16"}},{default:d(()=>l[34]||(l[34]=[n("段页式：")])),_:1}),l[239]||(l[239]=n()),l[240]||(l[240]=t("p",null,"程序的地址空间划分为多个拥有独立地址的段，每个段上的地址空间划分成大小相同的页，这样**既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能，实现更大的内存地址空间。**分页是一维的，分段是二维的。",-1)),o(r,{style:{"background-color":"#FA8C16"}},{default:d(()=>l[35]||(l[35]=[n("快表：")])),_:1}),l[241]||(l[241]=i(' <p>快表是为了加快根据虚拟地址查找物理地址的速度，建立在虚拟地址和内存页表之间的一个缓存Cache，当需要查询物理地址时，先访问快表，若快表中存在，则直接访问内存地址数据，当快表中不存在，再去访问内存页面，并把内存中对应的物理地址写回到快表中，若快表满了，则会通过一定的置换算法进行置换。</p><h3 id="页面置换算法" tabindex="-1"><a class="header-anchor" href="#页面置换算法" aria-hidden="true">#</a> 页面置换算法</h3><ol><li>最佳替换（OPT,Optimal replacement algorithm）<br> 是一种理论上的算法，将置换未来最长时间不会访问到的页面。实际中并不会知道未来最长不会被访问到的页面是什么。</li><li>先进先出（FIFO）<br> 字面意思。但是容易将频繁访问的对象置换出去，而导致缺页率上升。</li><li>最近最久未使用（LRU,Least Recently Used）<br> 将置换最近最久未使用的页面，维护一个访问链表，新访问的页面添加到链表的头部，那么链表的尾部就是最近最久未使用的页面。但是每次访问都需要更新链表，维护的代价较高。</li><li>最近未使用（NRU,Not Recently Used）<br> 每个页面有2个状态位R、M，R为1表示被访问，M为1表示最近被修改，R会定时清0。优先置换被修改而不是被访问的页面，也就是（0,1）要比（1,0）先被置换。</li><li>第二次机会算法<br> 单纯的先进先出可能会将频繁访问的页面置换出去，所以这里有一个机制，就是被访问的页面设置一个状态位R=1，当需要置换时从链表头部开始，若该元素的R为0，说明他是先进来的又没有被访问那么就直接把它置换掉。但是如果它的R是1，那么把R置为0并放到链表尾部，重新从链表头部寻找需要被置换的页面。</li><li>时钟（Clock）<br> 第二次机会算法需要在链表中移动页面，降低了效率。所以时钟算法将链表连成了一个环，指针指向最老的页面，当需要置换时，如果R=0，直接置换，如果R=1，把R置为0，指针后移。</li></ol><h2 id="os程序内存结构" tabindex="-1"><a class="header-anchor" href="#os程序内存结构" aria-hidden="true">#</a> OS程序内存结构</h2><p>操作系统中程序的内存结构：</p><p>BSS段：未初始化数据区。存放程序中未初始化的全局变量和静态变量。静态分配：程序结束后由系统自动释放资源。</p><p>data段：存放已初始化的全局变量。静态分配。</p><p>代码段：存放程序执行代码的区域。</p><p>text段和data段编译时已经分配了空间，BSS段不占用可执行文件大小。</p><p>栈区：存放函数的参数值、局部变量等。</p><p>堆区：用于动态分配内存。</p><p>空闲内存管理方式</p><p>位图和空闲链表</p><h1 id="·进程和线程" tabindex="-1"><a class="header-anchor" href="#·进程和线程" aria-hidden="true">#</a> ·进程和线程</h1><h2 id="进程状态" tabindex="-1"><a class="header-anchor" href="#进程状态" aria-hidden="true">#</a> 进程状态</h2>',16)),t("h3",b,[l[37]||(l[37]=t("a",{class:"header-anchor",href:"#进程状态的切换-生命周期","aria-hidden":"true"},"#",-1)),l[38]||(l[38]=n()),o(r,{style:{color:"#000000"}},{default:d(()=>l[36]||(l[36]=[n("进程状态的切换（生命周期）")])),_:1})]),t("ul",null,[t("li",null,[o(r,{style:{color:"#000000"}},{default:d(()=>l[39]||(l[39]=[n("就绪状态（ready）：可运行，但其他进程正在运行，等待被调度。")])),_:1})]),t("li",null,[o(r,{style:{color:"#000000"}},{default:d(()=>l[40]||(l[40]=[n("运行状态（running）：正在占用CPU时间片运行。")])),_:1})]),t("li",null,[o(r,{style:{color:"#000000"}},{default:d(()=>l[41]||(l[41]=[n("阻塞状态（waiting）：不具备运行条件，等待资源")])),_:1})])]),l[242]||(l[242]=t("figure",null,[t("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1657084830403-000c9e16-1eee-42ca-86ce-0cd5ef72f8bc.png",alt:"进程状态",tabindex:"0",loading:"lazy"}),t("figcaption",null,"进程状态")],-1)),o(r,{style:{color:"#000000"}},{default:d(()=>l[42]||(l[42]=[n("就绪态和运行态可以相互转换。就绪状态的进程通过调度算法获得 CPU 时间，会转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态。")])),_:1}),o(r,{style:{color:"#000000"}},{default:d(()=>l[43]||(l[43]=[n("阻塞状态是缺少运行需要的资源从运行状态转换而来，但是该资源不包括 CPU 时间。")])),_:1}),o(r,{style:{color:"#000000"}},{default:d(()=>l[44]||(l[44]=[n("新建态：分配资源和空间。设置进程为就绪态。")])),_:1}),o(r,{style:{color:"#000000"}},{default:d(()=>l[45]||(l[45]=[n("终止态：等待操作系统或者相关进程进行善后处理。回收资源并被系统删除。")])),_:1}),t("h3",k,[l[47]||(l[47]=t("a",{class:"header-anchor",href:"#进程终止方式","aria-hidden":"true"},"#",-1)),l[48]||(l[48]=n()),o(r,{style:{color:"#000000"}},{default:d(()=>l[46]||(l[46]=[n("进程终止方式")])),_:1})]),t("ol",null,[t("li",null,[l[50]||(l[50]=n("正常退出（")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[49]||(l[49]=[n("自愿")])),_:1}),l[51]||(l[51]=n("） ")),l[52]||(l[52]=t("ol",null,[t("li",null,"编译器完成程序编译后，会执行一个系统调用告诉操作系统完成了工作。"),t("li",null,"点×")],-1))]),t("li",null,[l[54]||(l[54]=n("错误退出（")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[53]||(l[53]=[n("自愿")])),_:1}),l[55]||(l[55]=n("） ")),l[56]||(l[56]=t("ol",null,[t("li",null,"例如用户执行编译某个文件，但这个文件不存在，就会退出。")],-1))]),t("li",null,[l[58]||(l[58]=n("严重错误（")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[57]||(l[57]=[n("非自愿")])),_:1}),l[59]||(l[59]=n("） ")),l[60]||(l[60]=t("ol",null,[t("li",null,"进程执行过程中发生错误。如除数为0。")],-1))]),t("li",null,[l[62]||(l[62]=n("被其他进程杀死（")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[61]||(l[61]=[n("非自愿")])),_:1}),l[63]||(l[63]=n("） ")),l[64]||(l[64]=t("ol",null,[t("li",null,"某进程执行系统调用告诉操作系统杀死某进程。")],-1))])]),l[243]||(l[243]=t("h2",{id:"进程和线程的区别",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#进程和线程的区别","aria-hidden":"true"},"#"),n(" 进程和线程的区别？")],-1)),l[244]||(l[244]=t("h3",{id:"区别",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#区别","aria-hidden":"true"},"#"),n(" 区别")],-1)),l[245]||(l[245]=t("p",null,"进程是正在执行的程序的实例，web程序。线程是属于进程的，相当于进程的单条流向，进程是资源调度的基本单位，线程是CPU调度的基本单位，比如浏览器看成是进程，那么一个tab页可以看做线程。",-1)),t("p",null,[l[67]||(l[67]=n("操作系统是负责管理运行中的进程的，负责为每个进程分配特定的时间片来占用")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[65]||(l[65]=[n("CPU")])),_:1}),l[68]||(l[68]=n("，并且为每个进程分配一定的")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[66]||(l[66]=[n("资源")])),_:1}),l[69]||(l[69]=n("。每个进程有一个PCB是一个用来描述进程的数据结构，包含一些基本信息和运行状态。操作系统为了跟踪进程的状态，维护了一个进程表，列出了每个进程的状态和每个进程占有的资源。"))]),l[246]||(l[246]=t("p",null,"进程包括，地址空间、全局变量，打开的文件，子进程。",-1)),l[247]||(l[247]=t("p",null,"线程包括，程序计数器，堆栈，寄存器，状态信息。",-1)),t("p",null,[l[72]||(l[72]=t("strong",null,"创建线程",-1)),l[73]||(l[73]=n("的开销比进程小的多，因为只需要一些")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[70]||(l[70]=[n("堆栈指针")])),_:1}),l[74]||(l[74]=n("和")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[71]||(l[71]=[n("程序计数器")])),_:1}),l[75]||(l[75]=n("。创建进程分配新的地址空间，数据、资源等，开销比较大。"))]),l[248]||(l[248]=t("h3",{id:"上下文切换",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#上下文切换","aria-hidden":"true"},"#"),n(" 上下文切换")],-1)),t("p",null,[l[78]||(l[78]=n("对于单核CPU来说，在某一时刻只能执行一条CPU指令，上下文切换就是把")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[76]||(l[76]=[n("CPU资源")])),_:1}),l[79]||(l[79]=n("从一个进程分配给")),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[77]||(l[77]=[n("另一个")])),_:1}),l[80]||(l[80]=n("进程的机制。那么这样从用户角度看，就好像很多个进程在一起执行一样。切换过程中需要保存当前进程的状态，比如内存空间的指针，执行到哪条指令等，再读入下一个进程，然后执行。线程不像进程那样具有很强的独立性，线程之间是会共享数据。上下文切换会导致用户态和内核态的切换。"))]),t("p",null,[l[82]||(l[82]=n("这篇文章是一片结合上下文切换+IO模型+用户内核切换之间关系的文章。等整理完IO模型以后再来看看整理一下。")),t("a",g,[l[81]||(l[81]=n("https://www.cnblogs.com/wangshaowei/p/14358774.html")),o(s)])]),l[249]||(l[249]=i('<p>上下文切换的原因：(当前线程阻塞会让出cpu)</p><ol><li>系统CPU调度。</li><li>遇到I/O阻塞，挂起当前任务，调度下一个。</li><li>当前任务没有抢到锁。</li><li>线程执行sleep等方法。</li><li>硬件中断。</li></ol><h3 id="用户态、内核态" tabindex="-1"><a class="header-anchor" href="#用户态、内核态" aria-hidden="true">#</a> 用户态、内核态</h3><p>用户态和内核态是操作系统的两种运行状态。内核态的cpu可以访问任何数据，包括外围设备如网卡、硬盘等。用户态：用户态的cpu只能受限的访问内存。用户进程是运行在用户态的，但是权限有限，一些重要的操作需要内核态才能去做。比如磁盘读取数据、键盘键入。操作系统执行系统调用可以切换到内核态。从用户到内核叫trap进内核，也叫陷阱指令。</p><p>内核：内核是一个计算机程序，是操作系统的核心，可以控制操作系统所有的内容。</p><h2 id="进程通信" tabindex="-1"><a class="header-anchor" href="#进程通信" aria-hidden="true">#</a> 进程通信</h2><p>进程同步就是控制多个进程按一定顺序执行。进程通信是进程之间传输信息，每个进程有自己的用户地址空间，一个进程的全局变量，其他进程是看不到的，所以需要进程通信。</p><p>管道：匿名管道，调用pipe函数创建，只支持半双工，只能在父子进程中使用。命名管道没有父子进程这样的限制。</p><p>消息队列：是一种间接的，生产者向队列中添加数据，消费者从中取数据。</p><p>信号量：是一个计数器，为多个进程或者多线程提供对共享变量的访问。</p><p>信号：发送信号通知进程某个事件已经发生。</p><p>共享内存：多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以速度很快。</p><p>Socket：用于不同主机间进程通信。</p><p><strong>线程通信：</strong></p><p>Synchronized</p><p>While轮询</p><p>Wait/notify</p><h2 id="进程调度算法" tabindex="-1"><a class="header-anchor" href="#进程调度算法" aria-hidden="true">#</a> 进程调度算法</h2><p>进程调度算法：先来先服务FCFS，短作业优先SJF，时间片轮转，高响应比优先，优先级调度，多级反馈队列。</p><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>',21)),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[83]||(l[83]=[n("先来先服务")])),_:1}),l[250]||(l[250]=n("first-come first-serverd（FCFS）")),l[251]||(l[251]=t("p",null,"按照请求的顺序进行调度。",-1)),l[252]||(l[252]=t("p",null,"有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。",-1)),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[84]||(l[84]=[n("短作业优先")])),_:1}),l[253]||(l[253]=n(" shortest job first（SJF）")),l[254]||(l[254]=t("p",null,"按运行时间最短的顺序进行调度。",-1)),l[255]||(l[255]=t("p",null,"可能会导致长作业饥饿，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。",-1)),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[85]||(l[85]=[n("最短剩余时间优先")])),_:1}),l[256]||(l[256]=n(" shortest remaining time next（SRTN）")),l[257]||(l[257]=t("p",null,"按估计剩余时间最短的顺序进行调度。",-1)),l[258]||(l[258]=t("p",null,"交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。",-1)),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[86]||(l[86]=[n("时间片轮转")])),_:1}),l[259]||(l[259]=n("算法")),l[260]||(l[260]=t("p",null,"将所有就绪进程按 FCFS （先来先服务） 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。",-1)),l[261]||(l[261]=t("p",null,"的效率和时间片的大小有很大关系。因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。",-1)),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[87]||(l[87]=[n("优先级调度")])),_:1}),l[262]||(l[262]=t("p",null,"为每个进程分配一个优先级，按优先级进行调度。",-1)),l[263]||(l[263]=t("p",null,"为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。",-1)),o(r,{style:{"background-color":"#FADB14"}},{default:d(()=>l[88]||(l[88]=[n("多级反馈队列调度算法")])),_:1}),l[264]||(l[264]=i('<p>“多级”在于有多个不同优先级的队列，“反馈”在于如果有进程加入优先级高的队列时立即停止当前任务，转去执行优先级高的队列中进程，上述过程循环调度就形成多级反馈队列调度算法。</p><p>如果一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。</p><p>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。</p><p>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p><p>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h2><p>死锁：多个进程或者线程对共享资源争抢或者互相依赖，产生的一种不经过外力无法破除的一种现象。</p><p>四个必要条件：</p><p>互斥：资源是互斥访问的，如果被某个线程持有，其他线程只能等待。</p><p>请求和保持：发生阻塞时，当前持有的资源保持不放。</p><p>不可剥夺：当前进程未执行完时，所持有的资源不能被剥夺。</p><p>循环等待：进程之间循环等待资源。</p><p>解决死锁：</p><ol><li><p>鸵鸟策略</p></li><li><p>死锁检测与恢复</p></li><li><p>死锁预防</p></li><li><p>死锁避免</p></li></ol><p>鸵鸟策略就是发生死锁时不去管他，因为处理死锁的代价很高，反而不处理会带来更高的性能，当死锁不易发生或者产生死锁对用户的影响不大时采取这种策略。</p><p>死锁检测和恢复：</p><p>死锁检测算法：深度搜索进程资源有向图，如果进程资源有向图中存在环路，表明发生死锁，检测方式是dfs，对搜索的节点做标记，若遍历到存在标记的节点，表明有向图中存在环路，会发生死锁。</p><p>第二种死锁检测算法是标记法：向量E代表资源总数，向量A代表剩余资源，矩阵C代表各进程持有资源数，矩阵R代表各进程要请求的资源数，R中找到某个进程请求的资源数小于剩余资源，标记该进程，意味着该进程可以请求到自己需要的资源，之后释放持有资源，将C中该进程持有的资源加到剩余资源A中，完成释放资源，直到最后如果R中存在没有被标记的进程代表会发生死锁。</p><p>死锁恢复算法：资源剥夺法，进程回滚法，杀死进程。</p><p>死锁预防：</p><p>破坏互斥条件：如果资源是共享资源，则不会发生死锁。但是有些资源是不允许共享访问的，比如键盘，可写文件，有些资源是可以共享访问的，比如只读文件和磁盘。所以破坏互斥条件只适合一部分资源。</p><p>破坏请求和保持条件：如果进程持有一部分资源且申请其他资源的时候由于它不会释放自己持有的资源，可能会发生死锁。可以在程序运行前把所有它需要的资源都分配给该进程，但是会造成资源的浪费。</p><p>破坏不可剥夺条件：方案一：当持有资源申请不到其他资源时，可以强迫其释放所持有的资源，需要时再次申请。方案二：当进程请求的资源被其他进程占有，由操作系统协调剥夺其他进程占有的资源。方案一是释放自己的，可能导致前期所做的工作失效。方案二是释放其他的，可能会导致其他进程前期所做的工作失效。</p><p>破坏循环等待条件：将资源按顺序编号，申请资源按顺序递增的方式申请。缺点是不易增加新的设备，用户编程麻烦。</p><p>死锁避免：</p><p>先说一下安全状态，安全状态就是现在进程占有的资源，请求的资源，剩余的资源，进程申请资源并释放，能够保证最后所有的进程都执行，那么该状态就是安全状态。</p><p>银行家算法：思想就是为进程分配资源，分配以后是否为安全状态，如果是就分配，否则就不分配，直到所有进程满足资源的申请条件，就不会发生死锁。并且会产生一个对应的安全序列，也就是进程分配资源的顺序。</p><h1 id="·io模型" tabindex="-1"><a class="header-anchor" href="#·io模型" aria-hidden="true">#</a> ·IO模型</h1><h2 id="io模型" tabindex="-1"><a class="header-anchor" href="#io模型" aria-hidden="true">#</a> IO模型</h2><p>IO模型：</p>',30)),t("p",null,[l[96]||(l[96]=n("假设我们两个主机上的应用进程进行通信，")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[89]||(l[89]=[n("A应用向B应用发送一条消息")])),_:1}),l[97]||(l[97]=n("，")),o(r,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[90]||(l[90]=[n("应用A")])),_:1}),l[98]||(l[98]=n("把数据")),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[91]||(l[91]=[n("发送")])),_:1}),l[99]||(l[99]=n("到内核的")),o(r,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[92]||(l[92]=[n("TCP缓冲区")])),_:1}),l[100]||(l[100]=n("，TCP缓冲区把数据发送到网络上，然后经过网络的传输，到达接收方主机的")),o(r,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[93]||(l[93]=[n("TCP接收缓冲区")])),_:1}),l[101]||(l[101]=n("，然后")),o(r,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[94]||(l[94]=[n("应用B")])),_:1}),l[102]||(l[102]=n("再从接收缓冲区")),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[95]||(l[95]=[n("读取")])),_:1}),l[103]||(l[103]=n("自己的数据。"))]),l[265]||(l[265]=t("h3",{id:"阻塞io",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#阻塞io","aria-hidden":"true"},"#"),n(" 阻塞IO")],-1)),t("p",null,[l[107]||(l[107]=n("应用B发起recvfrom系统调用准备读取数据，在从TCP接收缓冲区中拿数据的时候，接收缓冲区可能")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[104]||(l[104]=[n("还没有准备好")])),_:1}),l[108]||(l[108]=n("，应用B")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[105]||(l[105]=[n("阻塞")])),_:1}),l[109]||(l[109]=n("的等待，直到TCP接收缓冲区中的数据准备好了，拿到数据以后再从TCP接收缓冲区也就是内核")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[106]||(l[106]=[n("拷贝")])),_:1}),l[110]||(l[110]=n("到应用进程用户空间再返回。也就是从进程调用到返回这段时间都是阻塞的，称为阻塞IO。"))]),l[266]||(l[266]=t("p",null,"例如data=socket.read();如果内核数据没有就绪，Socket线程就会一直阻塞在read()中等待内核数据就绪。",-1)),l[267]||(l[267]=t("h3",{id:"非阻塞io",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#非阻塞io","aria-hidden":"true"},"#"),n(" 非阻塞IO")],-1)),t("p",null,[l[113]||(l[113]=n("非阻塞IO就是应用进程B发起系统调用读取数据，如果TCP缓冲区也就是内核数据还没有准备好，会")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[111]||(l[111]=[n("直接返回")])),_:1}),l[114]||(l[114]=n("一个_EWOULDBLOCK_错误，应用进程不用一直等待，但是要")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[112]||(l[112]=[n("不断的调用")])),_:1}),l[115]||(l[115]=n("recvfrom请求，直到内核数据准备好为止，准备好以后再从内核拷贝到用户空间。返回成功提示。也就是发起recvfrom系统调用不会阻塞进程，而是立即返回，但是需要进行忙等，用轮询的方式询问数据是否准备好。"))]),l[268]||(l[268]=i(`<p>比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token operator">=</span>socket<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取并处理</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 内核未就绪，处理其他任务。</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="io多路复用" tabindex="-1"><a class="header-anchor" href="#io多路复用" aria-hidden="true">#</a> IO多路复用</h3><p>多线程并发编程用的较多，例如Java NIO就是基于IO多路复用</p>`,4)),t("p",null,[l[123]||(l[123]=n("在并发的环境下，可能有N个人向应用B发送消息，刚才说的那两种IO模型需要我们")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[116]||(l[116]=[n("创建多个线程")])),_:1}),l[124]||(l[124]=n("去读取对应的数据，每个线程都会发起recvfrom系统调用去")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[117]||(l[117]=[n("读取")])),_:1}),l[125]||(l[125]=n("数据，这个时候假设我们并发的规模很大，也就是说应用B需要创建很多的线程去读取数据，对于非阻塞IO模型来说，这些线程需要不断的向内核发送recvfrom系统调用来读取数据。我们的系统可能没办法")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[118]||(l[118]=[n("创建出这么多线程")])),_:1}),l[126]||(l[126]=n("，而且严重")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[119]||(l[119]=[n("浪费系统资源")])),_:1}),l[127]||(l[127]=n("。IO多路复用就可以解决这个问题，解决的思路就是采用1个或者多个线程")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[120]||(l[120]=[n("监控多个网络请求")])),_:1}),l[128]||(l[128]=n("，也就是fd文件描述符，linux系统把所有")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[121]||(l[121]=[n("网络请求用fd")])),_:1}),l[129]||(l[129]=n("来标识。这样就可以只用一个或者几个线程去做")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[122]||(l[122]=[n("询问内核数据状态")])),_:1}),l[130]||(l[130]=n("的操作，也就是监视多个描述符，当数据准备就绪了再分配对应的线程去读取数据，这样就可以节省大量的线程资源。"))]),t("p",null,[l[132]||(l[132]=n("IO多路复用是")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[131]||(l[131]=[n("select、poll、epoll")])),_:1}),l[133]||(l[133]=n("来监控fd。"))]),t("p",null,[l[139]||(l[139]=n("Select：select会阻塞程序，由内核")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[134]||(l[134]=[n("轮询")])),_:1}),l[140]||(l[140]=n("多个fd，当有fd准备就绪了，select返回。然后应用进程分配线程调用")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[135]||(l[135]=[n("recvfrom")])),_:1}),l[141]||(l[141]=n("读取数据。支持跨平台，缺点是调用select需要把fd集合从用户态拷贝到内核态，需要通过")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[136]||(l[136]=[n("遍历")])),_:1}),l[142]||(l[142]=n("fdset，来找到")),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[137]||(l[137]=[n("就绪")])),_:1}),l[143]||(l[143]=n("的fd；第二就是单线程监控的文件描述符")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[138]||(l[138]=[n("数量")])),_:1}),l[144]||(l[144]=n("有限制1024；"))]),t("p",null,[l[146]||(l[146]=n("Poll：描述fd集合的方式不同，poll使用")),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[145]||(l[145]=[n("pollfd指针")])),_:1}),l[147]||(l[147]=n("，而不是fd_set结构，链式的没有fd最大连接数限制。轮询的缺点：很多时候就绪状态的fd可能很少，那么轮询的效率也比较低。"))]),t("p",null,[l[150]||(l[150]=n("Epoll：查看可读写事件时epoll采用")),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[148]||(l[148]=[n("事件驱动")])),_:1}),l[151]||(l[151]=n("避免轮询，当")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[149]||(l[149]=[n("事件")])),_:1}),l[152]||(l[152]=n("准备好了以后，内核会采用回调机制通知应用进程。不需要轮询获取准备好的数据。"))]),l[269]||(l[269]=t("p",null,"3个api，epoll_create(int size)，创建一个epoll对象，传回它的id，size是告诉它监听的数目多大，并不是限制fd的个数，而是对内核初始分配数据结构的一个建议。Epoll_ctl，事件注册函数，把需要监听的fd或者事件交给epoll对象，就是注册一个fd，并且为每个fd指定一个回调函数，当某个fd准备就绪，把就绪的fd加入一个就绪的队列。Epoll_wait：等待，就绪队列中有没有就绪的fd，如果有就唤醒就绪队列上的等待者，然后调用回调函数。当注册的事件被触发时会得到通知。",-1)),l[270]||(l[270]=t("h3",{id:"信号驱动io模型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#信号驱动io模型","aria-hidden":"true"},"#"),n(" 信号驱动IO模型")],-1)),t("p",null,[l[158]||(l[158]=n("思想就是，前面说的IO多路复用需要select去轮询监控多个fd，信号驱动的思想就是应用进程发起")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[153]||(l[153]=[n("系统调用")])),_:1}),l[159]||(l[159]=n("等你内核数据准备好了就通知我这样的一种思想，通过系统调用")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[154]||(l[154]=[n("sigaction")])),_:1}),l[160]||(l[160]=n("执行信号处理函数，请求会立即返回，")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[155]||(l[155]=[n("当数据准备就绪")])),_:1}),l[161]||(l[161]=n("了，就会生成对应的")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[156]||(l[156]=[n("SIGIO")])),_:1}),l[162]||(l[162]=n("信号，通知应用进程，分配对应的线程去")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[157]||(l[157]=[n("调用recvfrom读取数据")])),_:1}),l[163]||(l[163]=n("。"))]),l[271]||(l[271]=t("h3",{id:"异步io",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#异步io","aria-hidden":"true"},"#"),n(" 异步IO")],-1)),t("p",null,[l[169]||(l[169]=n("不管是IO多路复用还是异步IO，读取数据总是要发起")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[164]||(l[164]=[n("两阶段请求")])),_:1}),l[170]||(l[170]=n("，第一次发送")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[165]||(l[165]=[n("select")])),_:1}),l[171]||(l[171]=n("请求，询问数据是否准备好，第二步再发起")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[166]||(l[166]=[n("recvfrom")])),_:1}),l[172]||(l[172]=n("请求读取数据。异步IO就是应用只需要向内核发送")),o(r,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[167]||(l[167]=[n("一个read请求")])),_:1}),l[173]||(l[173]=n("，告诉内核要读取数据然后立即返回，也就是内核数据准备就绪，内核会主动把数据从")),o(r,{style:{"background-color":"#D3F5F0"}},{default:d(()=>l[168]||(l[168]=[n("内核拷贝到用户空间")])),_:1}),l[174]||(l[174]=n("。操作都完成之后，内核会发起一个通知告诉应用进程。"))]),l[272]||(l[272]=i('<p>BIO：ServerSocket</p><p>NIO：ServerSocketChannel</p><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h2><h3 id="java-io" tabindex="-1"><a class="header-anchor" href="#java-io" aria-hidden="true">#</a> Java.io</h3><p>Java.io包中5个类是File、OutputStream、InputStream、Writer、Reader，1个接口是Serializable。</p><h3 id="java-nio" tabindex="-1"><a class="header-anchor" href="#java-nio" aria-hidden="true">#</a> Java NIO</h3><p>定义：</p><ol><li>Java NIO的实现主要涉及三大核心内容：Selector(选择器)、Channel(通道)和Buffer(缓冲区)。</li></ol><p>特点：</p><ol><li>数据从Channel读取到Buffer中。</li><li>或者从Buffer写入Channel中。</li></ol><p>区别：</p><ol><li>传统I/O基于数据流进行I/O读写。阻塞。</li><li>NIO基于Channel和Buffer进行I/O读写。非阻塞。</li></ol><h4 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> selector</h4><p>作用：</p><ol><li>一个线程监听多个Channel的事件，比如连接打开或数据到达。</li></ol><h4 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h4><p>定义：</p><ol><li>和I/O中的Stream（流）类似，只不过Stream是单向的。</li><li>而Channel是双向的，既可以用来读，也可以用来写。</li></ol><p>实现：</p><ol><li>FileChannel、DatagramChannel、SocketChannel、ServerSocketChannel。</li><li>文件I/O、UDP、TCP I/O的Socket Client、Socket Server</li></ol><h4 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h4><p>定义：</p><ol><li>Buffer是一个容器，内部通过连续的字节数组存储I/O上的数据。</li><li>Channel对数据读取和写入需要经过Buffer。</li></ol><p>流程：客户端-&gt;服务端</p><ol><li>客户端把输入写入Buffer。</li><li>将Buffer中的数据写道服务端对应的Channel。</li><li>服务端通过Channel将数据读取到服务端Buffer。</li><li>然后从Buffer读取数据并处理。</li></ol><h2 id="零拷贝" tabindex="-1"><a class="header-anchor" href="#零拷贝" aria-hidden="true">#</a> 零拷贝</h2><h3 id="传统io流程" tabindex="-1"><a class="header-anchor" href="#传统io流程" aria-hidden="true">#</a> 传统IO流程</h3>',27)),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[175]||(l[175]=[n("用户应用进程")])),_:1}),l[273]||(l[273]=n("调用")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[176]||(l[176]=[n("read")])),_:1}),l[274]||(l[274]=n("函数，向操作系统发起IO调用，从用户态切换到内核态。")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[177]||(l[177]=[n("DMA")])),_:1}),l[275]||(l[275]=n("控制器把数据从磁盘读取到内核缓冲区。")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[178]||(l[178]=[n("CPU")])),_:1}),l[276]||(l[276]=n("把内核缓存区的数据拷贝到用户应用缓冲区，上下文切换从内核态转为用户态，read函数返回。")),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[179]||(l[179]=[n("用户应用进程")])),_:1}),l[277]||(l[277]=n("通过")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[180]||(l[180]=[n("write")])),_:1}),l[278]||(l[278]=n("函数，发起IO调用，上下文从用户态转为内核态。")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[181]||(l[181]=[n("CPU")])),_:1}),l[279]||(l[279]=n("将应用缓冲区的数据拷贝到socket缓冲区，")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[182]||(l[182]=[n("DMA")])),_:1}),l[280]||(l[280]=n("控制器把数据从socket缓冲区拷贝到网卡设备，上下文从内核态切换回用户态，write函数返回。")),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[183]||(l[183]=[n("传统的IO读写流程包括4次上下文切换和4次数据拷贝。")])),_:1}),l[281]||(l[281]=t("h3",{id:"mmap-write实现的零拷贝",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mmap-write实现的零拷贝","aria-hidden":"true"},"#"),n(" Mmap+write实现的零拷贝")],-1)),t("p",null,[l[186]||(l[186]=n("Mmap使用了虚拟内存，把")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[184]||(l[184]=[n("内核空间")])),_:1}),l[187]||(l[187]=n("和")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[185]||(l[185]=[n("用户空间")])),_:1}),l[188]||(l[188]=n("的虚拟地址映射到同一个物理地址，从而减少了数据拷贝次数。"))]),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[189]||(l[189]=[n("用户进程")])),_:1}),l[282]||(l[282]=n("通过")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[190]||(l[190]=[n("mmap")])),_:1}),l[283]||(l[283]=n("方法向操作系统内核发起IO调用，从用户态切换到内核态。")),t("p",null,[l[192]||(l[192]=n("CPU利用")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[191]||(l[191]=[n("DMA")])),_:1}),l[193]||(l[193]=n("控制器，把数据从磁盘拷贝到内核缓冲区。"))]),l[284]||(l[284]=t("p",null,"上下文从内核切换回用户态，mmap方法返回。",-1)),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[194]||(l[194]=[n("用户进程")])),_:1}),l[285]||(l[285]=n("通过write方法向操作系统内核发起IO调用，上下文从用户态切换为内核态。")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[195]||(l[195]=[n("CPU")])),_:1}),l[286]||(l[286]=n("将内核缓冲区的数据拷贝到socket缓冲区")),t("p",null,[l[197]||(l[197]=n("CPU利用")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[196]||(l[196]=[n("DMA")])),_:1}),l[198]||(l[198]=n("控制器，把数据从socket缓冲区拷贝到网卡，上下文从内核切换回用户态，write调用返回。"))]),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[199]||(l[199]=[n("IO发生了4次上下文切换以及3次数据拷贝。3次拷贝包括2次DMA拷贝和1次CPU拷贝。")])),_:1}),t("p",null,[l[202]||(l[202]=n("Mmap实现")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[200]||(l[200]=[n("内核缓冲区")])),_:1}),l[203]||(l[203]=n("和")),o(r,{style:{"background-color":"#E4F7D2"}},{default:d(()=>l[201]||(l[201]=[n("用户缓冲区")])),_:1}),l[204]||(l[204]=n("的虚拟地址映射到同一个物理地址，节省了一次CPU拷贝。用户进程内存是虚拟的，只是映射到内核读缓冲区，可以节省一半的内存空间。"))]),l[287]||(l[287]=t("h3",{id:"sendfile实现的零拷贝",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sendfile实现的零拷贝","aria-hidden":"true"},"#"),n(" Sendfile实现的零拷贝")],-1)),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[205]||(l[205]=[n("用户进程")])),_:1}),l[288]||(l[288]=n("发起")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[206]||(l[206]=[n("sendfile")])),_:1}),l[289]||(l[289]=n("系统调用，上下文从用户态切换为内核态")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[207]||(l[207]=[n("DMA")])),_:1}),l[290]||(l[290]=n("控制器把数据从磁盘拷贝到内核缓冲区。")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[208]||(l[208]=[n("CPU")])),_:1}),l[291]||(l[291]=n("将读缓冲区中的数据拷贝到socket缓冲区")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[209]||(l[209]=[n("DMA")])),_:1}),l[292]||(l[292]=n("控制器把数据从socket缓冲区拷贝到网卡")),t("p",null,[l[211]||(l[211]=n("上下文从内核态切换回用户态，")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[210]||(l[210]=[n("sendfile调用返回")])),_:1}),l[212]||(l[212]=n("。"))]),o(r,{style:{"background-color":"#EFE1FA"}},{default:d(()=>l[213]||(l[213]=[n("Sendfile实现的零拷贝3次数据拷贝和2次上下文切换。")])),_:1}),l[293]||(l[293]=t("h3",{id:"sendfile-linux2-4",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sendfile-linux2-4","aria-hidden":"true"},"#"),n(" sendFile linux2.4")],-1)),l[294]||(l[294]=t("p",null,"Linux2.4版本又做了优化升级，引入SG-DMA技术，直接从内核缓冲区将数据通过DMA的方式读取到网卡，减少了一次CPU拷贝。",-1)),o(r,{style:{"background-color":"#FFE8E6"}},{default:d(()=>l[214]||(l[214]=[n("用户应用进程")])),_:1}),l[295]||(l[295]=n("发起")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[215]||(l[215]=[n("sendfile")])),_:1}),l[296]||(l[296]=n("系统调用，上下文从用户态切换到内核态。")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[216]||(l[216]=[n("DMA")])),_:1}),l[297]||(l[297]=n("控制器把数据从磁盘拷贝到内核缓冲区，")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[217]||(l[217]=[n("CPU")])),_:1}),l[298]||(l[298]=n("把内核缓冲区的文件描述符信息发送到socket缓冲区。")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[218]||(l[218]=[n("DMA")])),_:1}),l[299]||(l[299]=n("控制器根据文件描述符信息把数据从内核缓冲区拷贝到网卡。")),t("p",null,[l[220]||(l[220]=n("上下文从内核切换回用户态，")),o(r,{style:{"background-color":"#D4EEFC"}},{default:d(()=>l[219]||(l[219]=[n("sendfile调用返回")])),_:1}),l[221]||(l[221]=n("。"))]),t("p",null,[l[224]||(l[224]=n("在消息队列中间件中，")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[222]||(l[222]=[n("rocketMQ消费消息采用mmap")])),_:1}),l[225]||(l[225]=n("，")),o(r,{style:{"background-color":"#FCFCCA"}},{default:d(()=>l[223]||(l[223]=[n("kafka采用sendFile")])),_:1}),l[226]||(l[226]=n("。"))]),l[300]||(l[300]=t("h2",{id:"dma",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#dma","aria-hidden":"true"},"#"),n(" DMA")],-1)),l[301]||(l[301]=t("p",null,"直接内存访问，在不需要CPU参与的情况下读取、写入内存。设备直接送入主存，或者从主存直接输出到设备上。",-1)),l[302]||(l[302]=t("h1",{id:"·cpu",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#·cpu","aria-hidden":"true"},"#"),n(" ·CPU")],-1)),t("h2",F,[l[228]||(l[228]=t("a",{class:"header-anchor",href:"#中断","aria-hidden":"true"},"#",-1)),l[229]||(l[229]=n()),o(r,{style:{color:"#000000"}},{default:d(()=>l[227]||(l[227]=[n("中断")])),_:1})]),l[303]||(l[303]=i('<h3 id="缺页中断" tabindex="-1"><a class="header-anchor" href="#缺页中断" aria-hidden="true">#</a> 缺页中断</h3><ol><li>保护CPU现场</li><li>分析中断原因</li><li>转入缺页中断处理程序进行处理</li><li>恢复CPU现场，继续执行</li></ol><p>和一般中断的区别是缺页中断返回时执行产生中断的一条指令，而一般的中断返回时执行下一条指令。一条指令可能产生多次缺页中断。</p><h3 id="中断-1" tabindex="-1"><a class="header-anchor" href="#中断-1" aria-hidden="true">#</a> 中断</h3><p>外中断：</p><p>由 CPU 执行指令以外的事件引起，如 I/O 事件完成产生中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。</p><p>异常：</p><p>由 CPU 执行指令的内部事件引起，如地址越界、算术溢出等。</p><p>陷入：</p><p>在用户程序中使用系统调用。</p><h2 id="伪共享" tabindex="-1"><a class="header-anchor" href="#伪共享" aria-hidden="true">#</a> 伪共享</h2><h3 id="缓存行" tabindex="-1"><a class="header-anchor" href="#缓存行" aria-hidden="true">#</a> 缓存行</h3><p>cpu和内存之间有好几级缓存，因为cpu直接访问内存是非常慢的。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1657601933561-aa080e0f-96f6-4227-87f0-d9cf3236cd11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>越靠近CPU缓存越快也越小。</p><p>缓存由缓存行组成，通常是64字节。也就是可以存储8个long类型变量。缓存会从主存中加载数据会加载完整的缓存行，比如加载long类型的数组，后面的7个元素都会被加载进来。</p><h3 id="伪共享-1" tabindex="-1"><a class="header-anchor" href="#伪共享-1" aria-hidden="true">#</a> 伪共享</h3><p>假设有一个变量a，另外还有一个变量b紧挨着a。现在如果有一个线程对变量a进行修改，另一个线程对变量b进行读取，当前者修改a时，会把a和b加载到缓存中，更新完a以后所有包含a的缓存行将失效。当后者读取b时发现这个缓存行已经失效了，需要从主内存中进行读取。这就出现了问题，更新a却导致b的查询变慢了，也就是互相独立的变量，但是因为共享同一个缓存行，无意中影响了彼此的性能。就是伪共享。</p><p>【一般a，b用volatile关键字，保证可见性（修改a，b能感知）】</p><h3 id="如何避免伪共享" tabindex="-1"><a class="header-anchor" href="#如何避免伪共享" aria-hidden="true">#</a> 如何避免伪共享</h3><ol><li>如果是两个long类型，中间可以加7个long类型，让他们在不同缓存行。</li><li>创建自己的Long类型。volatile long value; long p1,p2,p3,p4,p5,p6,p7;</li><li>使用@sun.misc.Contended注解并且修改JVM参数：-XX:-RestrictContended</li></ol><h1 id="·linux命令" tabindex="-1"><a class="header-anchor" href="#·linux命令" aria-hidden="true">#</a> ·linux命令</h1><p>常用linux命令</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1652252550015-b34e9809-e4b5-4f91-9e54-6f07d8504bfc.png" alt="" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1652252560363-7e61352c-28c8-4766-bb01-ce10da55954a.png" alt="" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1652252569056-8ed87704-8ef2-4010-a99a-01fd1fb78545.png" alt="" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1652252576429-cb08f5d1-e398-43ee-a75e-95f300dacbaa.png" alt="" loading="lazy"><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1652252589044-98824e79-cdda-4c93-9ef9-0d8358c29364.png" alt="" loading="lazy"></p>',24))])}const D=p(e,[["render",C],["__file","os.html.vue"]]);export{D as default};
