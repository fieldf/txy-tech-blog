import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as u,c as r,b as a,d as s,e as p,w as o,f as l}from"./app-9393c1ef.js";const c={},k={id:"set-接口-不可重复",tabindex:"-1"},d={id:"list接口-可重复",tabindex:"-1"},m={id:"collection和collections的区别",tabindex:"-1"},v={id:"map",tabindex:"-1"},b={id:"queue",tabindex:"-1"},f={id:"线程安全集合类",tabindex:"-1"},y={id:"add扩容",tabindex:"-1"},g={id:"删除元素",tabindex:"-1"},w={id:"fail-fast",tabindex:"-1"},F={id:"序列化",tabindex:"-1"},S={id:"结构",tabindex:"-1"},C={id:"put",tabindex:"-1"},E={id:"为什么线程不安全",tabindex:"-1"},x={id:"hashmap为什么用红黑树而不是b-树",tabindex:"-1"},D={id:"为什么重载因子是0-75",tabindex:"-1"},A={id:"为什么8转化为红黑树",tabindex:"-1"},j={id:"_1-7",tabindex:"-1"},B={id:"结构-1",tabindex:"-1"},O={id:"put流程",tabindex:"-1"},I={id:"get逻辑",tabindex:"-1"},q={id:"扩容",tabindex:"-1"},R={id:"_1-8",tabindex:"-1"},P={id:"结构-2",tabindex:"-1"},M={id:"put-1",tabindex:"-1"},T={id:"get",tabindex:"-1"},z={id:"ioc",tabindex:"-1"},L={id:"aop",tabindex:"-1"},N={id:"代理",tabindex:"-1"},W={id:"静态代理",tabindex:"-1"},H={id:"cglib动态代理",tabindex:"-1"},V={id:"反射",tabindex:"-1"},J={id:"泛型",tabindex:"-1"},K={id:"注解",tabindex:"-1"},Q={id:"异常",tabindex:"-1"},U={id:"异常处理",tabindex:"-1"};function G(Y,n){const t=i("font");return u(),r("div",null,[n[471]||(n[471]=a("h1",{id:"·java集合",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#·java集合","aria-hidden":"true"},"#"),s(" ·java集合")],-1)),a("h2",k,[n[1]||(n[1]=a("a",{class:"header-anchor",href:"#set-接口-不可重复","aria-hidden":"true"},"#",-1)),n[2]||(n[2]=s()),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[0]||(n[0]=[s("Set:接口 ：不可重复")])),_:1})]),n[472]||(n[472]=l("<p>一、HashSet：HashMap实现、无序</p><p>实现：</p><ol><li>存的是散列值。</li><li>按照元素的散列值来存取元素的。</li><li>元素的散列值通过元素的hashCode方法计算得到。</li><li>hashCode相等，则接着通过equals方法比较。</li></ol><p>特点：</p><ol><li>查找O(1)。</li><li>无序。</li><li>iterator遍历得到的结果是不确定的。</li></ol><p>二、TreeSet：二叉树实现</p><p>实现：</p><ol><li>基于二叉树实现。</li><li>查找效率O(logN)。</li><li>支持有序性存储。</li><li>对元素按照指定的顺序升序、降序排序。</li></ol><p>注意：</p><ol><li>存储自定义类，类要实现Comparable&lt;&gt;接口。重写compareTo方法。</li><li>Arrays.sort()，里面new Comparator&lt;&gt;() {compare方法}。</li></ol><p>三、LinkedHashset：HashMap实现，双向链表记录顺序。</p><p>实现：</p><ol><li>底层使用LinkedHashMap。</li><li>和HashSet相同。</li></ol><p>特征：</p><ol><li>继承了HashSet。</li><li>查找时间复杂度O(1)。</li><li>按序存储。</li><li>使用双向链表维护插入顺序。</li></ol>",15)),a("h2",d,[n[4]||(n[4]=a("a",{class:"header-anchor",href:"#list接口-可重复","aria-hidden":"true"},"#",-1)),n[5]||(n[5]=s()),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[3]||(n[3]=[s("List接口：可重复")])),_:1})]),n[473]||(n[473]=l('<p>有3个实现类</p><p>一、Arraylist：基于动态数组实现，增删慢、查询快、不安全。</p><p>实现：</p><ol><li>基于数组实现。</li><li>提供了增加add、删除remove和访问get功能。</li></ol><p>特点：</p><ol><li>元素必须连续存储。</li><li>在中间位置插入删除元素，需要将节点后的所有元素进行移动。</li><li>不适合插入和删除，更适合查找和遍历。</li><li>不需要在定义时指定数组长度。</li><li>在数组长度不满足存储要求时，ArrayList会创建一个更大的数组并把已有的数组复制到新数组。</li></ol><p>二、Vector：基于数组实现，增删慢、查询快、安全。</p><p>实现：</p><ol><li>基于数组实现。</li></ol><p>特点：</p><ol><li>支持线程同步。</li><li>同一时刻只能有一个线程对Vector进行写操作。增删改。</li><li>但需要频繁加锁释放。</li><li>读写效率比ArrayList低。</li></ol><p>三、LinkedList：基于双向链表实现，增删快、查询慢、不安全。</p><p>实现：</p><ol><li>基于双向链表实现。</li></ol><p>特点：</p><ol><li>插入删除时只需要改动指针，改动较小，因此效率较高。</li><li>在进行随机访问时，需要从头结点遍历到该节点，速度很慢。</li><li>提供了操作链表头和尾的操作，有时可以被当做栈和队列使用。</li></ol><h3 id="list和set的区别" tabindex="-1"><a class="header-anchor" href="#list和set的区别" aria-hidden="true">#</a> list和set的区别</h3><p>list和set都是继承自Collection接口。</p><p>list：元素有序，可以重复。查找效率高，增删稍差。</p><p>set：元素无序，不可重复。查找效率低，增删效率高。</p>',20)),a("h3",m,[n[7]||(n[7]=a("a",{class:"header-anchor",href:"#collection和collections的区别","aria-hidden":"true"},"#",-1)),n[8]||(n[8]=s()),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[6]||(n[6]=[s("Collection和Collections的区别")])),_:1})]),n[474]||(n[474]=a("p",null,"Collection是一个接口，它的实现类有set和list，collections是一个包装类，里面有sort方法，可以对集合中的元素进行排序搜索等操作。",-1)),a("h2",v,[n[10]||(n[10]=a("a",{class:"header-anchor",href:"#map","aria-hidden":"true"},"#",-1)),n[11]||(n[11]=s()),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[9]||(n[9]=[s("Map")])),_:1})]),n[475]||(n[475]=l('<h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> hashmap</h3><p>一、HashMap：数组+链表存储数据，线程不安全</p><p>结构：</p><ol><li>1.7 Entry数组，Entry有4个属性：key，value，hash值和next。</li></ol><p>实现：</p><ol><li>基于键的hashcode值进行数据存取。</li><li>1.7是数组+链表，1.8是数组+链表+红黑树。</li><li>当链表元素超过一定个数的时候会转化成红黑树。</li></ol><p>特点：</p><ol><li>快速更新和查询数据。</li><li>遍历无法保证顺序。</li><li>key和value可以为null。</li><li>非线程安全的。多个线程同时写可能导致数据不一致。</li><li>如果需要线程安全可以使用Collections的synchronizedMap。或者ConcurrentHashMap。</li></ol><p>查找：</p><ol><li>根据key的hash值定位到数组的下标，对链表进行遍历直到找到需要的数据。</li><li>时间复杂度O(n)最差。</li><li>java8进行优化。元素超过8转为红黑树。O(logN)。</li></ol><h3 id="concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap" aria-hidden="true">#</a> concurrenthashmap</h3><p>二、ConcurrentHashMap</p><p>实现：</p><ol><li>1.7采用分段锁，线程安全。</li><li>多个segment组成，并发度=segment数量。默认16.</li><li>每个Segment继承自ReentrantLock。</li><li>每次加锁都是锁住一个Segment。</li><li>1.8放弃了Segment。</li><li>采用Synchronized+CAS实现。</li></ol><h3 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable" aria-hidden="true">#</a> hashtable</h3><p>三、HashTable</p><p>线程安全的。synchronized同步的，是遗留类，不应该使用它，可以使用concurrenthashmap。</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>四、TreeMap</p><p>实现：</p><ol><li>基于二叉树</li></ol><p>特点：</p><ol><li>保证元素有序存取。</li><li>可以自定义排序比较器。</li></ol><p>五、LinkedHashMap 继承HashMap、链表保存插入顺序</p><p>实现：</p><ol><li>双向链表实现。查找效率O(1)</li></ol><p>特点：</p><ol><li>保证元素按序存取。</li><li>用来实现LRU。</li></ol>',28)),a("h2",b,[n[13]||(n[13]=a("a",{class:"header-anchor",href:"#queue","aria-hidden":"true"},"#",-1)),n[14]||(n[14]=s()),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[12]||(n[12]=[s("Queue")])),_:1})]),a("p",null,[n[16]||(n[16]=s("priorityQueue：基于")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[15]||(n[15]=[s("堆结构")])),_:1}),n[17]||(n[17]=s("实现，可以用它来实现优先队列，默认是小顶堆。"))]),a("p",null,[n[19]||(n[19]=s("ArrayDeque: 是Deque接口的一个实现，使用了")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[18]||(n[18]=[s("可变数组")])),_:1}),n[20]||(n[20]=s("，所以没有容量上的限制。可以作为栈来使用，效率高于Stack；也可以作为队列来使用，效率高于LinkedList。"))]),n[476]||(n[476]=a("p",null,"ArrayBlockingQueue：基于数组实现的有界阻塞队列。ReentrantLock",-1)),n[477]||(n[477]=a("p",null,"LinkedBlockingQueue：基于链表实现的有界阻塞队列。",-1)),n[478]||(n[478]=a("p",null,"PriorityBlockingQueue：基于优先级排序的无界阻塞队列。",-1)),n[479]||(n[479]=a("p",null,"DelayQueue：支持延迟操作的无界阻塞队列。",-1)),n[480]||(n[480]=a("p",null,"SynchronousQueue：用于线程同步的阻塞队列。",-1)),n[481]||(n[481]=a("p",null,"LinkedTransferQueue：基于链表数据结构实现的无界阻塞队列。",-1)),n[482]||(n[482]=a("p",null,"LinkedBlockingDeque：基于链表实现的双向阻塞队列。",-1)),p(t,{style:{color:"rgb(51,51,51)"}},{default:o(()=>n[21]||(n[21]=[s("阻塞功能可以平衡生产者和消费者两端的能力，当有任何一端速度过快时，阻塞队列便会把过快的速度给降下来。")])),_:1}),p(t,{style:{color:"rgb(51,51,51)"}},{default:o(()=>n[22]||(n[22]=[s("支持阻塞的插入方法put: 队列满时，队列会阻塞插入元素的线程，直到队列不满。")])),_:1}),p(t,{style:{color:"rgb(51,51,51)"}},{default:o(()=>n[23]||(n[23]=[s("支持阻塞的移除方法take: 队列空时，获取元素的线程会等待队列变为非空，再获取数据。")])),_:1}),a("h2",f,[n[25]||(n[25]=a("a",{class:"header-anchor",href:"#线程安全集合类","aria-hidden":"true"},"#",-1)),n[26]||(n[26]=s()),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[24]||(n[24]=[s("线程安全集合类")])),_:1})]),n[483]||(n[483]=a("ol",null,[a("li",null,"Hashtable、vector：遗留类"),a("li",null,"Collections.synchronizedList()：修饰的，和vector同步级别粒度的同步方法。"),a("li",null,[s("Juc包： "),a("ol",null,[a("li",null,"CopyOnWrite：读不加锁，写加锁。（ArrayList有）"),a("li",null,"concurrent"),a("li",null,"Blocking")])])],-1)),n[484]||(n[484]=a("h1",{id:"·arraylist",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#·arraylist","aria-hidden":"true"},"#"),s(" ·ArrayList")],-1)),a("h2",y,[n[28]||(n[28]=a("a",{class:"header-anchor",href:"#add扩容","aria-hidden":"true"},"#",-1)),n[29]||(n[29]=s()),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[27]||(n[27]=[s("add扩容")])),_:1}),n[30]||(n[30]=s("："))]),a("p",null,[n[34]||(n[34]=s("若没有给初始容量的时候，第一次")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[31]||(n[31]=[s("创建")])),_:1}),n[35]||(n[35]=s("得到一个空的列表。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[32]||(n[32]=[s("添加")])),_:1}),n[36]||(n[36]=s("元素时使用ensureCapacityInternal()方法来保证容量足够，参数传递的是size+1，看一看当前的size能不能在")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[33]||(n[33]=[s("多放下一个")])),_:1}),n[37]||(n[37]=s("元素了，如果不能，需要使用grow()方法进行扩容，新容量的大小为oldCapacity+(oldCapacity>>1)，也就是旧容量的1.5倍，（1.8变成1.5倍+1，防止初始化容量为0导致扩不了容）元素小于10的时候容量就是10。"))]),a("p",null,[n[40]||(n[40]=s("扩容操作需要调用")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[38]||(n[38]=[s("Arrays.copyOf()")])),_:1}),n[41]||(n[41]=s("把原数组整个复制")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[39]||(n[39]=[s("到")])),_:1}),n[42]||(n[42]=s("新数组中，申请一个新数组调用System.arraycopy，这个操作代价很高，因此最好在创建ArrayList对象时就指定大概的容量大小，减少扩容操作的次数。"))]),n[485]||(n[485]=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Increments modCount!!</span>
	elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>elementData <span class="token operator">==</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        minCapacity <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// minCapacity=size+1,比较默认容量16大还是插入一个元素后的size+1大，获取大的那个数。</span>
    <span class="token punctuation">}</span>
    <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">// overflow-conscious code</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果容量不够了，就扩容。	</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// overflow-conscious code</span>
    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新容量=1.5x旧容量</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 如果扩容后大于允许的最大值</span>
        <span class="token class-name">NewCapacit</span> <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断size+1是否小于0，是否大于允许的最大值MAX_ARRAY_SIZE</span>
    elementData <span class="token operator">=</span> <span class="token class-name">Arrrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> <span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">)</span> 
        <span class="token operator">?</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">:</span><span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h2",g,[n[44]||(n[44]=a("a",{class:"header-anchor",href:"#删除元素","aria-hidden":"true"},"#",-1)),n[45]||(n[45]=s()),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[43]||(n[43]=[s("删除元素")])),_:1})]),n[486]||(n[486]=l(`<p>需要调用System.arraycopy()将index+1后面的元素都复制到index位置行，该操作的时间复杂度为O（N），可以看出ArrayList删除元素的代价是非常高的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>
    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work.</span>
    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),a("h2",w,[n[47]||(n[47]=a("a",{class:"header-anchor",href:"#fail-fast","aria-hidden":"true"},"#",-1)),n[48]||(n[48]=s()),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[46]||(n[46]=[s("Fail-Fast")])),_:1})]),n[487]||(n[487]=a("p",null,"Fail-fast: 遍历时并发修改抛ConcurrentModificationException。exceptiedMountCount",-1)),n[488]||(n[488]=a("p",null,"Fail-safe:CopyOnWriteArrayList,读多写少，读写分离。读的旧。",-1)),a("p",null,[n[52]||(n[52]=s("modCount用来记录arraylist")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[49]||(n[49]=[s("结构变化")])),_:1}),n[53]||(n[53]=s("的次数。结构发生变化指")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[50]||(n[50]=[s("添加")])),_:1}),n[54]||(n[54]=s("或者")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[51]||(n[51]=[s("删除")])),_:1}),n[55]||(n[55]=s("至少一个元素的所有操作，或者是调整内部数据的大小，仅仅只是设置元素的值不算结构发生变化。在迭代（iterator）或者序列化等操作时，需要比较操作前后modcount是否改变，看看modcount和exceptiedMountCount，期待的值是否一样。如果改变了抛concurrentmodificationexception。"))]),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[56]||(n[56]=[s("CopyOnWriteArrayList（ReentrantLock）")])),_:1}),n[489]||(n[489]=s()),n[490]||(n[490]=a("p",null,"读写分离：",-1)),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[57]||(n[57]=[s("写")])),_:1}),n[491]||(n[491]=s("操作需要加锁，在一个")),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[58]||(n[58]=[s("复制")])),_:1}),n[492]||(n[492]=s("的数组上进行，写操作结束之后需要把原始数组")),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[59]||(n[59]=[s("指向")])),_:1}),n[493]||(n[493]=s("新的复制数组。")),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[60]||(n[60]=[s("读")])),_:1}),n[494]||(n[494]=s("不加锁，在")),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[61]||(n[61]=[s("原始")])),_:1}),n[495]||(n[495]=s("数组中进行，")),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[62]||(n[62]=[s("读写分离")])),_:1}),n[496]||(n[496]=s("；写的同时允许读，提升读的性能，适合")),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[63]||(n[63]=[s("读多写少")])),_:1}),n[497]||(n[497]=l(`。<p>缺陷：</p><p>内存占用：写复制新数组，内存2倍，不适合内存少的用。<br> 数据不一致：读操作不能读取实时性数据，以及对实时性要求高的场景。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Elements</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token function">setArray</span><span class="token punctuation">(</span>newElemennts<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),a("h2",F,[n[65]||(n[65]=a("a",{class:"header-anchor",href:"#序列化","aria-hidden":"true"},"#",-1)),n[66]||(n[66]=s()),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[64]||(n[64]=[s("序列化：")])),_:1})]),n[498]||(n[498]=a("p",null,[s("ArrayList基于数组实现，并且具有动态扩容特性，因此可能存在一些null元素，比如开始分配元素数量为10但可能只存了1.2个元素，所以没必要全部进行序列化。"),a("br"),s(" 保存元素的数组elementData用transient修饰，表示默认不被序列化。ArrayList自己实现了readObject()和writeObject()来实现只序列化数组中有元素填充的部分。")],-1)),p(t,{style:{color:"#9254DE"}},{default:o(()=>n[67]||(n[67]=[s("Private transient Object[] elementData;")])),_:1}),n[499]||(n[499]=s()),a("p",null,[n[70]||(n[70]=s("序列化时需要使用ObjectOutputStream的writeObject()将对象转换为字节流并输出到文件。而writeObject(list)方法在")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[68]||(n[68]=[s("传入的对象")])),_:1}),n[71]||(n[71]=s("存在writeObject方法时，反射调用该")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[69]||(n[69]=[s("对象的writeObject()")])),_:1}),n[72]||(n[72]=s("来实现序列化。反序列化使用的是ObjectInputStream的readObject()方法，原理类似。"))]),n[500]||(n[500]=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;object.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Oos</span><span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="·hashmap" tabindex="-1"><a class="header-anchor" href="#·hashmap" aria-hidden="true">#</a> ·HashMap</h1>`,2)),a("h2",S,[n[74]||(n[74]=a("a",{class:"header-anchor",href:"#结构","aria-hidden":"true"},"#",-1)),n[75]||(n[75]=s()),p(t,{style:{"background-color":"#FFECE0"}},{default:o(()=>n[73]||(n[73]=[s("结构：")])),_:1})]),n[501]||(n[501]=a("p",null,[s("1.7 Entry数组+链表"),a("br"),s(" Transient Entry<K,V>[] table; entry包含四个字段，k，v，next，hash"),a("br"),s(" 产生hash冲突使用拉链法解决，Hash相同存在同一个链表里。")],-1)),n[502]||(n[502]=a("p",null,"1.8 Node数组+链表+红黑树（查找略逊色于AVL树，但是插入和删除优于AVL树，AVL为了维持平衡开销很大）",-1)),a("h2",C,[n[77]||(n[77]=a("a",{class:"header-anchor",href:"#put","aria-hidden":"true"},"#",-1)),n[78]||(n[78]=s()),p(t,{style:{"background-color":"#FFECE0"}},{default:o(()=>n[76]||(n[76]=[s("put")])),_:1})]),n[503]||(n[503]=a("p",null,"put操作首先计算桶下标，看对应位置是否为空。如果为空，创建Node节点占位。否则判断是TreeNode还是链表，添加元素put操作可能会导致扩容，如果链表节点大于8，如果容量小于64会先扩容。否则树化流程。最终判断是否超过阈值，若超过，扩容，首次put时，容量变为16。。",-1)),n[504]||(n[504]=a("figure",null,[a("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1654783389479-bc077eb3-6aa5-44f1-b70a-857a51f13a82.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1)),a("h2",E,[n[80]||(n[80]=a("a",{class:"header-anchor",href:"#为什么线程不安全","aria-hidden":"true"},"#",-1)),n[81]||(n[81]=s()),p(t,{style:{"background-color":"#FFECE0"}},{default:o(()=>n[79]||(n[79]=[s("为什么线程不安全？")])),_:1})]),n[505]||(n[505]=a("ol",null,[a("li",null,[a("p",null,"并发put时，如果A发现对应位置没有元素，B也发现没有元素。把时间片分给B执行。再转换成A，那么A把Bput的元素覆盖了")]),a("li",null,[a("p",null,"jdk1.7时，扩容会导致元素搬迁，头插法可能会产生死链问题。")])],-1)),a("h2",x,[n[83]||(n[83]=a("a",{class:"header-anchor",href:"#hashmap为什么用红黑树而不是b-树","aria-hidden":"true"},"#",-1)),n[84]||(n[84]=s()),p(t,{style:{"background-color":"#FFECE0"}},{default:o(()=>n[82]||(n[82]=[s("Hashmap为什么用红黑树而不是B+树？")])),_:1})]),a("p",null,[n[88]||(n[88]=s("红黑树")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[85]||(n[85]=[s("查询效率")])),_:1}),n[89]||(n[89]=s("比b+树高，通常红黑树用于存储")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[86]||(n[86]=[s("内存")])),_:1}),n[90]||(n[90]=s("中的数据，B+树用于存储")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[87]||(n[87]=[s("磁盘")])),_:1}),n[91]||(n[91]=s("中的数据。")),n[92]||(n[92]=a("br",null,null,-1)),n[93]||(n[93]=s(" B+树在数据库中被应用的原因是B+树比B树更加矮胖，B+树非叶子节点不存储数据，所以每个节点存储的关键字更多，B+树更能应对大量数据的情况。")),n[94]||(n[94]=a("br",null,null,-1)),n[95]||(n[95]=s(" Jdk中的hashmap本来是数组+链表的形式，链表查找慢，所以需要查找效率高的树结构来替换。")),n[96]||(n[96]=a("br",null,null,-1)),n[97]||(n[97]=s(" 如果用B+树，数据量不多的情况下，数据都会挤在一个节点里面，遍历效率退化成一个链表。"))]),a("h2",D,[n[99]||(n[99]=a("a",{class:"header-anchor",href:"#为什么重载因子是0-75","aria-hidden":"true"},"#",-1)),n[100]||(n[100]=s()),p(t,{style:{"background-color":"#FFECE0"}},{default:o(()=>n[98]||(n[98]=[s("为什么重载因子是0.75")])),_:1})]),a("p",null,[n[103]||(n[103]=s("当负载因子是1时，也就意味着，当数组的8个值全部填充了，才会发生扩容。Hash冲突避免不了，意味着会出现大量的hash冲突，底层的红黑树变得异常复杂，对查询效率及其不利。这种情况就是牺牲了")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[101]||(n[101]=[s("时间")])),_:1}),n[104]||(n[104]=s("来保证空间的利用率。")),n[105]||(n[105]=a("br",null,null,-1)),n[106]||(n[106]=s(" 负载因子是0.5的时候，意味着数组中元素到1半就开始扩容，")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[102]||(n[102]=[s("空间")])),_:1}),n[107]||(n[107]=s("利用率大大降低。原本存储1M的数据，现在就意味着需要2M的空间。")),n[108]||(n[108]=a("br",null,null,-1)),n[109]||(n[109]=s(" 一句话就是负载因子太小，虽然时间效率提升了，但是空间利用率降低了。所以权衡时间和空间。"))]),a("h2",A,[n[111]||(n[111]=a("a",{class:"header-anchor",href:"#为什么8转化为红黑树","aria-hidden":"true"},"#",-1)),n[112]||(n[112]=s()),p(t,{style:{"background-color":"#FFECE0"}},{default:o(()=>n[110]||(n[110]=[s("为什么8转化为红黑树")])),_:1})]),n[506]||(n[506]=a("p",null,"因为hashcode分布的随机性，满足泊松分布，根据概率统计，计算出链表中节点数是8的概率已经接近千分之一，比较低，尽量让他树化的概率小一些可以减轻维护红黑树压力。而且8也不算大，就算是链表从查询上来说也是可以接受的。",-1)),n[507]||(n[507]=a("h1",{id:"·concurrenthashmap",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#·concurrenthashmap","aria-hidden":"true"},"#"),s(" ·ConcurrentHashMap")],-1)),a("h2",j,[n[114]||(n[114]=a("a",{class:"header-anchor",href:"#_1-7","aria-hidden":"true"},"#",-1)),n[115]||(n[115]=s()),p(t,{style:{"background-color":"#D3F5F0"}},{default:o(()=>n[113]||(n[113]=[s("1.7")])),_:1})]),a("h3",B,[n[117]||(n[117]=a("a",{class:"header-anchor",href:"#结构-1","aria-hidden":"true"},"#",-1)),n[118]||(n[118]=s()),p(t,{style:{"background-color":"#D3F5F0"}},{default:o(()=>n[116]||(n[116]=[s("结构")])),_:1})]),n[508]||(n[508]=l(`<p>1.7 Segment数组+HashEntry数组+链表：</p><p>ConcurrentHashMap采用了分段锁，segment继承于ReentrantLock，一个segment(16)对应一个锁。不会像hashtable那样不管put还是get都需要同步，并发度是segment数组的个数，一个线程占用锁访问一个segment时，不会影响其他的segment。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ConcurrentHashMap</span>
<span class="token keyword">final</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> segments<span class="token punctuation">;</span>
<span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> keySet<span class="token punctuation">;</span>
<span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span>

<span class="token comment">// Segment是ConcurrentHashMap的一个内部类，主要组成如下：</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token keyword">volatile</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token keyword">volatile</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 和hashmap类似，区别就是value和链表是volatile修饰的，保证获取时的可见性。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a("h3",O,[n[120]||(n[120]=a("a",{class:"header-anchor",href:"#put流程","aria-hidden":"true"},"#",-1)),n[121]||(n[121]=s()),p(t,{style:{"background-color":"#D3F5F0"}},{default:o(()=>n[119]||(n[119]=[s("Put流程：")])),_:1})]),n[509]||(n[509]=a("ol",null,[a("li",null,"计算hash值定位到segment，"),a("li",null,"当前segment中有一个hashentry小数组，也是通过hashcode定位到hashentry。"),a("li",null,"遍历该hashentry，如果不为空则判断传入的key和当前遍历的key是否相等，相等则覆盖旧的key。"),a("li",null,"为空或者遍历没有相同key则创建一个hashentry并加入到segment中，同时会先判断是否需要扩容。"),a("li",null,"最后解除锁。")],-1)),a("h3",I,[n[123]||(n[123]=a("a",{class:"header-anchor",href:"#get逻辑","aria-hidden":"true"},"#",-1)),n[124]||(n[124]=s()),p(t,{style:{"background-color":"#D3F5F0"}},{default:o(()=>n[122]||(n[122]=[s("Get逻辑：")])),_:1})]),n[510]||(n[510]=a("ol",null,[a("li",null,"将key通过hash值定位到具体的segment，再定位到具体的hashentry。因为hashentry的value值是用volatile修饰的，所以保证了内存的可见性，每次都能获取最新值。Concurrenthashmap的get方法非常高效，因为整个过程都不需要加锁。"),a("li",null,"若头结点的hash码是负数，表示正在扩容，即forwardingnode，这也就是为什么不用锁也可以保证安全，根据forwardingnode中的find方法去到新的table中去找key。"),a("li",null,"还有种情况，头结点hash码是负数还有可能是红黑树，那就去红黑树中找。"),a("li",null,"都不是，那就遍历这个节点，找到key值相同就返回，找不到就返回null。")],-1)),n[511]||(n[511]=a("p",null,"如果segment=16，计算segment下标，二哈的高四位。",-1)),n[512]||(n[512]=a("p",null,"如果小数组=2，计算小数组下标，二哈的低1位。",-1)),n[513]||(n[513]=a("p",null,"小数组扩容，segment不会扩容。",-1)),a("h3",q,[n[126]||(n[126]=a("a",{class:"header-anchor",href:"#扩容","aria-hidden":"true"},"#",-1)),n[127]||(n[127]=s()),p(t,{style:{"background-color":"#D3F5F0"}},{default:o(()=>n[125]||(n[125]=[s("扩容：")])),_:1})]),n[514]||(n[514]=a("p",null,"扩容过程: 元素个数超过容量3/4需要扩容，创建一个新的数组，node节点一个个搬迁过去，从后往前一个一个下标的处理。如果一节点处理过了，用forwardingnode表示已经处理过了，其他线程来处理的时候就不会处理这个节点了。还有用处，其他线程get这个节点就知道已经搬迁了，去新的table中去找。",-1)),n[515]||(n[515]=a("p",null,"扩容完成的链表头替换为forwardingnode",-1)),a("h2",R,[n[129]||(n[129]=a("a",{class:"header-anchor",href:"#_1-8","aria-hidden":"true"},"#",-1)),n[130]||(n[130]=s()),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[128]||(n[128]=[s("1.8")])),_:1})]),a("h3",P,[n[132]||(n[132]=a("a",{class:"header-anchor",href:"#结构-2","aria-hidden":"true"},"#",-1)),n[133]||(n[133]=s()),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[131]||(n[131]=[s("结构：")])),_:1})]),n[516]||(n[516]=l(`<p>1.8 数组+链表+红黑树：抛弃了segment分段锁，一个数组头对应一个锁,cas+synchronized</p><p>Node数组，其中Node</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token keyword">volatile</span> <span class="token class-name">V</span> val<span class="token punctuation">;</span>
    <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token comment">// val和next都用了volatile保证可见性。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a("h3",M,[n[135]||(n[135]=a("a",{class:"header-anchor",href:"#put-1","aria-hidden":"true"},"#",-1)),n[136]||(n[136]=s()),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[134]||(n[134]=[s("Put：")])),_:1})]),n[517]||(n[517]=a("ol",null,[a("li",null,"根据key计算出hashcode，计算出Node数组对应的位置"),a("li",null,"判断是否需要进行初始化，"),a("li",null,"如果定位的位置为空，则可以写入数据，利用CAS尝试写入，失败则自旋保证成功。"),a("li",null,"如果当前位置的hashcode=MOVED=-1，则需要进行扩容"),a("li",null,"如果都不满足，则利用synchronized锁写入数据。"),a("li",null,"如果链表数量>Treeify_THRESHOLD则要转换为红黑树。")],-1)),a("h3",T,[n[138]||(n[138]=a("a",{class:"header-anchor",href:"#get","aria-hidden":"true"},"#",-1)),n[139]||(n[139]=s()),p(t,{style:{"background-color":"#FFEFD1"}},{default:o(()=>n[137]||(n[137]=[s("Get：")])),_:1})]),n[518]||(n[518]=l('<ol><li><p>根据计算出来的hashcode寻址，如果在桶上则直接返回值。</p></li><li><p>否则如果是红黑树就按照树的方式获取值，</p></li><li><p>不是红黑树按照链表的方式遍历获取值。</p></li><li><p>正在搬迁元素前面的元素，直接put</p></li><li><p>正在搬迁的元素，阻塞了，没法获取锁</p></li><li><p>搬迁完成的元素，帮忙搬迁。</p></li></ol><h1 id="·代理-反射-ioc-aop-事务" tabindex="-1"><a class="header-anchor" href="#·代理-反射-ioc-aop-事务" aria-hidden="true">#</a> ·代理,反射(ioc/aop/事务)</h1><h2 id="transactional注解" tabindex="-1"><a class="header-anchor" href="#transactional注解" aria-hidden="true">#</a> @Transactional注解</h2><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1650684034287-59a3e47a-0599-44c5-bf1d-5d2649f1f149.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>定义：</p><ol><li>使用了JDBC的事务来实现事务的。也就是事务还是基于数据库实现的。</li><li>是一种声明式事务，还有编程式事务。</li></ol><p>注意</p><ol><li>放在方法或类上，不能放在接口上。</li><li>只有public是生效的。</li><li>如果方法A，A中调用了另外的方法B，B是加了这个注解，那么外部调用方法A时，B的注解会失效。</li><li>如果异常被捕获了，那么导致注解失效，出现异常也不会回滚。</li></ol>',8)),a("h2",z,[n[141]||(n[141]=a("a",{class:"header-anchor",href:"#ioc","aria-hidden":"true"},"#",-1)),n[142]||(n[142]=s()),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[140]||(n[140]=[s("ioc")])),_:1})]),a("p",null,[n[146]||(n[146]=s("IoC是")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[143]||(n[143]=[s("控制反转")])),_:1}),n[147]||(n[147]=s("，通过IoC容器来帮助我们")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[144]||(n[144]=[s("实例化对象")])),_:1}),n[148]||(n[148]=s("，我们需要哪个对象，直接从IoC容器里面")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[145]||(n[145]=[s("拿")])),_:1}),n[149]||(n[149]=s("就行。"))]),a("p",null,[n[151]||(n[151]=s("不需要我们创建对象，让IoC帮我们")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[150]||(n[150]=[s("管理")])),_:1}),n[152]||(n[152]=s("对象创建的事情。实际上就是个map(key,value)，map中存放的是各种对象。"))]),a("p",null,[n[154]||(n[154]=s("IoC最常见的实现方式叫做")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[153]||(n[153]=[s("依赖注入")])),_:1}),n[155]||(n[155]=s("，Dependency Injection简称DI"))]),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[156]||(n[156]=[s("好处")])),_:1}),n[519]||(n[519]=s("：降低对象之间的耦合度。资源变得容易管理，Spring容器很容易就可以实现一个单例。")),n[520]||(n[520]=a("p",null,"在没有IoC时Service层想要使用dao层的具体实现的话，需要通过new手动创建一个IUserDao的实现类UserDaoImpl（不能直接new接口类）。",-1)),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[157]||(n[157]=[s("SpringIOC原理：")])),_:1}),n[521]||(n[521]=a("ul",null,[a("li",null,"项目启动时读取xml文件中的bean配置路径"),a("li",null,"通过Class.forName的方式进行类的加载，把class文件加载到jvm中，得到类对象"),a("li",null,"然后可以通过反射的方式创建这个类的实例，放到spring容器中。"),a("li",null,"项目运行过程中可以从容器中直接获取bean")],-1)),a("h2",L,[n[159]||(n[159]=a("a",{class:"header-anchor",href:"#aop","aria-hidden":"true"},"#",-1)),n[160]||(n[160]=s()),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[158]||(n[158]=[s("Aop")])),_:1})]),n[522]||(n[522]=a("p",null,"定义：",-1)),a("ol",null,[a("li",null,[n[163]||(n[163]=s("面向切面编程，")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[161]||(n[161]=[s("不改变")])),_:1}),n[164]||(n[164]=s("程序源码的情况下，动态")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[162]||(n[162]=[s("增强方法")])),_:1}),n[165]||(n[165]=s("的功能。"))]),n[171]||(n[171]=a("li",null,"数据OOP面向对象编程的一种延续。",-1)),n[172]||(n[172]=a("li",null,"在不改变原有业务逻辑的情况下，增强横切逻辑代码。",-1)),a("li",null,[n[168]||(n[168]=s("作用可以实现")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[166]||(n[166]=[s("解耦合")])),_:1}),n[169]||(n[169]=s("，避免横切逻辑代码")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[167]||(n[167]=[s("重复")])),_:1}),n[170]||(n[170]=s("。"))])]),n[523]||(n[523]=l('<p>实现：</p><ol><li>可以在多个切点执行这样的切面逻辑，然后再执行本来的业务逻辑。</li><li>能够解决某些继承不能解决的问题。</li><li>继承更够解决大部分重复代码的问题，但是对于一个类中多个方法都有重复代码的问题就无法解决。</li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1651830794263-8d7e9556-d43a-4f89-a3ee-908d3269f4d0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>原理：</p><ol><li>AOP是通过动态代理实现的，</li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1650684019969-6cc09c45-aacb-485d-87d8-1b1f799ef84c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',6)),a("h2",N,[n[174]||(n[174]=a("a",{class:"header-anchor",href:"#代理","aria-hidden":"true"},"#",-1)),n[175]||(n[175]=s()),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[173]||(n[173]=[s("代理")])),_:1})]),n[524]||(n[524]=a("p",null,"不改变类的情况下，对类的功能进行增强。",-1)),n[525]||(n[525]=a("p",null,"代理分为静态代理和动态代理：",-1)),a("h3",W,[n[177]||(n[177]=a("a",{class:"header-anchor",href:"#静态代理","aria-hidden":"true"},"#",-1)),n[178]||(n[178]=s()),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[176]||(n[176]=[s("静态代理")])),_:1})]),a("p",null,[n[185]||(n[185]=s("被代理类是")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[179]||(n[179]=[s("确定")])),_:1}),n[186]||(n[186]=s("的，我们的代理类是手工实现的，")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[180]||(n[180]=[s("自己创建")])),_:1}),n[187]||(n[187]=s("一个java类来表示代理类，只能代理这")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[181]||(n[181]=[s("一个接口")])),_:1}),n[188]||(n[188]=s("的方法。如果想代理其他的，就需要创建")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[182]||(n[182]=[s("新的代理类")])),_:1}),n[189]||(n[189]=s("。代码冗余，复杂。但是实现简单。如果一个")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[183]||(n[183]=[s("接口增加")])),_:1}),n[190]||(n[190]=s("了一个方法，实现类都需要实现这个方法，代理类也需要实现这个方法，增加了")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[184]||(n[184]=[s("代码维护")])),_:1}),n[191]||(n[191]=s("的复杂度。"))]),p(t,{style:{color:"rgb(36, 41, 46)"}},{default:o(()=>n[192]||(n[192]=[s("一般来说，我们自己定义一个代理类，代理类中持有被代理类对象，代理的方法中调用被代理类对该方法的实现，并在代理类中实现对被代理类方法的扩展。")])),_:1}),n[526]||(n[526]=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">findWorker</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 被代理类</span>
<span class="token keyword">class</span> <span class="token class-name">HR</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findWorker</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I need find a worker, title is: &quot;</span><span class="token operator">+</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 代理类</span>
<span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>
    <span class="token comment">// 持有被代理类对象</span>
    <span class="token keyword">private</span> <span class="token class-name">HR</span> hr<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findWorker</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用被代理类的方法。</span>
	hr<span class="token punctuation">.</span><span class="token function">findWorker</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 代理类找worker</span>
        <span class="token class-name">String</span> worker <span class="token operator">=</span> <span class="token function">getWorker</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;find a worker by proxy,worker name is: &quot;</span><span class="token operator">+</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getWorker</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> workerList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Python&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Php&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> workerList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> 动态代理</h3>`,2)),a("p",null,[n[196]||(n[196]=s("而")),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[193]||(n[193]=[s("动态代理")])),_:1}),n[197]||(n[197]=s("我们只需要给他")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[194]||(n[194]=[s("被代理类的对象")])),_:1}),n[198]||(n[198]=s("，就能返回")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[195]||(n[195]=[s("代理类的对象")])),_:1}),n[199]||(n[199]=s("。相比于静态代理当你修改了接口中的方法时，不会影响你的这些代理类。"))]),a("p",null,[n[202]||(n[202]=s("spring实现动态代理有两种方式，jdk动态代理和cglib动态代理。Jdk动态代理：动态生成")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[200]||(n[200]=[s("接口")])),_:1}),n[203]||(n[203]=s("的实例。Cglib动态代理，生成")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[201]||(n[201]=[s("子类")])),_:1}),n[204]||(n[204]=s("代理的实例。如果被代理对象是实现类，用jdk；否则用cglib。"))]),n[527]||(n[527]=a("h4",{id:"jdk动态代理",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jdk动态代理","aria-hidden":"true"},"#"),s(" jdk动态代理")],-1)),n[528]||(n[528]=a("p",null,"选择：如果目标类实现了接口，则使用JDK动态代理，否则使用CGLIB动态代理。spring2.0以后默认cglib",-1)),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[205]||(n[205]=[s("JDK动态代理")])),_:1}),n[529]||(n[529]=s("是基于接口的，动态生成")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[206]||(n[206]=[s("接口")])),_:1}),n[530]||(n[530]=s("的代理对象。通过java反射包中的三个类，InvocationHandler，Method，Proxy三个类实现的。步骤大概是这样，先有一个接口，然后有一个接口的实现类，然后")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[207]||(n[207]=[s("代理类实现")])),_:1}),n[531]||(n[531]=s("InnovationHandler接口，实现里面的invoke方法，这个invoke方法就是实现对接口方法的")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[208]||(n[208]=[s("增强")])),_:1}),n[532]||(n[532]=s("，method.invoke()是执行原来的方法，")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[209]||(n[209]=[s("返回代理对象")])),_:1}),n[533]||(n[533]=l(`就是通过Proxy.newProxyInstance(ClassLoader，接口，handler)<figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1651831042359-035a1d61-3046-478c-83fe-73af9128d42b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorProxy</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MyCalculatorImpl</span> myCalculator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">CalculatorProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myCalculator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;:方法开始执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>myCalculator<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;:方法执行结束了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a("h4",H,[n[211]||(n[211]=a("a",{class:"header-anchor",href:"#cglib动态代理","aria-hidden":"true"},"#",-1)),n[212]||(n[212]=s()),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[210]||(n[210]=[s("cglib动态代理")])),_:1})]),p(t,{style:{"background-color":"#E4F7D2"}},{default:o(()=>n[213]||(n[213]=[s("CGlib动态代理")])),_:1}),n[534]||(n[534]=s("，动态生成")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[214]||(n[214]=[s("子类")])),_:1}),n[535]||(n[535]=s("的代理对象，它不要求是接口，可以代理一个普通的类。步骤大概是这样，然后")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[215]||(n[215]=[s("代理类实现")])),_:1}),n[536]||(n[536]=s("MethodInterceptor，实现里面的interceptor")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[216]||(n[216]=[s("方法")])),_:1}),n[537]||(n[537]=s("，这个方法去实现功能的增强。返回呢是通过给")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[217]||(n[217]=[s("目标类创建子类对象")])),_:1}),n[538]||(n[538]=s("，就得到了我们想要的代理对象。因为CGlib是生成子类代理对象，指定的类生成的一个子类覆盖原有的方法，所以方法不能是final的，类也不能是final的。")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[218]||(n[218]=[s("内部实现")])),_:1}),n[539]||(n[539]=s("是ASM开源包，修改被代理对象的class字节码得到子类对象。")),a("h2",V,[n[220]||(n[220]=a("a",{class:"header-anchor",href:"#反射","aria-hidden":"true"},"#",-1)),n[221]||(n[221]=s()),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[219]||(n[219]=[s("反射")])),_:1})]),n[540]||(n[540]=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示R的类型是type</p><h3 id="反射是啥" tabindex="-1"><a class="header-anchor" href="#反射是啥" aria-hidden="true">#</a> 反射是啥？</h3><p>定义：</p>`,4)),a("ol",null,[a("li",null,[n[225]||(n[225]=s("在运行时期，通过类的class对象获取到")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[222]||(n[222]=[s("任意")])),_:1}),n[226]||(n[226]=s("一个")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[223]||(n[223]=[s("类")])),_:1}),n[227]||(n[227]=s("的所有")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[224]||(n[224]=[s("属性和方法")])),_:1}),n[228]||(n[228]=s("。"))]),a("li",null,[n[231]||(n[231]=s("对于任意一个")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[229]||(n[229]=[s("对象")])),_:1}),n[232]||(n[232]=s("，都能调用它的任意一个")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[230]||(n[230]=[s("方法")])),_:1}),n[233]||(n[233]=s("。"))]),n[234]||(n[234]=a("li",null,[s("这种"),a("strong",null,"动态获取信息，动态调用方法"),s("的功能，叫做反射。")],-1)),n[235]||(n[235]=a("li",null,"（比如通过类对象调用getMethod等方法可以实现。）",-1))]),n[541]||(n[541]=a("p",null,"类对象（元数据）：",-1)),a("ol",null,[a("li",null,[p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[236]||(n[236]=[s("class文件")])),_:1}),n[239]||(n[239]=s("加载到虚拟机之后会被")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[237]||(n[237]=[s("构建")])),_:1}),n[240]||(n[240]=s("成")),p(t,{style:{"background-color":"#DEE8FC"}},{default:o(()=>n[238]||(n[238]=[s("class对象")])),_:1}),n[241]||(n[241]=s("。"))]),n[242]||(n[242]=a("li",null,"包括（实现，继承，构造，成员/类变量，成员/类方法）",-1))]),n[542]||(n[542]=a("p",null,"获取class对象的方法：",-1)),n[543]||(n[543]=a("ol",null,[a("li",null,"对象.getClass()；"),a("li",null,"类.class；"),a("li",null,'Class.forName("包路径")'),a("li",null,"类加载器获得（类加载器读取class文件返回class对象）。")],-1)),n[544]||(n[544]=a("h3",{id:"优缺点",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#优缺点","aria-hidden":"true"},"#"),s(" 优缺点")],-1)),a("p",null,[n[244]||(n[244]=s("反射的")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[243]||(n[243]=[s("优点")])),_:1}),n[245]||(n[245]=s("：灵活性高。运行时动态创建&获取对象实例。"))]),a("p",null,[n[247]||(n[247]=s("反射的")),p(t,{style:{"background-color":"#FCFCCA"}},{default:o(()=>n[246]||(n[246]=[s("缺点")])),_:1}),n[248]||(n[248]=s("：性能低jvm无法优化，安全性。"))]),n[545]||(n[545]=l(`<h3 id="反射api" tabindex="-1"><a class="header-anchor" href="#反射api" aria-hidden="true">#</a> 反射API</h3><p>作用：</p><ol><li>运行时动态生成类、接口对象。</li><li>动态调用方法。</li></ol><p>包括：</p><ol><li>Class类：获取类的属性、方法等信息。</li><li>Field类：表示类的成员变量，获取属性。</li><li>Method类：表示类的方法，用于获取方法或者执行。</li><li>Constructor：表示类的构造方法。</li></ol><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h3><ol><li>获取要操作类的Class对象。</li><li>通过Class对象获取类的属性和方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;hello.java.reflect.Persion&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取Person类所有方法信息</span>
<span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> method<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取Person类所有成员属性信息</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> field<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Field</span> f<span class="token operator">:</span>field<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取Person类所有构造</span>
<span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructor<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span> c<span class="token operator">:</span>constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>创建对象2种方式</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取Class对象</span>
<span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;hello.java.reflect.Person&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 1使用newInstance方法创建对象</span>
<span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2使用构造方法</span>
<span class="token class-name">Constructor</span> c<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p1<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>调用方法</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> clazz<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;hello.java.reflect.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取setName方法</span>
<span class="token class-name">Method</span> method<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;setName&quot;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取构造方法并创建对象</span>
<span class="token class-name">Concstructor</span> constructor<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> object<span class="token operator">=</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用object对象的setName方法，并传入参数。</span>
method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">&quot;alex&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用途场景" tabindex="-1"><a class="header-anchor" href="#用途场景" aria-hidden="true">#</a> 用途场景</h3><p>多态：</p><ol><li>Person person = new Student();</li><li>Person是编译时类型(声明)，Student是运行时类型(赋值)。</li><li>真实信息(属性和方法)是通过反射机制获取的。</li></ol><p>SpringIOC</p><ul><li>项目启动时读取xml文件中的bean配置路径</li><li>通过Class.forName的方式进行类的加载，把class文件加载到jvm中，得到类对象</li><li>然后可以通过反射的方式创建这个类的实例，放到spring容器中。</li><li>项目运行过程中可以从容器中直接获取bean</li></ul><h1 id="·java基础" tabindex="-1"><a class="header-anchor" href="#·java基础" aria-hidden="true">#</a> ·java基础</h1><h2 id="封装继承多态-重写重载" tabindex="-1"><a class="header-anchor" href="#封装继承多态-重写重载" aria-hidden="true">#</a> 封装继承多态/重写重载</h2>`,19)),a("p",null,[n[250]||(n[250]=s("面向对象：封装继承多态，")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[249]||(n[249]=[s("降低系统耦合，更灵活，易于维护，易于扩展")])),_:1}),n[251]||(n[251]=s("。性能不如面向过程，因为创建实例开销比较大，消耗资源。"))]),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[252]||(n[252]=[s("封装：")])),_:1}),n[546]||(n[546]=s("属性私有化，仅")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[253]||(n[253]=[s("提供")])),_:1}),n[547]||(n[547]=s("一些访问这些属性的的方法，让用户可以使用这个类。而且只知道如何使用即可，不需要了解如何")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[254]||(n[254]=[s("实现")])),_:1}),n[548]||(n[548]=s("的。")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[255]||(n[255]=[s("减少耦合")])),_:1}),n[549]||(n[549]=s("，可以独立的开发、测试、优化、使用、修改。易于维护，修改时不影响其他模块。提高")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[256]||(n[256]=[s("可重用性")])),_:1}),n[550]||(n[550]=s("。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[257]||(n[257]=[s("继承：")])),_:1}),n[551]||(n[551]=s("子类继承父类，拥有父类的")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[258]||(n[258]=[s("非private")])),_:1}),n[552]||(n[552]=s("的属性和方法。可以在原有父类方法的基础上")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[259]||(n[259]=[s("重写")])),_:1}),n[553]||(n[553]=s("父类方法，也可以有")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[260]||(n[260]=[s("自己的")])),_:1}),n[554]||(n[554]=s("方法。方便的")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[261]||(n[261]=[s("复用")])),_:1}),n[555]||(n[555]=s("以前的代码，还能实现对父类的一个")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[262]||(n[262]=[s("扩展")])),_:1}),n[556]||(n[556]=s("。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[263]||(n[263]=[s("多态：")])),_:1}),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[264]||(n[264]=[s("一个父类创建出不同的实现类的对象")])),_:1}),n[557]||(n[557]=s("。创建一个父类对象[引用变量]，它可以指向不同的子类对象。对于接口来说，可以指向不同的")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[265]||(n[265]=[s("实现类")])),_:1}),n[558]||(n[558]=s("。一个接口多种实现，实现可以按照自己的需要去实现，而接口的")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[266]||(n[266]=[s("约定")])),_:1}),n[559]||(n[559]=s("只有一个。对于父子类来说，可以指向不同的")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[267]||(n[267]=[s("子类")])),_:1}),n[560]||(n[560]=s("。这种是叫做运行时多态，是在")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[268]||(n[268]=[s("运行时")])),_:1}),n[561]||(n[561]=s("才确定这个引用类型指向哪个具体的类型。还有编译时多态就是方法的")),p(t,{style:{"background-color":"#FFE8E6"}},{default:o(()=>n[269]||(n[269]=[s("重载")])),_:1}),n[562]||(n[562]=s("。")),n[563]||(n[563]=a("p",null,"好处就是易于扩展，体现在方法重载和重写上。缺点就是不能用父类对象引用直接调用子类特有方法。",-1)),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[270]||(n[270]=[s("重写")])),_:1}),n[564]||(n[564]=s("：子类重写父类的方法，使子类具有不同的方法实现。方法名相同，参数相同，返回值类型相同，访问修饰符")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[271]||(n[271]=[s("大于")])),_:1}),n[565]||(n[565]=s("父类，抛出异常范围")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[272]||(n[272]=[s("小于")])),_:1}),n[566]||(n[566]=s("父类。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[273]||(n[273]=[s("重载")])),_:1}),n[567]||(n[567]=s("：同一个类中方法的重载，方法名相同，参数")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[274]||(n[274]=[s("个数")])),_:1}),n[568]||(n[568]=s("/")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[275]||(n[275]=[s("类型")])),_:1}),n[569]||(n[569]=s("/")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[276]||(n[276]=[s("顺序")])),_:1}),n[570]||(n[570]=s("不同，返回值类型随意，访问修饰符随意。")),a("p",null,[n[287]||(n[287]=s("重载是编译时多态，")),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[277]||(n[277]=[s("是")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:o(()=>n[278]||(n[278]=[s("子类和父类")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[279]||(n[279]=[s("之间的")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:o(()=>n[280]||(n[280]=[s("关系")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[281]||(n[281]=[s("，是垂直关系")])),_:1}),n[288]||(n[288]=s("，重写是运行时多态，")),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[282]||(n[282]=[s("重载是")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:o(()=>n[283]||(n[283]=[s("同一个类中方法")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[284]||(n[284]=[s("之间的")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:o(()=>n[285]||(n[285]=[s("关系")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[286]||(n[286]=[s("，是水平关系。")])),_:1})]),n[571]||(n[571]=a("h2",{id:"抽象类和接口",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#抽象类和接口","aria-hidden":"true"},"#"),s(" 抽象类和接口")],-1)),a("ol",null,[a("li",null,[n[291]||(n[291]=s("抽象类是abstract修饰的类，里面有")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[289]||(n[289]=[s("抽象方法")])),_:1}),n[292]||(n[292]=s("也是用abstract修饰不能是private，没有实现，抽象类可以有")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[290]||(n[290]=[s("非抽象方法")])),_:1}),n[293]||(n[293]=s("。接口是interface，变量public static final, 方法默认是public abstract，接口所有方法不能有实现（jdk8可以有默认的方法实现），接口不能有构造方法，抽象类可以有。"))]),n[299]||(n[299]=a("li",null,"抽象类不能创建对象。接口不能实例化，但是能引用一个实现类对象。",-1)),n[300]||(n[300]=a("li",null,"一个类实现接口的话需要实现所有方法。抽象类不一定。一个类可以实现多个接口，但只能继承一个抽象类。",-1)),a("li",null,[n[296]||(n[296]=s("抽象是对类的抽象，是一种")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[294]||(n[294]=[s("模板设计")])),_:1}),n[297]||(n[297]=s("。接口是对行为的抽象，是一种")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[295]||(n[295]=[s("行为规范")])),_:1}),n[298]||(n[298]=s("。"))])]),a("p",null,[n[305]||(n[305]=s("理解：如果继承抽象类代表是这个抽象类的")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[301]||(n[301]=[s("种类")])),_:1}),n[306]||(n[306]=s("，抽象类就是一种IS-A关系，是不是的一种关系，必须")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[302]||(n[302]=[s("满足")])),_:1}),n[307]||(n[307]=s("里氏替换原则，就是子类对象必须能够")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[303]||(n[303]=[s("替换")])),_:1}),n[308]||(n[308]=s("掉所有父类对象。接口是一种like-a的关系，就是一种")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[304]||(n[304]=[s("有没有")])),_:1}),n[309]||(n[309]=s("关系，提供了一种方法实现契约，实现了接口就是有这种行为。"))]),n[572]||(n[572]=l('<p>补1. 接口1.8默认实现，这是因为不支持默认方法的接口维护成本太高。如果一个接口想添加新的方法，要修改所有实现了该接口的类。</p><h2 id="面向对象的六大原则" tabindex="-1"><a class="header-anchor" href="#面向对象的六大原则" aria-hidden="true">#</a> 面向对象的六大原则</h2><p>面向对象的六大原则</p><p>在满足需求且不破坏系统稳定性的前提下保持高可扩展性、高内聚、低耦合。形成灵活、稳定的系统结构。</p><p>面向对象的六大原则分别为单一职责原则、开放封闭原则、里氏替换原则、依赖倒置原则、迪米特原则、接口隔离原则。</p><p>1.单一职责原则</p><p>单一职责原则（Single Responsibility Principle） SRP</p><p>一个类只承担自身特有的职责。一个类如果承受太多职责（即类与类之间耦合度过高）会使大量代码难以阅读、整个项目代码逻辑难以设计。</p><p>2.开放封闭原则</p><p>开放封闭原则（Open Close Principle） OSP</p><p>对于扩展是开放的，对于修改是封闭的。 程序的一个类只因错误而修改，新的改变或升级采用创建新的类通过继承的方式，覆写父类的接口。</p><p>3.里氏替换原则</p><p>里氏替换原则（Liskov Substitution Principle）LSP</p><p>里氏替换原则是开放封闭原则的重要实现方式之一。在程序中使用基类（设计成抽象类或接口）类型来定义对象，在运行再确定其子类类型，用子类对象来替换父类对象 。即 抽象 。（方法注入父类依赖 ImageCache ，使用时传入子类 MemoryCache、DiskCache、DoubleCache ）</p><p>4.依赖倒置原则</p><p>依赖倒置原则（Dependence Inversion Principle）DIP</p><p>高层模块不能依赖低层模块，两者都应依赖于抽象。</p><p>抽象不该依赖细节</p><p>细节应依赖抽象</p><p>依赖关系是通过接口或抽象类产生的。</p><p>5.接口隔离原则</p><p>接口隔离原则（InterfaceSegregation Principle） ISP</p><p>类间的依赖关系应建立在最小的接口上。目的：系统揭开耦合，从而容易重构、更改和重新部署。</p><p>(可关闭的 -&gt;创建 Closeable 接口 -&gt;继承实现 close 方法 -&gt;形成抽象，使用了最小化接口隔离了实现类的细节)</p><p>6.迪米特原则</p><p>迪米特原则（Law of Demecter）LOD 也称为最少知识原则（Least Knowledge Principle）。</p><p>类内部只需要实现需要的接口方法即可，其他一律不管。通过引入第三方来减低现有对象之间的耦合度（如创建抽象类、接口）</p><h2 id="static-final-拷贝-jdk-c" tabindex="-1"><a class="header-anchor" href="#static-final-拷贝-jdk-c" aria-hidden="true">#</a> static/final/拷贝/JDK/C++</h2><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h3>',29)),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[310]||(n[310]=[s("变量")])),_:1}),n[573]||(n[573]=s("：static修饰一个变量代表属于这个类，如果非私有可以直接通过")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[311]||(n[311]=[s("类名")])),_:1}),n[574]||(n[574]=s("调用，实例")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[312]||(n[312]=[s("共享")])),_:1}),n[575]||(n[575]=s("这个变量。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[313]||(n[313]=[s("方法")])),_:1}),n[576]||(n[576]=s("：")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[314]||(n[314]=[s("类加载")])),_:1}),n[577]||(n[577]=s("的时候就存在了，必须有")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[315]||(n[315]=[s("实现")])),_:1}),n[578]||(n[578]=s("，所以")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[316]||(n[316]=[s("不能")])),_:1}),n[579]||(n[579]=s("是抽象方法。只能访问静态变量和静态方法。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[317]||(n[317]=[s("静态代码块")])),_:1}),n[580]||(n[580]=s("：类加载初始化阶段运行一次。")),n[581]||(n[581]=a("p",null,"静态内部类不能访问外部类的非静态的变量和方法。不依赖于外部类的实例。",-1)),n[582]||(n[582]=a("p",null,"非静态内部类实例依赖于外部类的实例。",-1)),n[583]||(n[583]=a("p",null,[a("strong",null,"匿名内部类：")],-1)),a("p",null,[n[321]||(n[321]=s("首先它是一个")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[318]||(n[318]=[s("类")])),_:1}),n[322]||(n[322]=s("，不需要为类")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[319]||(n[319]=[s("指定")])),_:1}),n[323]||(n[323]=s("名字，语法形式就是new 接口名() {实现这个接口的方法};相当于创建一个类的对象，只能使用一次，")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[320]||(n[320]=[s("不能有构造方法")])),_:1}),n[324]||(n[324]=s("。但是可以提供一个对象初始化块。"))]),n[584]||(n[584]=a("h3",{id:"final",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#final","aria-hidden":"true"},"#"),s(" final")],-1)),p(t,{style:{color:"#F5222D"}},{default:o(()=>n[325]||(n[325]=[s("概念")])),_:1}),n[585]||(n[585]=s("：final是常量，要么")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[326]||(n[326]=[s("直接")])),_:1}),n[586]||(n[586]=s("被赋值，要么")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[327]||(n[327]=[s("构造方法")])),_:1}),n[587]||(n[587]=s("赋值，总之，构造方法执行之后它必须是")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[328]||(n[328]=[s("被赋值")])),_:1}),n[588]||(n[588]=s("的状态。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[329]||(n[329]=[s("变量：")])),_:1}),n[589]||(n[589]=s("final Emplayee emplayee; 被初始化以后就不能指向别的对象了，但是对象里面可以变。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[330]||(n[330]=[s("方法")])),_:1}),n[590]||(n[590]=s("：不能被子类重写")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[331]||(n[331]=[s("类")])),_:1}),n[591]||(n[591]=s("：不能被继承")),n[592]||(n[592]=a("p",null,[a("strong",null,"String为什么不可变？")],-1)),a("p",null,[n[339]||(n[339]=s("① java8中String类型是char数组，java9改成byte数组。")),p(t,{style:{color:"#2F54EB"}},{default:o(()=>n[332]||(n[332]=[s("value数组是")])),_:1}),p(t,{style:{color:"#2F54EB","background-color":"#FADB14"}},{default:o(()=>n[333]||(n[333]=[s("final修饰")])),_:1}),p(t,{style:{color:"#2F54EB"}},{default:o(()=>n[334]||(n[334]=[s("的")])),_:1}),n[340]||(n[340]=s("，意味着初始化以后")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[335]||(n[335]=[s("不可以再引用其他数组")])),_:1}),n[341]||(n[341]=s("，而且String内部也没有可以改变value数组的方法。②")),p(t,{style:{color:"#2F54EB"}},{default:o(()=>n[336]||(n[336]=[s("而且String这个")])),_:1}),p(t,{style:{color:"#2F54EB","background-color":"#FADB14"}},{default:o(()=>n[337]||(n[337]=[s("类是final")])),_:1}),p(t,{style:{color:"#2F54EB"}},{default:o(()=>n[338]||(n[338]=[s("修饰的")])),_:1}),n[342]||(n[342]=s("，不允许被继承。我觉得也就没办法通过继承String，让子类去改变value数组的方式使String可变。"))]),n[593]||(n[593]=a("p",null,[a("strong",null,'String s="abc"; s="123";为什么可以？')],-1)),n[594]||(n[594]=a("p",null,'s="abc"这种形式，s指向方法区中的String，里面value是abc，那么因为s不是final修饰的，s指向的引用可以变，可以改成s="123"，也就是s指向了字符串常量池中的另外一个String。',-1)),n[595]||(n[595]=a("p",null,'对于String s=new String("abc")这种形式，s是在栈中的引用变量，会在堆中创建一个String对象，value指向方法区中的"abc"字符串常量。因为String中value数组是final修饰的，所以堆中的String中value数组不能再指向其他对象，而且也没有改变value数组的方法。所以堆中的String对象value数组只能指向"123"，而s不是final的，s的指向是可以变的。',-1)),n[596]||(n[596]=a("p",null,[a("em",null,[a("strong",null,"不可变的好处")]),s("：")],-1)),a("p",null,[n[344]||(n[344]=s("①可以用做")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[343]||(n[343]=[s("hash值")])),_:1}),n[345]||(n[345]=s("，不可变的特性可以使得hash值也不变。比如String的哈希值被用做hashmap的key，"))]),a("p",null,[n[347]||(n[347]=s("②")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[346]||(n[346]=[s("字符串常量池StringPool，")])),_:1}),n[348]||(n[348]=s("如果一个String已经被创建过一次了，可以从StringPool中取得引用，只有不可变，才能使用Stringpool。"))]),a("p",null,[n[350]||(n[350]=s("③")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[349]||(n[349]=[s("安全性")])),_:1}),n[351]||(n[351]=s("：String不可变可以保证参数安全。"))]),a("p",null,[n[353]||(n[353]=s("④")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[352]||(n[352]=[s("线程安全")])),_:1}),n[354]||(n[354]=s("：String不可变天生具备线程安全。StringBuffer是线程安全，用synchronized。"))]),n[597]||(n[597]=a("p",null,"String不可变，StringBuffer和StringBuilder可变（为什么？）。String线程安全，StringBuffer线程安全，内部方法使用synchronized同步，StringBuilder不是线程安全。",-1)),n[598]||(n[598]=a("p",null,"StringBuffer继承了AbstractStringBuilder，append方法调用了父类的append方法，append(str)，调用str.getChars(value。)方法，这个value不是final的，是可变的，是String类的getchars方法，调用了底层的arraycopy方法。",-1)),n[599]||(n[599]=a("h3",{id:"浅拷贝-深拷贝",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#浅拷贝-深拷贝","aria-hidden":"true"},"#"),s(" 浅拷贝/深拷贝")],-1)),a("p",null,[n[357]||(n[357]=a("strong",null,"浅拷贝",-1)),n[358]||(n[358]=s("：")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[355]||(n[355]=[s("拷贝")])),_:1}),n[359]||(n[359]=s("对象和")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[356]||(n[356]=[s("原始")])),_:1}),n[360]||(n[360]=s("对象引用同一个对象。"))]),a("p",null,[n[363]||(n[363]=a("strong",null,"深拷贝",-1)),n[364]||(n[364]=s("：")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[361]||(n[361]=[s("拷贝")])),_:1}),n[365]||(n[365]=s("对象和")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[362]||(n[362]=[s("原始")])),_:1}),n[366]||(n[366]=s("对象引用不同对象。"))]),a("p",null,[n[368]||(n[368]=s("重写clone()方法需要")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[367]||(n[367]=[s("实现")])),_:1}),n[369]||(n[369]=s("Cloneable接口，否则会抛ClassNotSupportedException。默认的clone是浅拷贝，深拷贝如果拷贝数组，就是创建一个大小相同的数组，然后把数组元素都复制到新数组，返回新数组的引用。"))]),n[600]||(n[600]=l('<p>深拷贝不仅拷贝对象本身，拷贝对象的引用也需要拷贝。比如A1引用B1，B1引用C1。浅拷贝得到A2，A2依然引用B1，B1引用C1。而深拷贝，A2引用B2，B2引用C2。</p><h3 id="jdk-jre" tabindex="-1"><a class="header-anchor" href="#jdk-jre" aria-hidden="true">#</a> JDK/JRE</h3><p><strong>JRE和JDK</strong></p><ol><li>jre是java运行环境，jdk是java开发工具包</li><li>jre包含jvm，java基础类库。jdk是程序员使用java语言编写java程序所需的开发工具包。jdk包含了jre，同时包含了编译java源码的编译器javac，还包含很多java程序调试和分析的工具：jconsole，jvisualVM。</li><li>如果只是运行java程序，jre就可以，如果要编写程序需要jdk。</li><li>还包含了java程序编写所需的文档和demo例子程序。</li><li>jre根据不同操作系统（windows、linux等）和不同jre提供商（ibm，oracle）有很多版本。</li><li></li></ol><h3 id="java和c-的区别" tabindex="-1"><a class="header-anchor" href="#java和c-的区别" aria-hidden="true">#</a> Java和C++的区别</h3><ol><li>java通过JVM实现跨平台，C++依赖于特定的平台。</li><li>Java没有指针，但它有引用类似指针，（可以理解为安全指针），而C++具有和C一样的指针。</li><li>Java支持自动垃圾回收，C++需要手动回收。</li><li>Java不支持多继承，但可以实现多个接口，C++支持多继承。</li><li>Java不支持操作符重载，虽然可以对两个String对象执行加法运算，但是这是语言内置支持的操作，不属于操作符重载，而C++可以。</li><li>Java的goto是保留字，不可用，C++可以使用goto</li><li>Java不支持条件编译，C++可以通过#ifdef #ifndef等预处理命令实现条件编译。</li></ol><h2 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类" aria-hidden="true">#</a> 内部类</h2><p>定义在类的内部的类。</p><h3 id="静态内部类" tabindex="-1"><a class="header-anchor" href="#静态内部类" aria-hidden="true">#</a> 静态内部类</h3><p>定义：</p><ol><li>定义在类内部。</li><li>本身是静态的类。</li></ol><p>特点：</p><ol><li>可以访问外部类的静态变量和方法。</li><li>可以定义静态变量、方法、构造等，也可以非静态。</li><li>不依赖外部类实例。</li><li>通过外部类.静态内部类的方式调用。</li></ol><p>使用：</p><ol><li>和外部类关系密切</li><li>不依赖外部类实例。</li><li>如hashmap内部的静态内部类Node数组。</li></ol><h3 id="成员内部类" tabindex="-1"><a class="header-anchor" href="#成员内部类" aria-hidden="true">#</a> 成员内部类</h3><p>定义：</p><ol><li>定义在类内部。</li><li>非静态类。</li></ol><p>特点：</p><ol><li>不能定义静态方法和变量。除了final修饰的。</li></ol><h3 id="局部内部类" tabindex="-1"><a class="header-anchor" href="#局部内部类" aria-hidden="true">#</a> 局部内部类</h3><p>定义：</p><ol><li>定义在方法中的类。</li></ol><p>特点：</p><ol><li>当一个类只需要在某个方法中使用时。</li></ol><h3 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类" aria-hidden="true">#</a> 匿名内部类</h3><p>定义：</p><ol><li>通过继承一个类。</li><li>或者实现一个接口的方式</li><li>直接定义并使用的类。</li></ol><p>特点：</p><ol><li>没有class关键字。</li><li>直接使用new生成一个对象的引用。</li></ol><h2 id="泛型-注解-异常" tabindex="-1"><a class="header-anchor" href="#泛型-注解-异常" aria-hidden="true">#</a> 泛型/注解/异常</h2>',31)),a("h3",J,[n[371]||(n[371]=a("a",{class:"header-anchor",href:"#泛型","aria-hidden":"true"},"#",-1)),n[372]||(n[372]=s()),p(t,{style:{"background-color":"#1890FF"}},{default:o(()=>n[370]||(n[370]=[s("泛型")])),_:1})]),n[601]||(n[601]=a("p",null,"定义：",-1)),a("ol",null,[a("li",null,[n[374]||(n[374]=s("用<E>尖括号这种写法去")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[373]||(n[373]=[s("定义泛型")])),_:1}),n[375]||(n[375]=s("。"))]),a("li",null,[n[377]||(n[377]=s("直接用E去")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[376]||(n[376]=[s("使用泛型")])),_:1}),n[378]||(n[378]=s("。"))])]),n[602]||(n[602]=a("p",null,"特点：",-1)),a("ol",null,[a("li",null,[n[380]||(n[380]=s("这样")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[379]||(n[379]=[s("编写")])),_:1}),n[381]||(n[381]=s("代码不用固定具体是哪种类型。"))]),a("li",null,[n[383]||(n[383]=s("而是使用这样的泛型的方式去")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[382]||(n[382]=[s("代表")])),_:1}),n[384]||(n[384]=s("元素的类型。"))]),n[385]||(n[385]=a("li",null,"如果不用泛型，我们可以使用Object实现参数任意化。",-1)),n[386]||(n[386]=a("li",null,"但是具体使用时需要进行强制类型转换。容易出现类型转换错误。",-1)),n[387]||(n[387]=a("li",null,"泛型可以在编译器检查类型是否安全。",-1)),n[388]||(n[388]=a("li",null,"提高安全性和重用性。",-1))]),n[603]||(n[603]=l('<h4 id="泛型标记和泛型限定" tabindex="-1"><a class="header-anchor" href="#泛型标记和泛型限定" aria-hidden="true">#</a> 泛型标记和泛型限定</h4><p><strong>泛型标记</strong>：E/T/K/V/N/?</p><p>E：集合中使用，表示集合中存放的元素。</p><p>T：表示java类，包括基本类型和自定义的类。</p><p>K：表示键，比如Map中的key。</p><p>V：表示值。</p><p>N：表示数值类型。</p><p>?：表示不确定的Java类型。表示所有具体的参数类型。| 泛型类中的泛指 ，是一个占位符 不能往容器中添加数据。</p><p><strong>泛型限定</strong>：</p><ol><li>对泛型上限的限定：&lt;? extends T&gt;</li></ol><p>表示是T类的子类或者接口T的子接口。</p><ol start="2"><li>对泛型下限的限定：&lt;? super T&gt;</li></ol><p>表示T类型父类或者父接口。</p><p>T...inputArray：表示可变长度参数，可以不传，可以传1个，2个...可以传数组。</p><h4 id="泛型类和泛型方法和泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型类和泛型方法和泛型接口" aria-hidden="true">#</a> 泛型类和泛型方法和泛型接口</h4><p>泛型方法：</p><p>定义：</p><ol><li>在方法的返回值前后用&lt;&gt;定义泛型。</li><li>在方法的参数类型定义为泛型。</li><li>调用时可以接收不同类型的参数。</li><li>在方法内部根据不同的类型执行不同处理方法。</li></ol><p>泛型类：</p><p>定义：</p><ol><li>在类名后用&lt;&gt;定义泛型。</li><li>使用时根据传入参数类型不同实例化不同的对象。比如List&lt;&gt;</li></ol><p>泛型接口：</p><p>定义：</p><ol><li>泛型接口的声明和泛型类相似。</li><li>在接口名后面加&lt;T&gt;定义泛型。</li><li>在实现类中定义具体的类型。</li><li>不同的实现类传入不同的类型去做不同的业务逻辑。</li></ol><h4 id="类型擦除" tabindex="-1"><a class="header-anchor" href="#类型擦除" aria-hidden="true">#</a> 类型擦除</h4><p>定义：</p><ol><li>我们使用泛型时加上的类型参数会被去掉。</li><li>在编译器编译时。</li></ol>',27)),a("h3",K,[n[390]||(n[390]=a("a",{class:"header-anchor",href:"#注解","aria-hidden":"true"},"#",-1)),n[391]||(n[391]=s()),p(t,{style:{"background-color":"#1890FF"}},{default:o(()=>n[389]||(n[389]=[s("注解")])),_:1})]),n[604]||(n[604]=l(`<p>定义：</p><ol><li>是一种接口，设置属性。</li><li>可以通过反射获取注解对象</li><li>进而获得注解元素内数据信息。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 作用在方法上</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>

    <span class="token keyword">long</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>

    <span class="token comment">// 缓存标识key</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h4><p>注解其他注解。</p><p>@Target：作用范围。可被作用在packages、types(类、接口、枚举、注解)、类型成员(方法、构造、成员、枚举值)、本地变量等。</p><p>@Retention：source源文件，classclass文件中，runtime运行时有效。</p><p>@Documented：加了表示被javadoc工具记录。</p><p>@Inherited：加了这个注解的注解，被用于一个Class，那么这个注解也会被用于Class的子类。</p><h4 id="通过反射获取注解信息" tabindex="-1"><a class="header-anchor" href="#通过反射获取注解信息" aria-hidden="true">#</a> 通过反射获取注解信息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 某个注解加在一个类的成员变量上了</span>
<span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token operator">:</span>fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">FruitProvider</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FruitProvider</span> fruitProvider<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">FruitProvider</span><span class="token punctuation">)</span>field<span class="token punctuation">.</span>
            <span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">FruitProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> id<span class="token operator">=</span>fruitProvider<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)),a("h3",Q,[n[393]||(n[393]=a("a",{class:"header-anchor",href:"#异常","aria-hidden":"true"},"#",-1)),n[394]||(n[394]=s()),p(t,{style:{"background-color":"#1890FF"}},{default:o(()=>n[392]||(n[392]=[s("异常")])),_:1})]),n[605]||(n[605]=a("h4",{id:"异常分类",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#异常分类","aria-hidden":"true"},"#"),s(" 异常分类")],-1)),n[606]||(n[606]=a("p",null,"Throwable：",-1)),a("ol",null,[n[398]||(n[398]=a("li",null,[s("下面分为，"),a("strong",null,"Error和Exception"),s("。")],-1)),a("li",null,[n[396]||(n[396]=s("可以用来表示")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[395]||(n[395]=[s("任何可以异常抛出")])),_:1}),n[397]||(n[397]=s("的类。"))])]),n[607]||(n[607]=a("p",null,"Error：",-1)),a("ol",null,[a("li",null,[n[401]||(n[401]=s("**")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[399]||(n[399]=[s("Error")])),_:1}),n[402]||(n[402]=a("strong",null,[a("strong",null,"表示")],-1)),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[400]||(n[400]=[s("JVM无法处理")])),_:1}),n[403]||(n[403]=s("**")),n[404]||(n[404]=a("strong",null,"的错误，程序运行错误",-1)),n[405]||(n[405]=s("。"))]),n[406]||(n[406]=a("li",null,"比如OOM，StackOverflowError。一些堆或者栈内存溢出。",-1)),n[407]||(n[407]=a("li",null,"如果出现错误，程序会终止，通常是程序内部错误或者资源耗尽。",-1))]),n[608]||(n[608]=a("p",null,"Exception：",-1)),a("ol",null,[a("li",null,[a("p",null,[n[409]||(n[409]=s("**")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[408]||(n[408]=[s("Exception")])),_:1}),n[410]||(n[410]=s("**")),n[411]||(n[411]=a("strong",null,"程序运行异常，分为两种",-1)),n[412]||(n[412]=s("，受检异常（")),n[413]||(n[413]=a("strong",null,"非运行时异常",-1)),n[414]||(n[414]=s("）。"))])]),n[426]||(n[426]=a("li",null,[a("p",null,[s("如"),a("strong",null,"IOException、SQLException、ClassNotFoundException"),s("等。")])],-1)),a("li",null,[a("p",null,[n[416]||(n[416]=s("可以通过try...catch...语句捕捉处理或者throws抛出，否则")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[415]||(n[415]=[s("不能通过")])),_:1}),n[417]||(n[417]=s("编译。"))])]),n[427]||(n[427]=a("li",null,[a("p",null,[a("strong",null,"运行时异常"),s("。")])],-1)),n[428]||(n[428]=a("li",null,[a("p",null,[s("都是"),a("strong",null,"RuntimeException类及其子类，如NullPointerException、IndexOutOfBoundsException等"),s("。")])],-1)),a("li",null,[a("p",null,[n[420]||(n[420]=s("在程序")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[418]||(n[418]=[s("运行时")])),_:1}),n[421]||(n[421]=s("可能会发生的，所以程序")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[419]||(n[419]=[s("可以")])),_:1}),n[422]||(n[422]=s("捕捉，也可以不捕捉。"))])]),a("li",null,[a("p",null,[n[424]||(n[424]=s("这些错误一般是由程序本身的")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[423]||(n[423]=[s("逻辑")])),_:1}),n[425]||(n[425]=s("错误引起的，应该从程序逻辑的角度避免。"))])])]),n[609]||(n[609]=a("figure",null,[a("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/22839467/1651544014374-5cf7bf8b-19a9-457c-8497-e0d5770f02d3.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1)),a("h4",U,[n[430]||(n[430]=a("a",{class:"header-anchor",href:"#异常处理","aria-hidden":"true"},"#",-1)),n[431]||(n[431]=s()),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[429]||(n[429]=[s("异常处理")])),_:1})]),n[610]||(n[610]=a("ol",null,[a("li",null,[s("抛出异常->throws、throw"),a("br"),s(" 抛出就是不处理，抛给调用者，调用者处理。异常中封装了方法执行过程中的错误信息，调用方获取该异常后根据业务情况选择处理或者继续抛出异常。程序throw执行后续代码不再执行了。")]),a("li",null,"捕获异常->try...catch...finally，catch就是捕获异常并处理。一般不会捕获error，因为通常error会导致程序直接退出，捕获处理没有意义，比如oom运行环境已经崩溃了，没办法恢复运行状态了。")],-1)),n[611]||(n[611]=a("p",null,"throw和throws的区别",-1)),a("ol",null,[n[437]||(n[437]=a("li",null,"位置，throw在方法内部，throws在方法的签名处，方法的声明处",-1)),n[438]||(n[438]=a("li",null,"内容，throw+异常对象(运行时异常)，throws+异常的类型，可以多个类型，用拼接",-1)),a("li",null,[n[434]||(n[434]=s("作用，throw异常出现的源头，制造异常。throws是")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[432]||(n[432]=[s("告诉")])),_:1}),n[435]||(n[435]=s("调用者，这个方法可能会出现我声明的这些异常。")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[433]||(n[433]=[s("调用者对")])),_:1}),n[436]||(n[436]=s("这个异常进行处理，要么自己处理，要么抛出。"))])]),n[612]||(n[612]=l(`<h2 id="io流和序列化" tabindex="-1"><a class="header-anchor" href="#io流和序列化" aria-hidden="true">#</a> IO流和序列化</h2><h3 id="序列化-1" tabindex="-1"><a class="header-anchor" href="#序列化-1" aria-hidden="true">#</a> 序列化</h3><p>背景：</p><ol><li>java对象在JVM运行时创建、更新、销毁。</li><li>JVM退出时，对象也会被销毁。</li></ol><p>作用：</p><ol><li>保存对象信息。</li><li>对象信息保存在字节数组中并持久化。</li></ol><p>实现：</p><ol><li>实现Serializable接口。</li><li>private static final long serialVersionUID定义序列化ID。</li></ol><p>特点：</p><ol><li>不序列化静态变量。</li><li>需要序列化父类变量，父类也要实现Serializable接口。</li><li>使用Transient关键字可以阻止变量被序列化。</li></ol><p>代码示例：</p><p>Java生态中很多优秀的序列化框架，如protobuf，fastjson等。我们也可以基于原生JDK的ObjectOutputStream和ObjectInputStream实现对象的序列化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;worker.out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectOutputStream</span> oos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Wroker</span> testObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    testObject<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;alex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>testObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 反序列化</span>
    <span class="token class-name">FileInputStream</span> fis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;worker.out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Wroker</span> deTest<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Wroker</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deTest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="io流" tabindex="-1"><a class="header-anchor" href="#io流" aria-hidden="true">#</a> IO流</h3><p>字节流是直接对文件本身操作，字符流在操作时用到了缓冲区，通过缓冲区再操作文件。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1651562831835-76d1adb6-d1d8-4c32-ac67-24f7cc10501f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,16)),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[439]||(n[439]=[s("字节：InputStream和OutputStream，字符：")])),_:1}),n[613]||(n[613]=s("Reader、Writer作为基类。")),a("p",null,[n[443]||(n[443]=s("根据不同的")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[440]||(n[440]=[s("数据载体")])),_:1}),n[444]||(n[444]=s("或")),p(t,{style:{"background-color":"#FADB14"}},{default:o(()=>n[441]||(n[441]=[s("功能")])),_:1}),n[445]||(n[445]=s("派生出来很多IO流。")),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[442]||(n[442]=[s("比如：")])),_:1})]),a("ul",null,[a("li",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[446]||(n[446]=[s("FileInputStream/FileOutputStream 基于字节流读取或者写入文件需要逐个字节处理原始二进制流的时候使用，效率低下。")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[447]||(n[447]=[s("FileReader/FileWriter 基于字符流，需要逐个字符处理的时候使用")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[448]||(n[448]=[s("StringReader/StringWriter 需要处理字符串的时候，可以将字符串保存为字符数组")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[449]||(n[449]=[s("PrintStream/PrintWriter 用来")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:o(()=>n[450]||(n[450]=[s("包装")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[451]||(n[451]=[s("FileOutputStream 对象，方便直接将String字符串写入文件 ")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[452]||(n[452]=[s("Scanner 用来包装System.in流，很方便地将输入的String字符串转换成需要的数据类型")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[453]||(n[453]=[s("InputStreamReader/OutputStreamReader , ")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:o(()=>n[454]||(n[454]=[s("字节和字符")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[455]||(n[455]=[s("的转换桥梁，在网络通信或者处理键盘输入的时候用")])),_:1})]),a("li",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[456]||(n[456]=[s("BufferedReader/BufferedWriter ， BufferedInputStream/BufferedOutputStream ，")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)","background-color":"#FADB14"}},{default:o(()=>n[457]||(n[457]=[s(" 缓冲流")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[458]||(n[458]=[s("用来包装字节流后者字符流，提升IO性能，BufferedReader还可以方便地读取一行，简化编程。")])),_:1})])]),n[614]||(n[614]=l(`<p><strong>字节</strong>：InputStream和OutputStream</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1651562898472-39604c41-3584-481b-afd5-24b831d5fc3f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1651562908313-8b1a3584-a53f-48ec-a296-99f65e1023aa.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>字符：Reader、Writer作为基类。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1651562938628-063fed22-d918-4416-94ee-6c95e122f5e5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/22839467/1651562951343-0ebaa87e-58b1-4968-a6bc-ffb7a61edf12.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>javaIO流体系基于字符流（InputStream/OutputStream）和字节流（Reader/Writer）作为基类，根据不同的数据载体或功能派生出来。</p><p><strong>文件流</strong></p><p>FileInputStream/FileOutputStream，FileReader/FileWriter。需要关闭流对象，7之后try(打开流)，不需要关闭流对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIO</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">FileInputStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;tmp2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment">//read()返回的是单个字节数据（字节数据可以直接专程int类型)，但是read(buf)返回的是读取到的字节数，真正的数据保存在buf中</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//每次最多将1024个字节转换成字符串，这里tmp2.txt中的字符小于1024，所以一次就读完了</span>
            <span class="token comment">//循环次数 = 文件字符数 除以 buf长度</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span>hasRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/*
             * 将字节强制转换成字符后逐个输出，能实现和上面一样的效果。但是如果源文件是中文的话可能会乱码

            for (byte b : buf)    {
                char ch = (char)b;
                if (ch != &#39;\\r&#39;)
                System.out.print(ch);
            }
            */</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//在finally块里close更安全</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">FileReaderTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token comment">// 在try() 中打开的文件， JVM会自动关闭</span>
                <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;tmp2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 每个char都占两个字节，每个字符或者汉字都是占2个字节，因此无论buf长度为多少，总是能读取中文字符长度的整数倍,不会乱码</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果buf的长度大于文件每行的长度，就可以完整输出每行，否则会断行。</span>
                <span class="token comment">// 循环次数 = 文件字符数 除以 buf长度</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 跟上面效果一样</span>
                <span class="token comment">// System.out.println(buf);</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">FileOutputStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token comment">//在try()中打开文件会在结尾自动关闭</span>
                <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;tmp2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;tmp3.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//每读取一次就写一次，读多少就写多少</span>
                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;write success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">FileWriterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;tmp4.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;天王盖地虎\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;宝塔镇河妖\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//FileInputStreamTest();</span>
        <span class="token comment">//FileReaderTest();</span>
        <span class="token comment">//FileOutputStreamTest();</span>
        <span class="token class-name">FileWriterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),a("p",null,[n[460]||(n[460]=s("包装流：")),a("strong",null,[p(t,{style:{color:"rgb(0, 0, 0)"}},{default:o(()=>n[459]||(n[459]=[s("PrintStream/PrintWriter/Scanner")])),_:1})])]),n[615]||(n[615]=a("p",null,"PrintStream可以封装（包装）直接与文件交互的节点流对象OutputStream, 使得编程人员可以忽略设备底层的差异，进行一致的IO操作。因此这种流也称为处理流或者包装流。",-1)),n[616]||(n[616]=a("p",null,"PrintWriter除了可以包装字节流OutputStream之外，还能包装字符流Writer",-1)),n[617]||(n[617]=a("p",null,"Scanner可以包装键盘输入，方便地将键盘输入的内容转换成我们想要的数据类型。",-1)),a("p",null,[a("strong",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[461]||(n[461]=[s("字符串流：StringReader/StringWriter")])),_:1})])]),n[618]||(n[618]=a("p",null,"这两个操作的是专门操作String字符串的流，其中StringReader能从String中方便地读取数据并保存到char数组，而StringWriter则将字符串类型的数据写入到StringBuffer中（因为String不可写）。",-1)),a("p",null,[a("strong",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[462]||(n[462]=[s("转换流：InputStreamReader/OutputStreamReader")])),_:1})])]),n[619]||(n[619]=a("p",null,"这两个类可以将字节流转换成字符流，被称为字节流与字符流之间的桥梁。我们经常在读取键盘输入(System.in)或网络通信的时候，需要使用这两个类。",-1)),a("p",null,[a("strong",null,[p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[463]||(n[463]=[s("缓冲流：BufferedReader/BufferedWriter ， BufferedInputStream/BufferedOutputStream")])),_:1})])]),a("p",null,[a("strong",null,[p(t,{style:{color:"rgb(51, 51, 51)"}})])]),n[620]||(n[620]=a("p",null,"没有经过Buffered处理的IO， 意味着每一次读和写的请求都会由OS底层直接处理，这会导致非常低效的问题。",-1)),p(t,{style:{color:"rgb(255, 0, 0)"}},{default:o(()=>n[464]||(n[464]=[s("经过Buffered处理过的输入流将会从一个buffer内存区域读取数据，本地API只会在buffer空了之后才会被调用（可能一次调用会填充很多数据进buffer）。")])),_:1}),p(t,{style:{color:"rgb(255, 0, 0)"}},{default:o(()=>n[465]||(n[465]=[s("经过Buffered处理过的输出流将会把数据写入到buffer中，本地API只会在buffer满了之后才会被调用。")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[466]||(n[466]=[s("BufferedReader/BufferedWriter可以将字符流(Reader)包装成缓冲流，这是最常见用的做法。")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[467]||(n[467]=[s("另外，")])),_:1}),n[621]||(n[621]=s("**")),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[468]||(n[468]=[s("BufferedReader提供一个readLine()可以方便地读取一行")])),_:1}),n[622]||(n[622]=s("**")),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[469]||(n[469]=[s("，而FileInputStream和FileReader只能读取一个字节或者一个字符，")])),_:1}),p(t,{style:{color:"rgb(51, 51, 51)"}},{default:o(()=>n[470]||(n[470]=[s("因此BufferedReader也被称为行读取器")])),_:1}),n[623]||(n[623]=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PushbackReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">StringReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">StringWriter</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIO</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;tmp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;普通字符串\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//输出对象</span>
            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输出完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stringNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;天王盖地虎\\n&quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;宝塔镇河妖\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//StringReader将以String字符串为节点读取数据</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">StringReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//由于String是一个不可变类，因此创建StringWriter时，实际上是以一个StringBuffer作为输出节点</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">StringWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;黑夜给了我黑色的眼睛\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;我却用它寻找光明\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//toString()返回sw节点内的数据</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">keyIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token comment">//InputStreamReader是从byte转成char的桥梁</span>
                <span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//BufferedReader(Reader in)是char类型输入的包装类</span>
                <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//System.exit(1);</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pushback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PushbackReader</span> pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushbackReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;C:/PROJECT/JavaBasic/PROJECT_JavaBasic/src/io/TestIO.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> lastContent <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> targetIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>targetIndex <span class="token operator">=</span> <span class="token punctuation">(</span>lastContent <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;targetIndex = (lastContent + content)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    pr<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lastContent <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetIndex <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> targetIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> targetIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lastContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    lastContent <span class="token operator">=</span> content<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">printStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//stringNode();</span>
        <span class="token comment">//keyIn();</span>
        <span class="token comment">//pushback();</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const $=e(c,[["render",G],["__file","javaBasic.html.vue"]]);export{$ as default};
